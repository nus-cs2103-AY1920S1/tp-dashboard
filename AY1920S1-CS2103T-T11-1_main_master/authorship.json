[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003d MooLah"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "https://travis-ci.org/ay1920s1-cs2103t-t11-1/main[image:https://travis-ci.org/ay1920s1-cs2103t-t11-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "* Our unique expense tracker app, MooLah, is tailored to students from National University of Singapore."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "It helps users cultivate good financial management habits through tracking their expenses and setting periodical budgets."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "With MooLah, you can spend smart and save smart."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "* This is a desktop application. It has a GUI but most of the user interactions occur using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* Original source of the code: AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 4,
      "anqichen9856": 3,
      "-": 26
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    compile group: \u0027org.fxmisc.richtext\u0027, name: \u0027richtextfx\u0027, version: \u00270.10.2\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "czkay"
        },
        "content": "    // https://mvnrepository.com/artifact/com.joestelmach/natty"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "czkay"
        },
        "content": "    compile group: \u0027com.joestelmach\u0027, name: \u0027natty\u0027, version: \u00270.13\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "czkay"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        \u0027site-name\u0027: \u0027Expense Tracker\u0027,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103T-T11-1/main\u0027,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "briyanii": 2,
      "czkay": 4,
      "anqichen9856": 2,
      "-": 152
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "MooLah was developed by the https://se-edu.github.io/docs/Team.html[se-edu] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "_{The dummy content given below serves as a placeholder to be used by future forks of the project.}_ +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d Anqi Chen"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "image::anqichen9856.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "{empty}[https://github.com/anqichen9856[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Responsibilities: In charge of Budgeting \u0026 Expense Tracking"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d Brian Fung"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "image::briyanii.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "{empty}[http://github.com/briyanii[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Role: Developer  +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Responsibilities: In charge of GUI"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d Chong Zi Kang"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "image::czkay.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "{empty}[http://github.com/czkay[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Responsibilities: In charge of Reminder \u0026 Prediction"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d Ryo Chandra Putra Armanda"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "image::ryoarmanda.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "{empty}[http://github.com/ryoarmanda[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Responsibilities: In charge of Budgeting"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d Quek Wei Ping"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "image::qweiping31415.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "{empty}[http://github.com/qweiping31415[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Responsibilities: In charge of Statistics"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 1,
      "anqichen9856": 22,
      "-": 34
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-T11-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *Email us* : You can also reach us at `anqichen@u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003d MooLah - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T11-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "By: `CS2103T-T11-1`      Since: `Aug 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d Purpose \u0026 Scope"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "This document specifies architecture and software design decisions for the app MooLah."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "The intended audience of this document is the developers, designers, and software testers of MooLah."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d Software Overview"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "MooLah is a desktop CLI application that help users track their expenses."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "The App supports many other extensions such as budgeting, planning and reminders."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "In particular, it is tailored to students in National University of Singapore who dine frequently in school canteens."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `SinglePanelView`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": "The content being shown in the `MainWindow` is managed by the ``SinglePanelView`` which supports the following operations:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "briyanii"
        },
        "content": "``SinglePanelView#viewPanel(panelName)``"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "briyanii"
        },
        "content": "``SinglePanelView#hasPanel(panelName)``"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "briyanii"
        },
        "content": "``SinglePanelView#getPanel(panelName)``"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "briyanii"
        },
        "content": "``SinglePanelView#setPanel(panelName, panel)``"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "briyanii"
        },
        "content": "image::SinglePanelViewClassDiagram.png[]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Users may change between the visible panels through the CLI by using the `view` command."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "briyanii"
        },
        "content": "The following sequence diagram shows the events which occur in order to change the the UI component displayed in the main window."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "briyanii"
        },
        "content": "image::ViewPanelSequenceDiagram.png[]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ".  `Logic` uses the `MooLahParser` class to parse the user command."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* stores the MooLah data."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `MooLah`, which `Person` can reference. This would allow `MooLah` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* can save the MooLah data in json format and read it back."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "// category::undoredo[]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "The undo/redo functionality is facilitated by `ModelHistory` which is an instance-level member for models."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Internally, it stores model snapshots by using two stacks: `pastModels` and `futureModels`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "With the addition of model history, now `Model` also supports these operations:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "* `Model#addToHistory()` -- Moves the history forward by saving the current model snapshot in its past history and clearing the future history."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "* `Model#rollback()` -- Restores the state to the immediate previous model in the history."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "* `Model#migrate()` -- Forwards the state to the immediate next model in the history."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "`ModelHistory` only stores histories of models which were about to be (or are going to be) executed by model-changing commands."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "As some of the commands available are intuitively not undoable (e.g. `help`), we make commands extend to either `UndoableCommand` or a non-undoable `Command` classes."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "So, the `Model#addToHistory()` will only be called if the command to be executed is an instance of `UndoableCommand`."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Step 1. The user launches the application for the first time. The current `ModelHistory` is now empty."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Step 2. The user executes `add d/Chicken Rice p/2.50 ...` command to add an expense."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "The `add` command, being an `UndoableCommand`, calls `Model#addToHistory()`, which saves the state of the model just before the command executes to `pastModels`, and `futureModels` is cleared."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Step 3. The user executes `delete 1` to delete the first expense on the list. The `delete` command, also an `UndoableCommand`, calls `Model#addToHistory()`, inserting another entry to the `pastModels` and clearing `futureModels` again."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "If a command fails its execution, it will not call `Model#addToHistory()`, so the model will not be saved into `ModelHistory`."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Step 4. The user now decides that deleting the expense was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#rollbackModel()`, which will retrieve the immediate previous model in history, adding the current model to the future history of the retrieved model, and restores the model according to that state."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "If `pastModels` is empty, then there are no previous models to roll back. The `undo` command uses `Model#canRollback()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "The following sequence diagram shows how the undo command works:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Inversely, the `redo` command calls `Model#migrate()`, which retrieves the immediate next model in history, adds the current model to the past history of the retrieved model, and resets the model according to that snapshot."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "If `futureModels` is empty, then there are no snapshots to be redone. The `redo` command uses `Model#canMigrate()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire model."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "** Pros: Easier to implement."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "* **Alternative 2:** Individual commands have their own counter-command that can negate the effects."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "** Pros: Quite intuitive (e.g. for `add`, just do `delete` to counter it)."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "We choose Alternative 1 as this approach will be less likely to cause problems specific to restoring the state to the way it was before the execution of a command,"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "as some commands will create a problem specific on their own which might not be supported by the proposed counter-command."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "As an example, to undo `delete 3`, we must re-add that expense to that specific position, which at the moment is not supported"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "by the `add` command."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "// category::budget[]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d Budget feature"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "The budget feature allows users to add a budget and track expenses under this budget."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "When a budget is added, it is automatically set to the primary budget, and all expenses added after that"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "will be tracked under this budget. If the user wants to track an expense under a different budget, he"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "switches to the target budget first, before adding the expense."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Each `Budget` has 8 fields:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* description: `Description` - budget name"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* amount: `Price` - amount of budget limit"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* startDate: `Timestamp` - the start date of the budget (for the current period)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* endDate: `Timestamp`- the end date of the budget (for the current period)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* period: `Period` - the recurring period of the budget"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* expenses: `ObservableList\u003cExpense\u003e` - the list of all expenses under this budget"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* isPrimary: `boolean` - a flag indicating the primary status of this budget"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* proportionUsed: `Percentage` - the proportion of the total amount that has been used up"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "image::BudgetClassDiagram.png[]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Each budget, once added, will recur infinitely. This is achieved by the Budget#refresh() method, which checks whether"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "the budget has expired, and refreshes it to a new period if necessary, upon launching MooLah."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "A budget is like a sliding window that moves in the positive direction of time axis. The window has a fixed size,"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "which is the period of the budget. Only expenses within the current window will be shown in the app. Every time"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "the budget refreshes, the window \"slides\" to the next period, starting with an empty screen that gradually gets"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "populated with newly added expenses over time."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "A budget keeps a list of all expenses ever been tracked by this budget, including historical ones. Additionally,"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "it has a method Budget#getCurrentPeriodExpenses() that generates a filtered list of expenses within the current budgeting"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "period, which interacts with GUI to be shown in the current screen."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "The fundamental classes of the budget feature are:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* `Budget` : main functional backend class"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* `JsonAdaptedBudget` : for storage of a `Budget` object in Json format"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* `UniqueBudgetList` : a list of non-duplicate budgets in MooLah"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* `AddBudgetCommand` and `SwitchBudgetCommand` : budget-related commands"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        `AddBudgetCommand` creates a new `Budget` and adds it to `UniqueBudgetList`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        `SwitchBudgetCommand` switches the primary budget to the specified budget"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* `AddBudgetCommandParser` and `SwitchBudgetCommandParser` : for parsing CLI input into commands"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Here are the class diagrams of the two key commands related to Budget:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "AddBudgetCommand: Adds a new Budget to MooLah"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "image::AddBudgetCommandClassDiagram.png[]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "SwitchBudgetCommand: Switches the primary Budget to another"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "image::SwitchBudgetCommandClassDiagram.png[]"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Additionally, util class `Percentage` wraps a percentage for easier calculation and validation of proportionUsed."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "image::PercentageClassDiagram.png[]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "The following sequence diagram shows how the add budget operation works:"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "image::AddBudgetSequenceDiagram.png[]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "NOTE: The lifeline for `AddBudgetCommandParser` and `AddBudgetCommand` should end at the destroy marker (X) but due to"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "The following activity diagram summarizes what happens to budgets when the app launches and when a new expense is added:"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "image::BudgetActivityDiagram.png[]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Since Budget already keeps a list of Expenses, should Expense have a Budget field?"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* **Alternative 1:** Expense has a Budget field"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "** Pros: Easier to manage expenses."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "** Cons: Causes cyclical dependency, and reduces testability. Also, this will cause infinite loop when creating"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "JsonAdaptedExpense and JsonAdaptedBudget."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* **Alternative 2:** Expense does not have reference to Budget"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "** Pros: Less coupling."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "** Cons: When reconstructing MooLah from json file, system does not know which budget to add the past expenses to."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* **Solution (Current implementation):**"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Each Expense keeps a budgetName field which indicates the name of the Budget it is tracked under. Since UniqueBudgetList"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "checks for duplicate budget names, a name is sufficient to identify a Budget. Besides, since budgetName is of"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "`Description` type instead of `Budget` type, it is easy to convert to String, and resolves infinite loop when creating"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "json files. Also, the resulting JsonAdaptedExpense file will not be too long, since the \"budgetName\" property stores"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "only the budget name instead of the full budget object."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Must every Expense be tracked under a Budget? Can one Expense be tracked under multiple Budgets?"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* **Alternative 1:** Every Expense must be tracked under one, and only one Budget."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "** Pros: Budgets would be a partition of all Expenses, which makes generating statistics (pie charts, etc.) easier."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "** Cons: User would not be able to track Expenses that fall under multiple Budgets."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* **Alternative 2:** Allow expenses without a Budget."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "** Pros: More flexible budgeting experience."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "** Cons: Internal logic would be very confusing. GUI and statistics would be harder to implement."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* **Solution (Current implementation):**"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Adopt Alternative 1. Every Expense must be tracked under one and only one Budget. If the expense is added before"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "adding any budgets, a default budget with a huge limit is created for tracking all expenses without a proper budget."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "This ensures that the main screen has a budget and shows a budget status bar at all times. Besides, it leads to neater"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "statistics."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "// end::budget[]"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "czkay"
        },
        "content": "// category::events[]"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003d\u003d\u003d Events feature"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "czkay"
        },
        "content": "The Events feature allows users to add events that are supposed to occur on a future date. On launch, MooLah will"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "czkay"
        },
        "content": "remind users of upcoming events. MooLah will also notify the user about any events that are supposed to have"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "czkay"
        },
        "content": "transpired, and allow them to automatically add these events as expenses."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "czkay"
        },
        "content": "The Events feature supports the `add`, `delete` and `events` command words."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "czkay"
        },
        "content": "Events are added the same way expenses are added on the command line. When the user inputs an add command,"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "czkay"
        },
        "content": "MooLah determines whether an event or an expense should be added based on the date the user inputted in his command."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "czkay"
        },
        "content": "This is illustrated below:"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "czkay"
        },
        "content": "image::AddExpenseOrEventActivityDiagram.png[]"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "czkay"
        },
        "content": "The following sequence diagram shows how MooLah handles transpired events on launch:"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "czkay"
        },
        "content": "image::TranspiredEventsSequenceDiagram.png[]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "czkay"
        },
        "content": "1. When MooLah launches, the `start` method of `UiManager` is called. `UiManager` then calls the `handleTranspiredEvents`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "czkay"
        },
        "content": "of `MainWindow`, which fetches all transpired events and notifies the user about them. It does so by first obtaining the"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "czkay"
        },
        "content": "transpired events from the `Timekeeper` class by calling a series of getter methods."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "czkay"
        },
        "content": "2. Once the transpired events have been obtained, for each transpired event, a new `TranspiredEventWindow` will be"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "czkay"
        },
        "content": "constructed. The transpired event will then be passed via `show`, a method of the newly constructed `TranspiredEventWindow`."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "czkay"
        },
        "content": "`show` will create a popup window that details the transpired event, and asks the user whether it should be added as an"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "czkay"
        },
        "content": "expense. This popup window will have a \u0027Yes\u0027 and \u0027No\u0027 button."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "czkay"
        },
        "content": "3. If the user presses the \u0027Yes\u0027 button, the original command that the user inputted to add this particular event is fetched"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "czkay"
        },
        "content": "and passed to the `execute` method of `LogicManager`, which executes command line inputs. Since the timestamp within this"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "czkay"
        },
        "content": "original command now denotes a past or present date, an expense will be added."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "czkay"
        },
        "content": "4. If the user presses the \u0027No\u0027 button, the expense is not added."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "czkay"
        },
        "content": "5. After pressing either button, the popup window closes."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "czkay"
        },
        "content": "NOTE: As of Week 10, adding expenses to the same budget the event was added to is still a work in progress."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: What command words should the Events feature use?"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "czkay"
        },
        "content": "* ** Alternative 1:** `addevent`, `deleteevent`, etc."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "czkay"
        },
        "content": "** Pros: Makes it clear to the user that events are separate from expenses"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "czkay"
        },
        "content": "** Cons: Somewhat clunky and redundant, especially since expenses and events share the same fields"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "czkay"
        },
        "content": "* ** Alternative 2:** `add`, `delete`, etc. (i.e. same command words as adding expenses)"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "czkay"
        },
        "content": "** Pros: More streamlined, makes use of the fact that expenses and events share the same fields"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "czkay"
        },
        "content": "** Cons: The distinction between events and expenses is more blurry to the user"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "czkay"
        },
        "content": "* **Solution (Current Implementation): **"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "czkay"
        },
        "content": "Adopt Alternative 2. Since an event is ultimately an optional future expense that triggers on its"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "czkay"
        },
        "content": "due date, it is significantly more intuitive and natural to allow users to add events the same way they add expenses."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "czkay"
        },
        "content": "MooLah can then easily tell whether the user intends to add an expense or an event by looking at the timestamp"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "czkay"
        },
        "content": "the user inputs in the command."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Future Implementation (Coming in v2.0)"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "czkay"
        },
        "content": "Users can set their expenses to recur. Recurring expenses will generate events daily/weekly/monthly (based on"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "czkay"
        },
        "content": "the user\u0027s decision) that can then be added as expenses when their due dates are reached."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "czkay"
        },
        "content": "//end::events[]"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "// category::stats[]"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003d\u003d\u003d Statistics Feature"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "The statistics feature is facilitated by the `Statistics` class, which is part of the `model` package."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Its main purpose is to allow users to have an alternative view for the entries in `MooLah`. The"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "main entries that `Statistics` interacts with are `Expense` and `Budget`, and the metrics chosen to be displayed"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "are handled mainly by `Statistics#calculateStatistics()`. The method recognises command words such as"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "`stats`, `statscompare` and `statstrend`, where each results in a different visual representation and represents"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "a different use case."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "The final outcome of these interactions are reflected directly in `MainWindow`, as a popup whenever the command is received"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "by the command line."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "NOTE: Ideally, it should result in an `Undo`-able page-transition instead of a popup to ensure better integration with the rest of the application."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003d\u003d\u003d\u003d `stats`"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "The purpose of the `stats` command word is to request `MooLah` to visualise the total expenditure across"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "expenses of different categories as a percentage of the total expenditure of all expenses tracked under the budget"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "where the command is called. The visual representation used here will be a PieChart."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Given below is an example usage scenario and how the `stats` command word is handled by `MooLah`."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Step 1. The user enters the command `stats sd/01-10-2019 ed/01-11-2019` to visualise the total percentage of each category"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "as a percentage of total expenditure across all categories, in the primary budget."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "briyanii"
        },
        "content": "The command is received by `AddressBookParser`, which then creates a `StatsCommandParser` object,"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "to subsequently help to parse the input by the user."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Step 2. The newly created `StatsCommandParser` calls `parse(\"stats sd/01-10-2019 ed/01-11-2019\")`,"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "which in turns calls `ArgumentTokenizer.tokenize(\"sd/01-10-2019 ed/01-11-2019\", PREFIX_START_DATE, PREFIX_END_DATE)` to"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "split the arguments into its preamble(the start date and end date). This returns an `ArgumentMultimap` object, `argMultimap` containing the split input."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Step 3. The `StatsCommandParser` object calls `ParserUtil.parseTimestamp(argMultimap.getValue(PREFIX_START_DATE).get())` which parses the arguments to get the start date."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "The date, that is present in this example, is parsed into the correct form and the end date is obtained similarly with"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "`ParserUtil.parseTimestamp(argMultimap.getValue(PREFIX_END_DATE).get())`."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "A `StatsCommand` object containing the start date and end date is created and returned to the `LogicManager`."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Step 4. The LogicManager calls `StatsCommand.execute()`, which calls `Model#getFilteredExpenseList()` to retrieve the list of expenses stored in MooLah."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "The correct `Statistics` object, `statistics`, will be created with `startStatistic` and the `calculateStats` method, will switch to the correct mode,"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "to produce the correct feedback to the user, as well as update the attributes in `statistics`."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Step 5. Percentages, categories and the title description of the `Statistics` will be used to create the `CommandResult` object,"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "which is returned to the `LogicManager` and subsequently to the UI where a popup in the form of a pie chart will be generated."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "The following sequence diagram shows how the `stats` operation works:"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "image::BasicStatisticsCommand.png[]"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Figure 1. Sequence Diagram for executing a `StatsCommand`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "The following reference diagram shows how `StatsCommandParser` decides on the user\u0027s start date and end date for the different cases."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "This is used mainly to illustrate the interactions in Steps 2 to 3."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "image::StatsCommandParser.png[]"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Figure 2. Reference Diagram for deciding start date and end date for a `StatsCommand`"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "NOTE: As of Week 10, the design of `StatsCommand.execute()` in Step 4 is still a work in progress because of concurrent refactoring, developing command words"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "and other dependencies due to outdated methods that causes a depreciated return type to still be in use. This should be resolved ideally by v1.3."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "When designing the interaction of `Statistics#calculateStatistics()` with `stats`, decisions have to be made on the most"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "suitable visual representation for `stats` particular use case."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "* ** Alternative 1:** Table view"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "** Pros: Sequential view, can capture number of entries"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "** Cons: May be a duplicate of the `ListExpense` command, just sorted via categories"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "* ** Alternative 2:** Pie chart"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "** Pros: Offers a visual view of size to represent the expenditure under each category"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "** Cons: Loses the elements of number of entries in each category"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "* **Solution (Current Implementation): **"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Adopts Alternative 2. It is important that every aspect of the user experience gets covered, and what `MooLah` before the"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "inclusion of `Statistics` is the appreciation of percentage expenditure in each category of expenses. Expenses can already be"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "observed in its chronological order using `ListExpense` while individual view of expenses under a category can be accessed"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "using `FindExpense`. Offering a visual view on expenditure under each category complements with the existing implementation"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "of sequential view in the primary budget."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "NOTE: Once again, this question will be better addressed holistically once all 3 features has been rolled out."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Future Implementation (Coming in v2.0)"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "For each of the command words, users will be given the option to choose a Visual Representation method they prefer,"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "instead of the default option we have prioritised. Currently, statistics under `stats` mode can only be displayed in a pie chart,"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "and users may have different preferences for formats. Various options such as checking across different budgets other than within the same budget can also be considered."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "// end::stats[]"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "briyanii"
        },
        "content": "// category::Alias[]"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003d\u003d\u003d Alias feature"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "briyanii"
        },
        "content": "The Aliases feature allows users to assign inputs they may use very often to a shortcut, and execute the input by entering"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "briyanii"
        },
        "content": "the shortcut, (a.k.a ``Alias``), in place of the full or partial command."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "briyanii"
        },
        "content": "image::AliasMappingsClassDiagram.png[AliasMappingsClassDiagram]"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "briyanii"
        },
        "content": "These user defined ``Alias``es are saved in an ``AliasMappings`` object within ``UserPref`` as seen in the above diagram."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Internally, the ``AliasMappings`` object stores an ``Alias`` in a Map\u003cStrings, Alias\u003e object. With the addition of `AliasMappings` object to ``UserPref``,"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "briyanii"
        },
        "content": "``UserPref`` supports these additional operations:"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "briyanii"
        },
        "content": "- ``UserPref#addUserAlias(Alias)`` -- Saves a specified `Alias` to the user preferences for future use."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "briyanii"
        },
        "content": "- ``UserPref#hasAlias(String)`` -- Query if the there is an `Alias` with this name already defined."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "briyanii"
        },
        "content": "- ``UserPref#getAlias(String)`` -- To get an `Alias` with this name if it exists."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "briyanii"
        },
        "content": "- ``UserPref#aliasNameIsReservedCommandWord(Alias)`` -- To query if this `Alias` is uses a name which clashes with existing built-in"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "briyanii"
        },
        "content": "commands."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "briyanii"
        },
        "content": "- ``UserPref#aliasCommandWordIsAlias(Alias)`` -- To query if this `Alias` `input` begins with another `Alias`, this is used"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "briyanii"
        },
        "content": "to validate that an `Alias` will not cause an infinite loop by chaining multiple aliases in a loop."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "briyanii"
        },
        "content": "- ``UserPref#getAliasMappings()`` -- To access the ``Alias`` saved by the user."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "briyanii"
        },
        "content": "- ``UserPref#setAliasMappings(AliasMappings mappings)`` -- To overwrite all the `Alias` saved by the user."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "briyanii"
        },
        "content": "image::AliasCommandClassDiagram.png[]"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "briyanii"
        },
        "content": "In order for the user to save an ``Alias``, they first define it using the ``AliasCommand``. The ``AliasCommand`` command extends"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "briyanii"
        },
        "content": "`UndoableCommand` to allow users to undo defining an `Alias`. The following sequence diagram describe in more detail how an ``Alias``"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "briyanii"
        },
        "content": "is added."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "briyanii"
        },
        "content": "image::HighLevelAddAliasSequenceDiagram.png[]"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "briyanii"
        },
        "content": "[None]"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "briyanii"
        },
        "content": ". 1. The user enters a command with the following syntax `` alias a/ \u003cname\u003e i/ \u003cinput\u003e``."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "briyanii"
        },
        "content": ". 2. The `UI` passes this command string to the `LogicManager` which passes it onto the `AddressBookParser`."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "briyanii"
        },
        "content": ". 3. The parser extracts the argument string and passes it to an ``AliasCommandParser``."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "briyanii"
        },
        "content": "image::ParseAliasCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "briyanii"
        },
        "content": "[None]"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "briyanii"
        },
        "content": ". 4. The ``AliasCommandParser`` uses the ``ArgumentTokenizer`` to tokenize the argument string and extract the"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "briyanii"
        },
        "content": "``alias name`` and ``input`` fields into an ``ArgumentMultimap``."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "briyanii"
        },
        "content": ". 5. The arguments are obtained and to create a new `Alias` using the the `Alias` parser in `ParserUtil`."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "briyanii"
        },
        "content": ". 6. An `AliasCommand` is created containing this new `Alias` to add to the `UserPref`."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "briyanii"
        },
        "content": ". 7. This is passed back to the `LogicManager` to call `AliasCommand#run()`."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "briyanii"
        },
        "content": "image::verifyAlias.png[]"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "briyanii"
        },
        "content": "[None]"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "briyanii"
        },
        "content": ". 8. The `AliasCommand` is validated using `AliasCommand#validate()`. The `Alias` is checked to ensure it does not"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "briyanii"
        },
        "content": "[None]"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    ** a. Have a clashing name used by an existing `Command` as a CommandWord."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    ** b. Have an input beginning with a supported `Alias`."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "briyanii"
        },
        "content": ". If is not valid, handled exception is thrown."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "briyanii"
        },
        "content": "image::addAlias.png[]"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "briyanii"
        },
        "content": "[None]"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "briyanii"
        },
        "content": ". 9. If it was validated that the `Alias` can be added."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "briyanii"
        },
        "content": ". 10. The `Alias` is then added to the `AliasMappings` object within `UserPref`."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "briyanii"
        },
        "content": ". 11. The `Alias` is now usable  by the user."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "briyanii"
        },
        "content": "When a user enters an ``input`` to be executed, the ``AddressBookParser`` will first try to parse first token in"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "briyanii"
        },
        "content": "the ``input`` as a ``CommandWord``, failing which, it will try to parse it as an ``Alias``. If it successfully does so,"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "briyanii"
        },
        "content": "it replaces the first token in the original command string with the ``input`` stored in the ``Alias``."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Finally, the ``AddressBookParser`` re-parses the modified ``input``."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Why can an `Alias` only be used at the beginning of an input versus anywhere within an input."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "briyanii"
        },
        "content": "* ** Alternative 1(Chosen):** Beginning only"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "briyanii"
        },
        "content": "** Pros: Easier to determine which word is the shortcut."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "briyanii"
        },
        "content": "** Pros: Easier to detect recursion due to alias chaining."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "briyanii"
        },
        "content": "** Cons: Less flexible in term how the shortcut can be used i.e. it can only replace or prefix an input."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "briyanii"
        },
        "content": "* ** Alternative 2:** Anywhere in input"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "briyanii"
        },
        "content": "** Pros: A wider variety of shortcuts can be defined by the user +"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "briyanii"
        },
        "content": "e.g. `add deckChicken 2.50`, where `deckChicken` maps to `d/ chicken rice c/ food p/`."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "briyanii"
        },
        "content": "** Cons: Harder to detect recursion due to alias chaining."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "briyanii"
        },
        "content": "** Cons: Parsing becomes more complicated and alias words become unusable in other contexts."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "briyanii"
        },
        "content": "e.g. defining an `Alias` mapping `bus` to `sbs bus` prevents an input such as `smrt bus` from being parsed properly"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "briyanii"
        },
        "content": "as it would be replaced with `smrt sbs bus` by the parser."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "briyanii"
        },
        "content": "* **Solution (Current Implementation): **"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "briyanii"
        },
        "content": "The biggest factor in choosing `Alternative 1` is to make it easier to prevent possible recusion due to alias chaining,"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "briyanii"
        },
        "content": "which would potentially be a fatal bug in the application."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Additionally, while it may be possible to determine which one the user means judging by the context in which it was used."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "briyanii"
        },
        "content": "However, that is far out of the scope of the module and would require much more processing of user input."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Another alternative would have been to have an alias name follow the following convention `\u0027aliasName\u0027` (i.e. some character before and after)"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "briyanii"
        },
        "content": "clear what is an `Alias` within an input."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Future Implementation (Coming in v2.0)"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "briyanii"
        },
        "content": "The purpose behind this feature was to make CLI input less troublesome, so users do not need to type in the full input string"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "briyanii"
        },
        "content": "to carry out commands they may use frequently. In v2.0 we want to look into using data analysis track users\u0027 input habits in"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "briyanii"
        },
        "content": "order to make suggestions on possible shortcuts or Aliases they may find convenient to have."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to store Aliases."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "briyanii"
        },
        "content": "* ** Alternative 1:** List"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "briyanii"
        },
        "content": "** Pros: Less space needed to store same amount of data"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "briyanii"
        },
        "content": "** Cons: Takes time to loop through the list to get the right output."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "briyanii"
        },
        "content": "* ** Alternative 2(Chosen):** Map"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "briyanii"
        },
        "content": "** Pros: Simple to access"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "briyanii"
        },
        "content": "** Cons: More space needed."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "briyanii"
        },
        "content": "* **Solution (Current Implementation): **"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "briyanii"
        },
        "content": "As the user can define multiple aliases, it was important for the internal structure of `AliasMappings`"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "briyanii"
        },
        "content": "to allow accessing the aliases by name."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "briyanii"
        },
        "content": "If an ArrayList was used, the numbering each alias would change if new ones were added and old one removed or replaced."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Map was used to prevent this problem as the name is used as the index. This avoids the need to loop through"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "briyanii"
        },
        "content": "all the \u0027Alias\u0027 defined."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "briyanii"
        },
        "content": "It also makes it easier to prevent sharing of alias names between aliases and a Map\u0027s key"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "briyanii"
        },
        "content": "set cannot contain duplicates, and makes it easier to handle overwriting of existing aliases with same name."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "briyanii"
        },
        "content": "// end::Alias[]"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "briyanii"
        },
        "content": "// category::SyntaxAutofill[]"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003d\u003d\u003d Syntax Highlighting and Autofill feature"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "briyanii"
        },
        "content": "The Autofill feature was implemented to make it less important for users to remember the appropriate syntax for each command which"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "briyanii"
        },
        "content": "can be a common issue in CLI based applications. This feature utilises regular expressions and JavaFX\u0027s TextFormatter to extend the"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "briyanii"
        },
        "content": "functionality of the existing TextField used in the original AB3 application."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "briyanii"
        },
        "content": "The Autofill feature also inserts `placeholders` into the text area to make it clearer which arguments each prefix delimit in the input."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "briyanii"
        },
        "content": "e.g. `add d/ \u003cdescription\u003e p/ \u003cprice\u003e c/ \u003ccategory\u003e`. These `placeholder` are removed when the user types over them and"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "briyanii"
        },
        "content": "are filtered from the input and not parsed by the `Parser` if the user forgets to type over them. The following diagram briefly describe"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "briyanii"
        },
        "content": "the logic used to insert auto fill a command\u0027s syntax."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "briyanii"
        },
        "content": "::image:AutoFillActivityDiagram.png[]"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "briyanii"
        },
        "content": "The Syntax highlighting feature was implemented to make it easier to differentiate the different arguments after typing"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "briyanii"
        },
        "content": "as well as to implement some basic realtime input validation. This feature utilises RichTextFX\u0027s StyleClassTextArea to"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "briyanii"
        },
        "content": "apply different styles to different regions of the text, and regular expressions to determine which to highlight."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "briyanii"
        },
        "content": "::image:SyntaxHighlightingActivityDiagram.png[]"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Because RichTextFX\u0027s TextAreas do not support JavaFX\u0027s TextFormatter, the `SyntaxHighlightingTextArea` actually has two different"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "briyanii"
        },
        "content": "TextAreas. One as the visible TestArea (RichTextFX) and one as the functional one (JavaFX)."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "briyanii"
        },
        "content": "::image:SyntaxHighlightingTextAreaClassDiagram.png[]"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "briyanii"
        },
        "content": "The two TextArea are layered on top of each other. The invisible functional TextArea overlays the visible one, and mirrors the TextProperty of the"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "briyanii"
        },
        "content": "visible one mirrors the functional TextArea. The KeyEvents which occur in the functional text area are also mirrored by the visible text area."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Which configuration of Input fields to use? - RichTextFX TextArea alone, JavaFX alone, both together?"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "briyanii"
        },
        "content": "* ** Alternative 1:**  JavaFX alone (JavaFX `TextField`) and manually place coloured elements to handle highlighting."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "briyanii"
        },
        "content": "** Pros: Already supports single line input."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "briyanii"
        },
        "content": "** Pros: Easy to implement autofill."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "briyanii"
        },
        "content": "** Cons: Does not inherently support styling of text with multiple styles."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "briyanii"
        },
        "content": "** Cons: Manually inserting worked, but not all the time."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "briyanii"
        },
        "content": "* ** Alternative 2:** `RichTextFX StyleClassTextArea` and ``Listener``s to handle formatting of text."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "briyanii"
        },
        "content": "** Pros: Supports styling of text."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "briyanii"
        },
        "content": "** Cons: Needs have certain `Events` blocked and functionality removed in order to act as a single line input field. e.g."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "briyanii"
        },
        "content": "preventing users from pasting text with newlines and the enter key event from making a new line."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "briyanii"
        },
        "content": "** Cons: Does not support javafx `TextFormatter`, intermediate results (unwanted text) can possibly be evaluated."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "briyanii"
        },
        "content": "* ** Alternative 3(Chosen):** Both"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "briyanii"
        },
        "content": "** Pros: Utilise best of both worlds, with `TextFormatter` and `RichTextFX StyleClassTextArea`"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "briyanii"
        },
        "content": "** Cons: Need to properly align the two text areas so visible text and caret position is accurate."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "briyanii"
        },
        "content": "** Cons: Needs have certain `Events` blocked and functionality removed in order to act as a single line input field. e.g."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "briyanii"
        },
        "content": "preventing users from pasting text with newlines and the enter key event from making a new line."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "briyanii"
        },
        "content": "* **Solution (Current Implementation): **"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "briyanii"
        },
        "content": "With alternative 1, using a `TextFlow` was a problem when the text needed to remain in"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "briyanii"
        },
        "content": "a single line. Manually layering coloured elements over the text was also an issue as the the position and size of elements"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "briyanii"
        },
        "content": "eeded to be recalculated every time the text change, the UI moved, or was resized."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "briyanii"
        },
        "content": "While it was possible to use RichTextFX text areas alone, the text that the user inputs before it is formatted"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "briyanii"
        },
        "content": "still enters the text area. Which interferes with realtime parsing as the text is not properly sanitized, which was"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "briyanii"
        },
        "content": "why the uses `TextFormatter` was necessary."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "briyanii"
        },
        "content": "This meant only alternative 3 was viable, but because of layer of the two text areas, the events causing a change in text"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "briyanii"
        },
        "content": "or what text was visible needed to be properly mirrored from the invisible to the visible text area. As a result, certain behaviours"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "briyanii"
        },
        "content": "supported by a normal textfield needed to be blocked to ensure proper alignment e.g. copy and paste."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "briyanii"
        },
        "content": "At the moment, mass deletion and selection of text (e.g. Ctrl/Cmd+A \u003e Backspace) has been prevented in order to properly align the"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "briyanii"
        },
        "content": "two textarea."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Future Implementation (Coming in v2.0)"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "briyanii"
        },
        "content": "MooLah v2.0 should support better real time parsing of input and support validation of input without requiring the user"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "briyanii"
        },
        "content": "to enter the command as well as a more functional input field."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "briyanii"
        },
        "content": "// end::SyntaxAutofill[]"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "// category::dataencryption[]"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* has a need to track a significant number of expenses"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* lives on a monthly allowance"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* wants to save money"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* has difficulty remembering important dates, such as friends\u0027 birthdays or anniversaries"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "*Value proposition*:"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* optimized for students in National University of Singapore"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* make prediction for future spending based on extrapolation from past statistics and upcoming important dates"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* customizable categories, budgets and aliases"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* flexible forms of viewing a summary of expenses"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* give input suggestions while typing"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* more convenient time format"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* * *` |full-time university student without any stable income |record my expenses |track my spending and practice financial management skills"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* * *` |non-money minded person |view a list of all my previous expenses |be better at tracking my expenses"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* * *` |user |categorize my expenses by types (e.g. Transport, Food, etc.) |differentiate expenses easily"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* * *` |YEP (Youth Expedition Project) organizer who is in charge of logistics for my overseas project |delete a previous expense |I do not keep track of expenses that have been reimbursed by Youth Corps Singapore"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* * *` |non-money minded person |save the expenses data locally |still keep track of my expenses even after closing the App"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* * *` |foodie who frequently goes out with friends and pays for grab/restaurant bills |quickly find a particular entry by typing a keyword |refer to a previous expense and know how much money my friend needs to pay me back"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |someone who is not good at managing my money |view budget breaking expenses |quickly know which expenses make up a big part of my budget"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |forgetful person |get notified of upcoming birthdays/anniversaries |budget for these special dates"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |lazy person |specify tax rate and let the app calculates the total price for me when entering expense |I can know the after-tax price when ordering in restaurants"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |money-minded user |extrapolate from daily/weekly expenses to monthly expenses |have a rough gauge on future spending and plan budgets accordingly"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |user |manually input my expenses in an external file and import these expenses into the App |track previous expenses that occur before I start using the App"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |user |request for periodic statements |revise and reflect on my past expenses"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |busy person |add repeated expenses by selecting a previous expense and adding as a current expense |save time when using the App"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |financially dependent student |export my past expenses |my parents can see my spending"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |lazy user |let the App predict the tags for my expenses |use automated suggestions provided to me for better categorizaton"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |person working part time/TA-ing/etc |let the App add to my earnings automatically based on salary |track my income as well"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |foreign student on exchange in NUS |input my spending in SGD and have it automatically converted to my local currency |better track my spending in a currency I\u0027m more comfortable with"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |visual person who easily gets confused by a large amount of text and prefers graphic illustrations |view my monthly expenses in pie charts |better understand the weightage of spending in different categories in a more direct and efficient manner"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |user |update details of a past expense |correct erroneous past expenses without having to delete it and add again"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |lazy user |schedule recurring expenses |avoid having to key in the same information all the time. (However, I want to be able to confirm details of the expense.)"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |busy person |let the App use the current time for an expense if I do not specify a time |avoid always having to manually key in a time for my expense"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |busy person |enter the time as yesterday, one hour ago, etc |save effort by using convenient and flexible time formats"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |non-money minded person |receive warnings when I’m close to or exceeding my budget |adjust my expenses to prevent overspending"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |careless person who is prone to typos |undo my previous command |I do not enter the wrong amount for my expenses"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |careless person who is prone to typos |redo my previous command |I do not delete expenses by accident"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |non-money minded person |set periodic budgets |discipline my spending"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |non-money minded person |set categorical budgets |exceptional expenses (e.g. healthcare or sponsored expenses) are not tracked under default budget to prevent confusion"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`* *` |non-money minded person |let the App suggest some budgeting tips for me |be better at tracking my expenses"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`*` |forgetful person |receive email reminders if I haven’t input my expenses for a few days |do not forget to track my expense"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`*` |someone who spends a lot of time in public spaces in school |easily hide my budgeting information on the application quickly |others could not see the details on my screen"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`*` |busy person |input my expenses by scanning a receipt |can save more time than manually typing in the expenses"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`*` |NUS student, and lazy person |add expense from school canteens by saying e.g. “deck steamed chicken rice” |don\u0027t need to enter the details and prices"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`*` |non-financially independent student |hide some details when exporting expenses |do not share exact details with my parents but instead include them as an anonymous expense"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`*` |non-money minded person |let the App help me make saving plans for future expenses |start saving early"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`*` |user |group certain expenses, e.g. group chicken rice and milo as lunch, but both remain separate entries as well |manage related expenses together"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`*` |advanced CLI user |add aliases to my common inputs |avoid typing the similar things every time"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`*` |user |let the App predict frequent similar expenses and prompt me to enter them |do not miss expenses while I\u0027m not using the App"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "|`*` |busy student who may need to close the App to settle some other matters |let the App remember what I had typed into the command line last time I closed the App |resume when I reopen the app"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "(For all use cases below, the *System* is `MooLah` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d Use case: Add a budget and switch to it"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "1.  User requests to add a budget and specifies budget name, amount, period and start date"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "2.  MooLah shows success in creating new budget"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "3.  User requests to switch to this budget by specifying the budget name"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "4.  GUI switches to the budget and sets it as current primary budget for displaying and calculating expenses"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* 1a. User misses any of the necessary parameters: budget name, amount, period or start date"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "** 1a1. MooLah shows an error message and reminds the user to complete the parameters."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "** 1a2. User re-enters the command with new data."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "** Steps 1a1-1a2 are repeated until the parameters entered are correct and complete."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* 3a. User forgets to input the name of the budget he wants to switch to."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "** 3a1. MooLah shows an error message and requests for the budget name."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "** 3a2. User re-enters the command, specifying the budget name."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Use case resumes at step 4."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* 3b. User enters a budget name that does not correspond to any of the currently existing budgets."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "** 3b1. MooLah shows an error message and requests for a correct budget name that exists."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "** 3b2. User re-enters the command with a new budget name."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "** Steps 3b1-3b2 are repeated until the budget name entered is an existing one."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Use case resumes at step 4."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d Use case: Show reminders"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "1.  User requests to see reminders."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "briyanii"
        },
        "content": "2.  MooLah shows a list of reminders."
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* 2a. There are no reminders."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "czkay"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003d\u003d\u003d Use case: Add event"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "czkay"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "czkay"
        },
        "content": "1.  User adds an event."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "2.  MooLah tells the user that the event has been successfully added."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "czkay"
        },
        "content": "+"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "czkay"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "czkay"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "czkay"
        },
        "content": "* 2a. The event is formatted incorrectly (e.g. the date is invalid)."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "czkay"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "** 2a1. MooLah shows an error message."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "czkay"
        },
        "content": "+"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "czkay"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "czkay"
        },
        "content": "* 3a. The same event has been previously stored."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "czkay"
        },
        "content": "+"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "czkay"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "** 3a1. MooLah shows an error message."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "czkay"
        },
        "content": "+"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "czkay"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003d\u003dIdk why\u003d\u003d"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003d\u003d\u003d Use case: Viewing Statistics summary"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "1. User requests to view statistics"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "2. MooLah prompts user for start date"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "3. User enters start date"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "4. MooLah prompts user for end date"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "5. User enters end date"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "6. MooLah displays the statistics requested"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "* *a. MooLah detects incorrect date format"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "+"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "** *a1.MooLah throws Exception"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "+"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "* 5a. The user enters a start date, but does not enter an end date"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "+"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "** 5a1. MooLah displays the statistics 1 month after start date"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "+"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "* 5b. The user does not enter a start date, but enters an end date"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "+"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "** 5b1. MooLah displays the statistics 1 month before end date"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "+"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003d\u003d\u003d Use case: Viewing Statistics compare"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "1. User requests to view statistics"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "2. MooLah prompts user for date 1"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "3. User enters date 1"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "4. MooLah prompts user for date 2"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "5. User enters date 2"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "6. MooLah prompts user for period"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "7. User enters period"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "8. MooLah displays the statistics requested"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "* *a. MooLah detects incorrect date format or missing parameters"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "+"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "** *a1.MooLah throws Exception"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "+"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "briyanii"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003d\u003d\u003d Use case: Adding an alias"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "briyanii"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "briyanii"
        },
        "content": "1. User assigns an Alias name for some input."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "2. MooLah confirms that the input is alias name is valid."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "3. MooLah saves the alias to the user\u0027s preferences."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "4. MooLah informs the user that the alias was successfully created."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "briyanii"
        },
        "content": "+"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Use case Ends."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "briyanii"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "briyanii"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "briyanii"
        },
        "content": "* 1a. Alias name is invalid."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "briyanii"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "** 1a1. MooLah informs the User that the alias name is invalid."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "briyanii"
        },
        "content": "+"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Use case Ends"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "briyanii"
        },
        "content": "* 2a. An Alias with the same name exists."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "briyanii"
        },
        "content": "[None]"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "** 2a1. MooLah overwrites the existing Alias with the same name in the User\u0027s preferences."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "briyanii"
        },
        "content": "+"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Use case resumes from step 4."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "briyanii"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003d\u003d\u003d Use case: Using an alias"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "briyanii"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "briyanii"
        },
        "content": "1. User types alias into CLI."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "briyanii"
        },
        "content": "2. User enters the command"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "3. MooLah attempts to execute the input mapped to the alias."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "briyanii"
        },
        "content": "+"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "briyanii"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "briyanii"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "briyanii"
        },
        "content": "* 1a. Users enters additional details after alias name"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "briyanii"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "briyanii"
        },
        "content": "** 1a1. User enters the command"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "** 1a2. MooLah attempts to execute the input mapped to the alias with the additional details appended."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "briyanii"
        },
        "content": "+"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "briyanii"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003d\u003d\u003d Use case: Spending beyond budget"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "briyanii"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "briyanii"
        },
        "content": "1. User adds an expense to a budget."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "2. MooLah displays the updated expense list."
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "3. MooLah finds that the total amount spent in the budget exceeds the allocated budget amount."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "4. MooLah warns the User that they have overspent."
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "briyanii"
        },
        "content": "+"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "czkay"
        },
        "content": ".  Should be able to hold up to 1000 expenses without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "czkay"
        },
        "content": ".  Should be at the least usable for a novice to command line interfaces."
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ".  The system should respond within two seconds after user types in a command."
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "czkay"
        },
        "content": ".  Data entered must not be volatile (i.e. can only be changed at the user\u0027s command)."
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "czkay"
        },
        "content": ".  Past data must be saved permanently unless deleted at the user\u0027s command."
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ".  Should adhere to the project scope (e.g. Not required to have digital wallet support)."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ".  Should be able to work without internet connection."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "czkay"
        },
        "content": "[[alias]] Alias::"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "czkay"
        },
        "content": "A user-defined keyword that represents a specific Expense, acting as a quality-of-life replacement for common Expenses."
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "czkay"
        },
        "content": "*Budgie*"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "czkay"
        },
        "content": "Author: STUCK"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "czkay"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "czkay"
        },
        "content": "* Remembers and approximates frequently entered expenses"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "czkay"
        },
        "content": "* Provides temporary budget accounts for special occasions (i.e. vacationing, sponsored events)"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "czkay"
        },
        "content": "* Pleasing and easily navigable interface due to a relatively small number of features"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "czkay"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "czkay"
        },
        "content": "* Expenses are kept very simple: There is no way to enter the location of the expense or place a tag on it"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "czkay"
        },
        "content": "* Does not link to any financial accounts or digital wallets"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "czkay"
        },
        "content": "*Wally*"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "czkay"
        },
        "content": "Author: Wally Global Inc."
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "czkay"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "czkay"
        },
        "content": "* Almost every foreign currency is supported, and can be converted to and from each other"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "czkay"
        },
        "content": "* Each expense can be tagged with an accompanying photo (e.g. a receipt)"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "czkay"
        },
        "content": "* Can set a password"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "czkay"
        },
        "content": "* Can split group payments"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "czkay"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "czkay"
        },
        "content": "* Complex interface due to the large amount of features"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "czkay"
        },
        "content": "*YNAB (You Need A Budget)*"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "czkay"
        },
        "content": "Author: You Need A Budget LLC"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "czkay"
        },
        "content": "* Portions of a budget can be transferred to another easily in cases of underspending/overspending"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "czkay"
        },
        "content": "* Innovative way of budgeting: every single dollar from your income must be assigned a \u0027job\u0027 (e.g. fun money, subscriptions)"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "czkay"
        },
        "content": "* Can set budgeting goals"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "czkay"
        },
        "content": "* Can be rather stressful due to its obsession to categorise every single dollar you earned that month"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "briyanii": 254,
      "czkay": 128,
      "qweiping31415": 195,
      "anqichen9856": 240,
      "-": 367,
      "ryoarmanda": 29
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003d MooLah - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T11-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "MooLah is a hassle-free expense tracker for those who *prefer to use a desktop app for tracking expenses*."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "More importantly, MooLah is *optimized for those who prefer to work with a Command Line Interface* (CLI)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "while still having the benefits of a Graphical User Interface (GUI). MooLah supports user-friendly input format and"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "aliases that greatly improves the efficiency of CLI operations. It also supports recurring expenses and includes menus"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "from canteens of National University of Singapore for students to track their everyday food expenses in a second."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "If you can type fast, MooLah can get your expense management tasks done much faster than traditional GUI expense"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "trackers."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ".  Download the latest `moolah_v1.2.1.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for `MooLah`."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *`list`* : lists all expenses"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czkay"
        },
        "content": "* **`add`**`d/Chicken Rice p/2.50 c/Food t/25-10` : adds an expense named `Chicken Rice` to the expense tracker."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* **`delete`**`3` : deletes the 3rd expense shown in the current list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* Words in UPPER_CASE are the parameters to be supplied by the user"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "  e.g. in `add p/PRICE`, `PRICE` is a parameter which can be used as `add p/2.50`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* Items in square brackets are optional"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "  e.g `d/DESCRIPTION p/PRICE c/CATEGORY [t/DATE] can be used as \u0027add d/Chicken Rice p/2.50 c/Food\u0027 or"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u0027add d/Chicken Rice p/2.50 c/Food t/25-01\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* Parameters can be in any order e.g. `add p/PRICE d/DESCRIPTION`, `add d/DESCRIPTION p/PRICE` are both acceptable."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003d\u003d\u003d Basic Expense/Event-Related Commands"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003d\u003d\u003d\u003d Adding an expense/event: `add`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "czkay"
        },
        "content": "Add an expense/event to the expense tracker. If the timestamp denotes a future date, an event is added."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "czkay"
        },
        "content": "If not, an expense is added instead."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "czkay"
        },
        "content": "Upon launch, Moolah will remind the user of upcoming events (7 days or below), and also ask users whether they wish"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "czkay"
        },
        "content": "to automatically add expenses corresponding to transpired events."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Format: `add d/DESCRIPTION p/PRICE c/CATEGORY [t/TIMESTAMP]`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "* An expense must have exactly 1 category"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "czkay"
        },
        "content": "* If a time is not specified, an expense will be added with its date being the current system date."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "czkay"
        },
        "content": "* `add d/Brian birthday p/40 c/Gifts t/31-12`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "czkay"
        },
        "content": "* `add d/Buffet p/250 c/Food`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d (Coming in v1.4) Using relative time/date input: `yesterday`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "czkay"
        },
        "content": "The user can specify an expense/event’s time using relative dates and times."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "If the current date is 12 Sep 2013"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Input: `add d/Chicken Rice p/2.50 t/Yesterday Noon`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Result: adds an expense of 2.50 at 11 Sep 2013, 12pm"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all expenses : `list`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Shows a list of all expenses in the expense tracker."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003d\u003d\u003d\u003d (Coming in v1.4) Listing all events : `events`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "czkay"
        },
        "content": "Lists all events that you have inputted."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "czkay"
        },
        "content": "Format: `events`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "czkay"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "czkay"
        },
        "content": "```"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "czkay"
        },
        "content": "events"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "czkay"
        },
        "content": "```"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "czkay"
        },
        "content": "Result:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "czkay"
        },
        "content": "```"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "czkay"
        },
        "content": "You have these important dates coming up!"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "czkay"
        },
        "content": "Brian’s birthday: 04/06/2020"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "czkay"
        },
        "content": "Mum’s birthday: 06/06/2020"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "czkay"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003d\u003d\u003d\u003d Updating an expense/event : `edit`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "czkay"
        },
        "content": "Edits an existing expense/event in the expense tracker."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Format: `edit INDEX [p/PRICE] [d/DESCRIPTION] [t/time] [c/CATEGORY]...`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "`edit 2 p/3.50`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Updates the price of the 2nd expense in the current list to 3.50."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "czkay"
        },
        "content": "* Edits the expense/event at the specified `INDEX`. The index refers to the index number shown in the currently displayed list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* The index must be a positive integer 1, 2, 3, ..."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* You can set the time of the expense to the system’s current time by typing `t/` without specifying a time."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003d\u003d\u003d\u003d Locating expenses/events by name: `find`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "czkay"
        },
        "content": "Finds expenses/events whose description contain any of the given keywords."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* The search is case insensitive. e.g `chicken` will match `Chicken`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* The order of the keywords does not matter. e.g. `Puff Curry` will match `Curry Puff`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* Only the description is searched."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* Only full words will be matched e.g. `chick` will not match `chicken`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* Expenses matching at least one keyword will be returned (i.e. OR search). e.g. an expense with description"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "`Chicken rice`, and expense with description `Duck Rice` will both match `rice`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* `find rice`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Returns `chicken rice` and `duck rice`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* `find chicken taxi schoolfee`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "  Returns any expense having description containing `chicken`, `taxi`, or `schoolfee`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting an expense/event : `delete`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "czkay"
        },
        "content": "Deletes the specified expense/event from the current list shown in the expense tracker."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "czkay"
        },
        "content": "* Deletes the expense/event at the specified INDEX."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* The index refers to the index number shown in the currently displayed list."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "list"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Deletes the 2nd expense in the list of expenses, shown by `list`."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "czkay"
        },
        "content": "```"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "czkay"
        },
        "content": "events"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "czkay"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "czkay"
        },
        "content": "```"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "czkay"
        },
        "content": "Deletes the 2nd event in the list of events, shown by `events`."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "list"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "find chicken"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Deletes the 1st expense in the results of the `find` command."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Clears all entries from the expense tracker."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d\u003d Undo the previous command : `undo`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "User can undo the previous command. Only commands that modify the data, e.g. `add` `edit` `delete` `clear`,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "can be undone."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "delete 5"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "undo"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Result:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Expense no. 5 will be undone, re-added to the data."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d\u003d Redo the command that was undone : `redo`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "User can redo the command they have undone."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "delete 5"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "undo"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "redo"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "```"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Result:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Expense no. 5 will now be deleted."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003d\u003d\u003d\u003d (Coming in v2.0) Converting any currency to preferred currency : `convert`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d Budgeting-Related Commands"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d\u003d Creating new budgets : `budget`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Creates a new expense budget."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Format: `budget d/BUDGET_NAME p/BUDGET_AMOUNT sd/BUDGET_START_DATE pr/BUDGET_PERIOD`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "E.g."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "`budget d/school p/300 sd/01-10-2019 pr/month`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "This will create a new budget “school” that is set to $300 per month, starting from 1st October 2019."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d\u003d Switch current budget : `switch`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Switches currently active budget (i.e. primary budget) to another budget."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Format: `switch d/BUDGET_NAME`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "E.g."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "`switch d/outside school`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003d\u003d\u003d (Coming in v2.0)Prediction : `predict`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "User can get a rough estimation of next month\u0027s total expense based on extrapolation from this month\u0027s expenditure."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "The prediction will take into account important dates that require extra spending in next month."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Format: `predict`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Result:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "`We predict your next month\u0027s total expenditure to be ...`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d Creating an alias for your favourite commands : `alias`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Assign a full paramaterized input to an alias."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Format: `alias a/ALIAS_NAME c/COMMAND_WITH_PARAMETERS`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "E.g."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "`alias a/chicken rice c/ add d/ Chicken Rice p/2.50 c/Food`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Result creates an alias “chicken rice” for the command which adds an expense of 2.50 under the Food category with a"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "description of “Chicken Rice” at the current system time."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "- Note: all white spaces characters will be removed from alias names"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "- Note: aliases with names of official commands cannot be made"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "- Note: using the same name for an alias will overwrite the existing alias if it exists"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Expense tracker data are saved in the hard disk automatically after any command that changes the data."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d Viewing Statistics"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d\u003d Summary : `stats`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Produces statistics regarding the user’s expenses."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "The statistics is in the form of a pie chart, where every piece represents the combined expenditure of all expenses"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "under the category, taken as a percentage of the total expenditure in the budget the command was called."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Format: `stats [sd/START_DATE] [ed/END_DATE]`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "- Date formats accepted include `DD-MM-YYYY` or `DD-MM`, where the year will be taken as the current year if it is"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "not specified."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "- `START_DATE` will be checked to be earlier than `END_DATE`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "- If `START_DATE` is specified but `END_DATE` is empty, statistics is calculated from one month after `START_DATE`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "- If `START_DATE` is empty but `END_DATE` is specified, statistics is calculated from one month before `START_DATE`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "- If both `START_DATE` and `END_DATE` are empty, statistics is calculated from one month before the current date."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "`stats`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "`stats sd/12-12-2018`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "`stats sd/11-11-2018 ed/12-12-2018`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d\u003d Compare : `statscompare`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Produces and displays statistics regarding the user’s finance for 2 time periods."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "The statistics include all categories of items, the number of entries and the total expenditure of all expenses under"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "the category."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "The number under each cell represents the difference using `second period – first period`."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Format: `statscompare sd1/START_DATE_1 sd2/END_DATE pr/PERIOD`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "- Date formats accepted include `DD-MM-YYYY` or `DD-MM`, where the year will be taken as the current year if it is not"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "specified."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "- `PERIOD` takes in either of the following keywords: week, month, year"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "NOTE[Work in progress]:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "- day is ideally recognised as a keyword to `PERIOD`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "- If day is given as a keyword under `PERIOD`, statistics will be calculated from 12:00am of the day till 11:59pm of"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "the same day"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "`statscompare sd1/01-01-2019 sd2/01-02-2019 pr/month`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "MooLah data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d Email notification `[coming in v2.0]`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003d\u003d\u003d Input expenses by scanning a receipt `[coming in v2.0]`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "the data of your previous MooLah folder."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *Add an expense* `add d/DESCRIPTION p/PRICE [t/time] [c/CATEGORY]...` +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "e.g. `add d/Chicken Rice p/2.50 t/15-09-2019 1230 c/Food`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *Clear all expenses* : `clear`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *Compare statistics* : `statscompare start1/START_DATE_1 end1/END_DATE start2/START_DATE_2 end2/END_DATE_2` +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "e.g. `statscompare sd1/01-01-2019 sd2/01-02-2019 pr/week`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *Create alias* : `alias a/ALIAS_NAME c/COMMAND_WITH_PARAMETERS` +"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "e.g. `alias a/chicken rice c/ add d/ Chicken Rice p/2.50 c/Food`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *Create new budget* : `budget d/BUDGET_NAME p/BUDGET_AMOUNT sd/BUDGET_START_DATE pr/BUDGET_PERIOD` +"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "e.g. `budget d/school p/300 sd/01-10-2019 pr/month`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *Currency conversion* : `convert`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *Delete an expense* : `delete INDEX` +"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *Edit an expense* : `edit INDEX [p/PRICE] [d/DESCRIPTION] [t/time] [c/CATEGORY]...` +"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "e.g. `edit 2 p/3.50`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *Exit the app* : `exit`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *Find an expense* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "e.g. `find rice`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *List all expenses* : `list`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *List all reminders* : `reminders`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *Prediction* : `predict`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *Record important date* : `remind EVENT DATE [n DAYS]` +"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "e.g. `remind Brian’s birthday 04/06/2020 14 DAYS`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *Switch budget* : `switch d/BUDGET_NAME` +"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "e.g. `switch d/outside school`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "* *View statistics* : `stats [start/START_DATE] [end/END_DATE]` +"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "e.g. `stats sd/11-11-2018 ed/12-12-2018`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "czkay": 48,
      "qweiping31415": 29,
      "anqichen9856": 192,
      "-": 109,
      "ryoarmanda": 1
    }
  },
  {
    "path": "docs/diagrams/AddBudgetCommandClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "class AddBudgetCommand {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+{static} COMMAND_WORD: String"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+{static} MESSAGE_USAGE: String"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+{static} MESSAGE_SUCCESS: String"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+{static} MESSAGE_DUPLICATE_BUDGET: String"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "#validate(model: Model)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "#execute(model: Model): CommandResult"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "abstract class UndoableCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "AddBudgetCommand -up-|\u003e UndoableCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "AddBudgetCommand -right-\u003e \"1\" Budget: toAdd"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "AddBudgetCommand ..\u003e Model"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "AddBudgetCommand ..\u003e CommandResult"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "AddBudgetCommand .left.\u003e CommandException: throws"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 20
    }
  },
  {
    "path": "docs/diagrams/AddBudgetSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "participant \":AddBudgetCommandParser\" as AddBudgetCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "participant \"b:AddBudgetCommand\" as AddBudgetCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "participant \":AddressBook\" as AddressBook MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "participant \":UniqueBudgetList\" as UniqueBudgetList MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "[-\u003e LogicManager : execute(addBudget)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(addBudget)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "AddressBookParser -\u003e AddBudgetCommandParser : parse()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "activate AddBudgetCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "create AddBudgetCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "AddBudgetCommandParser -\u003e AddBudgetCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "activate AddBudgetCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "AddBudgetCommand --\u003e AddBudgetCommandParser : b"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "deactivate AddBudgetCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "AddBudgetCommandParser --\u003e AddressBookParser : b"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "deactivate AddBudgetCommandParser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "AddBudgetCommandParser -[hidden]-\u003e AddressBookParser : result"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "destroy AddBudgetCommandParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "AddressBookParser --\u003e LogicManager : b"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "LogicManager -\u003e AddBudgetCommand : execute()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "activate AddBudgetCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "AddBudgetCommand -\u003e Model : addBudget(toAdd)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Model -\u003e AddressBook : addBudget(budget)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "activate AddressBook"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "AddressBook -\u003e UniqueBudgetList : add(budget)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "activate UniqueBudgetList"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "UniqueBudgetList -\u003e UniqueBudgetList : setPrimary(toAdd)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "UniqueBudgetList --\u003e AddressBook"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "deactivate UniqueBudgetList"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "AddressBook --\u003e Model :"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "deactivate AddressBook"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Model --\u003e AddBudgetCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "AddBudgetCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "deactivate AddBudgetCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "AddBudgetCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "destroy AddBudgetCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 76
    }
  },
  {
    "path": "docs/diagrams/AddExpenseOrEventActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": ":user enters an add command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": ":checks for command validity;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "if () then (is valid)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "    :checks timestamp field of command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "    if () then (no timestamp inputted)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "        :adds expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "    else (timestamp inputted);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if () then (timestamp denotes a future date)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "            :adds event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": "        else (timestamp denotes present or past date);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "            :adds expense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "        endif;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "    endif;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": "    :show success message;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "else (invalid)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": "    :show error message;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "endif;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "stop"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "czkay": 21
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deletePerson(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveAddressBook(mooLah)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 1,
      "-": 36
    }
  },
  {
    "path": "docs/diagrams/BasicStatisticsCommand.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "participant \":StatsCommandParser\" as StatsCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "participant \":StatsCommand\" as StatsCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "participant \":ModelManager\" as ModelManager MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "participant \"statistics: Statistics\" as Statistics MODEL_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "end box"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "[-\u003e LogicManager : execute(\"stats sd/01-10-2019 ed/01-11-2019\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"stats \\n sd/01-10-2019 \\n ed/01-11-2019\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "create StatsCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "AddressBookParser -\u003e StatsCommandParser : parse(\"stats \\n sd/01-10-2019 \\n ed/01-11-2019)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "activate StatsCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "StatsCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "deactivate StatsCommandParser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "AddressBookParser -\u003e StatsCommandParser : parse(\"stats \\n sd/01-10-2019 \\n ed/01-11-2019)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "activate StatsCommandParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "create StatsCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "StatsCommandParser -\u003e StatsCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "activate StatsCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "ref over StatsCommandParser, StatsCommand : create StatsCommand with start date and end date"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "StatsCommand --\u003e StatsCommandParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "deactivate StatsCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "StatsCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "destroy StatsCommandParser"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "AddressBookParser --\u003e LogicManager"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "LogicManager -\u003e StatsCommand : execute()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "activate StatsCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "StatsCommand -\u003e ModelManager:  getFilteredExpenseList()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "activate ModelManager"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "ModelManager --\u003e StatsCommand : statsExpenses"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "deactivate ModelManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "StatsCommand -\u003e Statistics : startStatistic(statsExpenses)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "activate Statistics"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Statistics --\u003e StatsCommand: statistics"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "deactivate Statistics"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "StatsCommand -\u003e Statistics : calculateStats(\"stats\", startDate, endDate, null)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "activate Statistics"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Statistics -\u003e Statistics : basicStats(startDate, endDate)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Statistics -\u003e Statistics : extractRelevantExpenses(startDate, endDate)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Statistics -\u003e Statistics : generatePercentages()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Statistics --\u003e StatsCommand : statsResult"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "deactivate Statistics"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "StatsCommand -\u003e Statistics : getFormattedPercentages()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "activate Statistics"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Statistics --\u003e StatsCommand : percentages"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "deactivate Statistics"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "StatsCommand -\u003e Statistics : getFormattedCategories()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "activate Statistics"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Statistics --\u003e StatsCommand : categories"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "deactivate Statistics"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "StatsCommand -\u003e Statistics : getTitle()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "activate Statistics"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Statistics --\u003e StatsCommand : title"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "deactivate Statistics"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "StatsCommand -\u003e CommandResult : CommandResult(statsResult, false, false, true, false, \\n PanelName.CURRENT, categories, percentages, title)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "CommandResult --\u003e StatsCommand"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "StatsCommand --\u003e LogicManager"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "destroy StatsCommand"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003c-- LogicManager"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 152
    }
  },
  {
    "path": "docs/diagrams/BudgetActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ":MooLah launches;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "if (primary budget (if any) expired?) then (yes)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    :refresh budget;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "else (no)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    :proceed with current period;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "endif"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ":expense is added to MooLah;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "if () then (budget list is empty)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    :create default budget;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    :set default budget as primary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "else (budget list is not empty)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    :proceed with current primary budget;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "endif"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "if () then (expense has a budget \\n(retrieved from past data))"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    :add this expense to corresponding budget;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "else (expense has no budget \\n(newly added by user))"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    :set primary budget as expenses\u0027s budget;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    :add expense to primary budget;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "endif"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ":update budget\u0027s proportionUsed;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ":add expense to expense list;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "stop"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 28
    }
  },
  {
    "path": "docs/diagrams/BudgetClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "class Budget {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "-boolean: isPrimary"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+{static} createDefaultBudget(): Budget"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+addExpense(e: Expense)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+getExpenseSum(): double"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+calculateProportionUsed(): Percentage"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+isExceeded(): boolean"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+expired(): boolean"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+refresh(date: Timestamp)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+getCurrentPeriodExpenses(): ObservableList\u003cExpense\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Budget -right-\u003e \"2\" Timestamp : startDate and endDate"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Budget -up-\u003e \"1\" Period : recurring period"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Budget -up-\u003e \"1\" Description : name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Budget -up-\u003e \"1\" Price : amount"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Budget --\u003e \"1\" Percentage : proportionUsed"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "Budget o-down-\u003e \"0..*\" Expense : expenses"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 22
    }
  },
  {
    "path": "docs/diagrams/ExpenseClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "class Expense"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": "class Description"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "class Price"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "class Timestamp"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "class Category"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "class UniqueIdentifier"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "class Budget"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "Description \"1\" \u003c-- Expense"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": "Description \"1\" \u003c-- Expense"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "Price \"1\" \u003c-- Expense"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "Timestamp \"1\" \u003c-- Expense"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "Category \"1\" \u003c-- Expense"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": "UniqueIdentifier \"1\" \u003c-- Expense"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "Budget \"1\" \u003c.. Expense"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "class Expense {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "getDescription(): Description"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "getPrice(): Price"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "getTimestamp(): Timestamp"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "getUniqueIdentifier(): UniqueIdentifier"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "getBudgetName(): Description"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "getCategory(): Category"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "isSameExpense(e: Expense): boolean"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "setBudget(b: Budget)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "czkay": 30
    }
  },
  {
    "path": "docs/diagrams/PercentageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "class Percentage {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "-int: proportion"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+{static} calculate(num: double, den: double): Percentage"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+{static} isValidPercentage(int): boolean"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+{static} getProportionFromString(String): int"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 10
    }
  },
  {
    "path": "docs/diagrams/StatsCommandParser.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "participant \":StatsCommandParser\" as StatsCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "participant \":ArgumentTokenizer\" as ArgumentTokenizer LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "participant \":ParserUtil\" as ParserUtil LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "participant \":StatsCommand\" as StatsCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "note left of StatsCommandParser:  **sd** create StatsCommand with start date and end date"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "-\u003e StatsCommandParser : parse(\"stats \\n sd/01-10-2019 \\n ed/01-11-2019)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "activate StatsCommandParser"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "StatsCommandParser -\u003e ArgumentTokenizer : tokenize(\"sd/01-10-2019 ed/01-11-2019\",\\n PREFIX_START_DATE, \\n PREFIX_END_DATE)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "activate ArgumentTokenizer"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "ArgumentTokenizer --\u003e StatsCommandParser : argMultimap"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "deactivate ArgumentTokenizer"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "StatsCommandParser -\u003e StatsCommandParser: isStartPresent \u003d argMultimap.getValue(PREFIX_START_DATE).isPresent();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "StatsCommandParser -\u003e StatsCommandParser: isEndPresent \u003d argMultimap.getValue(PREFIX_END_DATE).isPresent();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "alt both present"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    StatsCommandParser -\u003e ParserUtil : parseTimestamp(argMultimap.getValue(PREFIX_START_DATE).get())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    activate ParserUtil"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    ParserUtil --\u003e StatsCommandParser: startDate"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    deactivate ParserUtil"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    StatsCommandParser -\u003e ParserUtil : parseTimestamp(argMultimap.getValue(PREFIX_END_DATE).get())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    activate ParserUtil"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    ParserUtil --\u003e StatsCommandParser: endDate"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    deactivate ParserUtil"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "else isStartPresent"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    StatsCommandParser -\u003e ParserUtil : parseTimestamp(argMultimap.getValue(PREFIX_START_DATE).get())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    activate ParserUtil"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    ParserUtil --\u003e StatsCommandParser: startDate"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    deactivate ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    StatsCommandParser -\u003e StatsCommandParser: createForwardTimestamp(startDate)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    else isEndPresent"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    StatsCommandParser -\u003e ParserUtil : parseTimestamp(argMultimap.getValue(PREFIX_END_DATE).get())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    activate ParserUtil"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    ParserUtil --\u003e StatsCommandParser: endDate"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    deactivate ParserUtil"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    StatsCommandParser -\u003e StatsCommandParser: createBackwardTimestamp(endDate)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "else nonePresent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     StatsCommandParser -\u003e ParserUtil : getCurrentTimestamp()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     activate ParserUtil"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     ParserUtil --\u003e StatsCommandParser: endDate"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     deactivate ParserUtil"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     StatsCommandParser -\u003e StatsCommandParser: createBackwardTimestamp(endDate)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "end"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "create StatsCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "StatsCommandParser -\u003e StatsCommand : StatsCommand(startDate, endDate)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "activate StatsCommand"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "StatsCommand --\u003e StatsCommandParser"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "deactivate StatsCommand"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003c-- StatsCommandParser"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "destroy StatsCommandParser"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 83
    }
  },
  {
    "path": "docs/diagrams/SwitchBudgetCommandClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "class SwitchBudgetCommand {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+{static} COMMAND_WORD: String"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+{static} MESSAGE_USAGE: String"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+{static} MESSAGE_SUCCESS: String"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+{static} MESSAGE_BUDGET_NOT_FOUND: String"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "+{static} MESSAGE_BUDGET_ALREADY_PRIMARY: String"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "#validate(model: Model)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "#execute(model: Model): CommandResult"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "abstract class UndoableCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "SwitchBudgetCommand -up-|\u003e UndoableCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "SwitchBudgetCommand -right-\u003e \"1\" Description: target budget name"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "SwitchBudgetCommand ..\u003e Model"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "SwitchBudgetCommand ..\u003e CommandResult"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "SwitchBudgetCommand .left.\u003e CommandException: throws"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 21
    }
  },
  {
    "path": "docs/diagrams/TranspiredEventsSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": "box UI UI_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "participant \":UiManager\" as UiManager UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "participant \":MainWindow\" as MainWindow UI_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "participant \":TranspiredEventsWindow\" as TranspiredEventsWindow UI_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "box LOGIC LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u0027participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u0027participant \":AddBudgetCommandParser\" as AddBudgetCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u0027participant \"b:AddBudgetCommand\" as AddBudgetCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": "participant \":Timekeeper\" as Timekeeper MODEL_COLOR"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u0027participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u0027participant \":AddressBook\" as AddressBook MODEL_COLOR"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u0027participant \":UniqueBudgetList\" as UniqueBudgetList MODEL_COLOR"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "end box"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "[-\u003e UiManager : start(primaryStage)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "activate UiManager"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "UiManager -\u003e MainWindow : handleTranspiredEvents()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": "MainWindow -\u003e LogicManager : getTranspiredEvents()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czkay"
        },
        "content": "LogicManager -\u003e Timekeeper : getTranspiredEvents()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czkay"
        },
        "content": "activate Timekeeper"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": "Timekeeper -\u003e LogicManager : transpiredEvents"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "czkay"
        },
        "content": "deactivate Timekeeper"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "czkay"
        },
        "content": "LogicManager -\u003e MainWindow : transpiredEvents"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "czkay"
        },
        "content": "loop events in transpiredEvents"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "czkay"
        },
        "content": "    create TranspiredEventsWindow"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "czkay"
        },
        "content": "    MainWindow -\u003e TranspiredEventsWindow : show(event)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czkay"
        },
        "content": "    activate TranspiredEventsWindow"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "czkay"
        },
        "content": "    alt user presses yes"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "czkay"
        },
        "content": "    TranspiredEventsWindow -\u003e TranspiredEventsWindow : addExpense()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "czkay"
        },
        "content": "    activate TranspiredEventsWindow"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "czkay"
        },
        "content": "    TranspiredEventsWindow -\u003e LogicManager : execute(originalInput)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "czkay"
        },
        "content": "    deactivate TranspiredEventsWindow"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "czkay"
        },
        "content": "    else user presses no"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "czkay"
        },
        "content": "    TranspiredEventsWindow -\u003e TranspiredEventsWindow : ignore()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "czkay"
        },
        "content": "    end"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "czkay"
        },
        "content": "    TranspiredEventsWindow --\u003e MainWindow : void"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "czkay"
        },
        "content": "    destroy TranspiredEventsWindow"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "czkay"
        },
        "content": "end"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "czkay"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "czkay": 57
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Class SinglePanelView"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Class ExpenseCard"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Class ExpenseListPanel"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Class BudgetListPanel"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Class BudgetPanel"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Class BudgetCard"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Class \"{abstract}\\nPanel\" as Panel"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Class SyntaxHighlightingTextArea"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "MainWindow *-down-\u003e SinglePanelView"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "BudgetPanel -down--\u003e BudgetCard"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "ExpenseListPanel -down-\u003e ExpenseCard"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "BudgetListPanel -down-\u003e BudgetCard"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "SinglePanelView ---|\u003e UiPart"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "StatusBarFooter ---|\u003e UiPart"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "ExpenseCard --|\u003e UiPart"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "BudgetCard --|\u003e UiPart"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "Panel --|\u003e UiPart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "SinglePanelView --|\u003e UiPart"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "CommandBox *-left-\u003e SyntaxHighlightingTextArea"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "ExpenseListPanel --|\u003e Panel"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "BudgetListPanel --|\u003e Panel"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "BudgetPanel --|\u003e Panel"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "SinglePanelView ---\u003e ExpenseListPanel"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "SinglePanelView ---\u003e BudgetListPanel"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "SinglePanelView ---\u003e BudgetPanel"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "BudgetCard ...\u003e Model"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "ExpenseCard ..\u003e Model"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "ExpenseListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "briyanii": 37,
      "-": 49
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState0.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title Initial state"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package ModelHistory{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    package PastModels {}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    package FutureModels {}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "class State1 as \"__m0:Model__\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "ryoarmanda": 7
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState1.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "title After command \"add d/Chicken Rice p/2.50\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package ModelHistory{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    package PastModels {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        class State1 as \"__m0:Model__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    package FutureModels {}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "class State2 as \"__m1:Model__\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "ryoarmanda": 7
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState2.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "title After command \"delete 1\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package ModelHistory{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    package PastModels {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        class State1 as \"__m0:Model__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        class State2 as \"__m1:Model__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        State1 -[hidden]up-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    package FutureModels {}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "class State3 as \"__m2:Model__\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "ryoarmanda": 11
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState3.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"undo\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package ModelHistory{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    package PastModels {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        class State1 as \"__m0:Model__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    package FutureModels {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        class State3 as \"__m2:Model__\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "class State2 as \"__m1:Model__\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "ryoarmanda": 7
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState4.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "title After command \"redo\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package ModelHistory{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    package PastModels {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        class State1 as \"__m0:Model__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        class State2 as \"__m1:Model__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        State1 -[hidden]up-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    package FutureModels {}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "class State3 as \"__m2:Model__\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "ryoarmanda": 12
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "participant \"model:Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "participant \"history:ModelHistory\" as ModelHistory MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "participant \"prevModel:Model\" as PrevModel MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "participant \"prevHistory:ModelHistory\" as PrevModelHistory MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(undo)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(undo)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "LogicManager -\u003e UndoCommand : run(model)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "UndoCommand -\u003e UndoCommand : validate(model)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "UndoCommand -\u003e Model : canRollback()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Model -\u003e ModelHistory : isPastModelsEmpty()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "activate ModelHistory"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "ModelHistory --\u003e Model :"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "deactivate ModelHistory"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e UndoCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "UndoCommand --\u003e UndoCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "UndoCommand -\u003e UndoCommand :execute(model)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "UndoCommand -\u003e Model : rollbackModel()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Model -\u003e ModelHistory : getPrevModel()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "activate ModelHistory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "ModelHistory --\u003e Model : prevModel"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "deactivate ModelHistory"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Model -\u003e PrevModel : addToFutureHistory(model)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "activate PrevModel"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "PrevModel -\u003e PrevModelHistory : addToFutureModels(model)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "activate PrevModelHistory"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "PrevModelHistory --\u003e PrevModel :"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "deactivate PrevModelHistory"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "PrevModel --\u003e Model :"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "deactivate PrevModel"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Model --\u003e UndoCommand : pastModel"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "UndoCommand -\u003e Model : resetData(prevModel)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "Model --\u003e UndoCommand :"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "UndoCommand --\u003e UndoCommand"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "ryoarmanda": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.AliasMappings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.commons.exceptions.DataInconsistencyException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import seedu.address.model.ModelHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.MooLah;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.ReadOnlyMooLah;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.Timekeeper;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.storage.JsonMooLahStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.storage.MooLahStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 1, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "czkay"
        },
        "content": "    protected Timekeeper timekeeper;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing MooLah ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        MooLahStorage mooLahStorage \u003d new JsonMooLahStorage(userPrefs.getMooLahFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        storage \u003d new StorageManager(mooLahStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "czkay"
        },
        "content": "        timekeeper \u003d new Timekeeper(logic);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "czkay"
        },
        "content": "        ui \u003d new UiManager(logic, timekeeper);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s MooLah and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * The data from the sample MooLah will be used instead if {@code storage}\u0027s MooLah is not found,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * or an empty MooLah will be used instead if errors occur when reading {@code storage}\u0027s MooLah."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Optional\u003cReadOnlyMooLah\u003e mooLahOptional;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        ReadOnlyMooLah initialData;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            mooLahOptional \u003d storage.readMooLah();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            if (!mooLahOptional.isPresent()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample MooLah\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            initialData \u003d mooLahOptional.orElseGet(SampleDataUtil::getSampleMooLah);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty MooLah\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            initialData \u003d new MooLah();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        } catch (DataInconsistencyException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            logger.warning(\"There are inconsistencies between expenses in expense list and in budgets.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            initialData \u003d new MooLah();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty MooLah\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            initialData \u003d new MooLah();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return new ModelManager(initialData, userPrefs, new ModelHistory());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty MooLah\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        //ensure aliases are valid"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            initializedPrefs.getAliasMappings().validate();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            logger.warning(\"Problem occurred while reading Aliases from the file. \""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    + \"Will be resetting alias mappings: \" + e.getMessage());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            initializedPrefs.setAliasMappings(new AliasMappings());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        logger.info(\"Starting MooLah \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping MooLah ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 11,
      "czkay": 4,
      "anqichen9856": 29,
      "-": 157,
      "ryoarmanda": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Alias.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Represents a user defined alias which can be used at the start of input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class Alias implements Serializable {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \"Alias names can only consist of alphanumeric characters\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_INPUT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \"Alias inputs must contain at least 1 non-whitespace character\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String INPUT_VALIDATION_REGEX \u003d \"\\\\S[\\\\s\\\\S]*\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final String aliasName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final String aliasInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /* Do not remove. JSON expects a default constructor by default */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Alias() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        aliasName \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        aliasInput \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Alias(String aliasName, String aliasInput) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireAllNonNull(aliasName, aliasInput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        checkArgument(isValidAliasName(aliasName), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        checkArgument(isValidInput(aliasInput), MESSAGE_INPUT_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.aliasName \u003d aliasName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.aliasInput \u003d aliasInput;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public String getAliasName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return aliasName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return aliasInput;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return getInput().trim().split(\"\\\\s+\")[0];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return Objects.hash(aliasName, aliasInput);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!(obj instanceof Alias)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Alias other \u003d (Alias) obj;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return aliasName.equals(other.aliasName)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u0026\u0026 aliasInput.equals(other.aliasInput);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static boolean isValidAliasName(String aliasName) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return Pattern.matches(NAME_VALIDATION_REGEX, aliasName);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static boolean isValidInput(String input) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return Pattern.matches(INPUT_VALIDATION_REGEX, input);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return \"Alias: \" + aliasName + \" Input: \" + aliasInput;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/AliasMappings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.exceptions.RecursiveAliasException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.alias.AddAliasCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.budget.AddBudgetCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.budget.SwitchBudgetCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.event.AddEventCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.event.ListEventsCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.AddExpenseCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.ClearCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.DeleteExpenseCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.EditExpenseCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.FindExpenseCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.ListExpenseCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.general.ExitCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.ui.ViewPanelCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A Serializable class that represents the user\u0027s {@code Alias} settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Guarantees: fields are present, immutable."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class AliasMappings implements Serializable {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String NON_MATCHING_KEY \u003d \"Alias\u0027 key must be the Alias\u0027 name.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String RESERVED_NAME \u003d \"Alias cannot use a name reserved by a built-in command.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String NULL_VALUE \u003d \"Either Alias or key is null.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String INVALID_ALIAS \u003d \"Alias mappings contains an invalid Alias.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final List\u003cString\u003e RESERVED_COMMAND_WORDS \u003d List.of("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // event"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            AddEventCommand.COMMAND_WORD, ListEventsCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            //expense"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            AddExpenseCommand.COMMAND_WORD, DeleteExpenseCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            ListExpenseCommand.COMMAND_WORD, FindExpenseCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            EditExpenseCommand.COMMAND_WORD, ClearCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // budget"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            AddBudgetCommand.COMMAND_WORD, SwitchBudgetCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // alias"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            AddAliasCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // general"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            HelpCommand.COMMAND_WORD, ExitCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            UndoCommand.COMMAND_WORD, RedoCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            ViewPanelCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    );"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Map\u003cString, Alias\u003e aliasNameToAliasMap;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // Constructors"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public AliasMappings() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.aliasNameToAliasMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private AliasMappings(AliasMappings aliasMappings) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(aliasMappings);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.aliasNameToAliasMap \u003d new HashMap\u003c\u003e(aliasMappings.aliasNameToAliasMap);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Alias getAlias(String aliasName) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return aliasNameToAliasMap.get(aliasName);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public List\u003cAlias\u003e getAliases() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return List.copyOf(aliasNameToAliasMap.values());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Removes an alias with the specified name if it exists"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return True if it existed and was deleted, false otherwise"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean removeAlias(String name) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!aliasWithNameExists(name)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            aliasNameToAliasMap.remove(name);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns an {@code AliasMappings} with an added {@code Alias}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public AliasMappings addAlias(Alias alias) throws RecursiveAliasException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (aliasCommandWordIsAlias(alias)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new RecursiveAliasException(alias);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        AliasMappings aliasMappings \u003d new AliasMappings(this);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        aliasMappings.aliasNameToAliasMap.put(alias.getAliasName(), alias);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return aliasMappings;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns true if an {@code Alias} is mapped to the given {@code String aliasName}, and false otherwise."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param aliasName The alias name to check if it has a mapped {@code Alias}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return true if an {@code Alias} is mapped to the given {@code String aliasName}, and false otherwise."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean aliasWithNameExists(String aliasName) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return aliasNameToAliasMap.containsKey(aliasName);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns true if an alias\u0027 name is a reserved command word and false otherwise."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param alias The alias which needs to be checked."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return true if an alias name is a reserved command word and false otherwise."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean aliasUsesReservedName(Alias alias) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String aliasName \u003d alias.getAliasName();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return RESERVED_COMMAND_WORDS.contains(aliasName);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns true if the Alias\u0027 command word references another Alias\u0027 alias name."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean aliasCommandWordIsAlias(Alias alias) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String commandWord \u003d alias.getCommandWord();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return aliasWithNameExists(commandWord);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Checks if there are invalid Aliases in the AliasMappings."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @throws IllegalValueException if there are invalid Aliases."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @throws RecursiveAliasException if there are Aliases which cause recursion."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void validate() throws IllegalValueException, RecursiveAliasException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        for (Map.Entry\u003cString, Alias\u003e entry : aliasNameToAliasMap.entrySet()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            Alias a \u003d entry.getValue();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            String aliasName \u003d entry.getKey();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                ParserUtil.parseAlias(a.getAliasName(), a.getInput());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                throw new IllegalValueException(INVALID_ALIAS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (aliasName \u003d\u003d null) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                throw new IllegalValueException(NULL_VALUE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // alias\u0027 key is not alias name"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (!aliasName.equals(a.getAliasName())) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                throw new IllegalValueException(NON_MATCHING_KEY);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // alias name is reserved"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (aliasUsesReservedName(a)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                throw new IllegalValueException(RESERVED_NAME);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // ensure non recursive"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        checkIfRecursive();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Checks if there is an alias in the mappings that may cause recursion when it\u0027s input is executed."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @throws RecursiveAliasException if it may cause recursion."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private void checkIfRecursive() throws RecursiveAliasException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // ensure that all aliases that are chained do not chain to themselves."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        for (Alias a : aliasNameToAliasMap.values()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            Set\u003cString\u003e visited \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            String currentAlias \u003d a.getAliasName();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            String nextCommand \u003d a.getCommandWord();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // while this alias chains to another alias"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            while (aliasNameToAliasMap.containsKey(nextCommand)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                // if the chain returns to a visited alias"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                if (visited.contains(currentAlias)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    throw new RecursiveAliasException(aliasNameToAliasMap.get(currentAlias));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                visited.add(currentAlias);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                currentAlias \u003d nextCommand;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                nextCommand \u003d aliasNameToAliasMap.get(nextCommand).getCommandWord();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return aliasNameToAliasMap.hashCode();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!(obj instanceof AliasMappings)) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        AliasMappings other \u003d (AliasMappings) obj;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // contains the same keys, for the keys it contains, it maps to the same inputs"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!aliasNameToAliasMap.keySet().equals(other.aliasNameToAliasMap.keySet())) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return aliasNameToAliasMap"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .keySet()"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .allMatch(key -\u003e aliasNameToAliasMap.get(key).equals(other.aliasNameToAliasMap.get(key)));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 217
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static final String LOG_FILE \u003d \"moolah.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX \u003d \"The expense index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String MESSAGE_INVALID_BUDGET_DISPLAYED_INDEX \u003d \"The budget index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String MESSAGE_CANNOT_DELETE_DEFAULT_BUDGET \u003d \"Default budget cannot be deleted\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_EXPENSES_LISTED_OVERVIEW \u003d \"%1$d expenses listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static final String MESSAGE_REPEATED_PREFIX_COMMAND \u003d \"Repeated prefixes are not allowed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final String MESSAGE_INVALID_EVENT_DISPLAYED_INDEX \u003d \"The event index provided is invalid\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 2,
      "czkay": 1,
      "qweiping31415": 1,
      "anqichen9856": 2,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/DataInconsistencyException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Dummy."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class DataInconsistencyException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public DataInconsistencyException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/RecursiveAliasException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.Alias;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Represents an error which occurs when trying to add an Alias which has an CommandWord which"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * refers to another Alias in the AliasMappings."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class RecursiveAliasException extends Exception {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public RecursiveAliasException(Alias cause) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(String.format(\"The alias \\\"%s\\\" cannot be added because it may cause recursion.\", cause.getAliasName()));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(cause);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.AliasMappings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.ReadOnlyMooLah;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param commandGroup"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    CommandResult execute(String commandText, String commandGroup) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": "    boolean hasBudgetWithName(Description targetDescription);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    StringBuilder getBasicStatistics();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Returns the MooLah."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @see seedu.address.model.Model#getMooLah()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    ReadOnlyMooLah getMooLah();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of expenses */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    ObservableList\u003cExpense\u003e getFilteredExpenseList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of events */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "czkay"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredEventList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of budgets */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    ObservableList\u003cBudget\u003e getFilteredBudgetList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    Budget getPrimaryBudget();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Returns the user prefs\u0027 MooLah file path."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    Path getMooLahFilePath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    AliasMappings getAliasMappings();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    boolean deleteAliasWithName(String aliasName);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "czkay"
        },
        "content": "    void deleteTranspiredEvents(List\u003cEvent\u003e eventsToBeRemoved);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "czkay"
        },
        "content": "    void addExpenseFromEvent(Event currentEvent) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 11,
      "briyanii": 14,
      "qweiping31415": 2,
      "anqichen9856": 7,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.AliasMappings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.logic.commands.expense.AddExpenseCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.parser.MooLahParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.ReadOnlyMooLah;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final MooLahParser mooLahParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        mooLahParser \u003d new MooLahParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public CommandResult execute(String commandText, String commandGroup) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Command command \u003d mooLahParser.parseCommand(commandText, commandGroup, model.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        commandResult \u003d command.run(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "czkay"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Saves any changes in MooLah or in user preferences into Storage."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @throws CommandException If there is an IO error."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private void save() throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            storage.saveMooLah(model.getMooLah());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public boolean hasBudgetWithName(Description targetDescription) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return model.hasBudgetWithName(targetDescription);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public StringBuilder getBasicStatistics() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return model.getStatistic();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public ReadOnlyMooLah getMooLah() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return model.getMooLah();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return model.getFilteredBudgetList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return model.getFilteredEventList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void deleteTranspiredEvents(List\u003cEvent\u003e eventsToBeRemoved) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "czkay"
        },
        "content": "        for (Event event : eventsToBeRemoved) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "czkay"
        },
        "content": "            model.deleteEvent(event);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "czkay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "czkay"
        },
        "content": "            save();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "czkay"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "czkay"
        },
        "content": "            logger.info(e.getMessage());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void addExpenseFromEvent(Event event) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Expense toBeAdded \u003d event.convertToExpense();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Command addExpenseCommand \u003d new AddExpenseCommand(toBeAdded);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "czkay"
        },
        "content": "        addExpenseCommand.run(model);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //@Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //  return model.getFilteredBudgetList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Budget getPrimaryBudget() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return model.getPrimaryBudget();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Path getMooLahFilePath() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return model.getMooLahFilePath();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public AliasMappings getAliasMappings() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return model.getAliasMappings();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean deleteAliasWithName(String aliasName) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return model.removeAliasWithName(aliasName);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 43,
      "briyanii": 20,
      "qweiping31415": 7,
      "anqichen9856": 13,
      "-": 69,
      "ryoarmanda": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Validates the command parameters."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * @throws CommandException If parameters are invalid."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    protected abstract void validate(Model model) throws CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Executes the command, without validation, and returns the result message."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    protected abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Executes the command with validation and returns the result message."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public CommandResult run(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        validate(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return execute(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "ryoarmanda": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandGroup.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Group names for MooLah\u0027s different feature\u0027s commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class CommandGroup {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String ALIAS \u003d \"alias\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String EXPENSE \u003d \"expense\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String STATISTIC \u003d \"stats\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String BUDGET \u003d \"budget\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String GENERAL \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.statistics.PieChartStatistics;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.statistics.TableEntry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.statistics.TabularStatistics;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.panel.PanelName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /** The panel to show the in the application. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private PanelName panelName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private Statistics statistics;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private List\u003cString\u003e names;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private List\u003cDouble\u003e percentages;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private List\u003cTableEntry\u003e differenceTable;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public CommandResult(String feedbackToUser, Statistics statistics, boolean showHelp, boolean exit,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                         PanelName panelName) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.statistics \u003d statistics;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.panelName \u003d panelName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        if (statistics \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        } else if (statistics instanceof PieChartStatistics) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            PieChartStatistics pieChart \u003d (PieChartStatistics) statistics;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            this.names \u003d pieChart.getFormattedCategories();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            this.percentages \u003d pieChart.getFormattedPercentages();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        } else if (statistics instanceof TabularStatistics) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            TabularStatistics table \u003d (TabularStatistics) statistics;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            this.differenceTable \u003d table.getDifferenceTable();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.title \u003d statistics.getTitle();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields. Meant for statsCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                         PanelName panelName) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.panelName \u003d panelName;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.names \u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.percentages \u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.title \u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser}, {@code forcePanelChange},"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * {@code panelName}, and other fields set to their default value."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public CommandResult(String feedbackToUser, PanelName panelName) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this(feedbackToUser, false, false, panelName);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * and other fields set to their default value. Meant for most MooLah commands"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this(feedbackToUser, false, false, PanelName.CURRENT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * and other fields set to their default value. Meant for Help and Bye commands."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this(feedbackToUser, showHelp, exit, PanelName.CURRENT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public boolean isStatistic() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return statistics !\u003d null;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public Statistics getStatistics() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return statistics;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public List\u003cString\u003e getNames() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return names;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public List\u003cDouble\u003e getPercentages() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return percentages;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public List\u003cTableEntry\u003e getDifferenceTable() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return differenceTable;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public PanelName viewrequest() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return panelName;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 24,
      "qweiping31415": 75,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GenericCommandWord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Contains Command Line Interface (CLI) Command Words common to multiple commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class GenericCommandWord {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String ADD \u003d \"add\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String LIST \u003d \"list\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static boolean isGeneric(String commandWord) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return commandWord.equals(ADD) || commandWord.equals(LIST) || commandWord.equals(DELETE);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": " * Redoes a model-changing command, effectively migrating the model to a future state."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public static final String MESSAGE_NO_MODEL \u003d \"There is nothing to be redone.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redid the undoable command\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    protected void validate(Model model) throws CommandException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        if (!model.canMigrate()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            throw new CommandException(MESSAGE_NO_MODEL);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        // nextModel is guaranteed to be present due to previous validation."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        Model nextModel \u003d model.migrateModel().get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        model.resetData(nextModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": " * Undoes the previous model-changing command, effectively reverting the model to its previous state."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public static final String MESSAGE_NO_MODEL \u003d \"There is nothing to be undone.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undid the last undoable command. \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    protected void validate(Model model) throws CommandException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        if (!model.canRollback()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            throw new CommandException(MESSAGE_NO_MODEL);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        // prevModel guaranteed to be present due to previous validation."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        Model prevModel \u003d model.rollbackModel().get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        model.resetData(prevModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoableCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": " * Represents a particular type of command that is undoable."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public abstract class UndoableCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public CommandResult run(Model model) throws CommandException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        validate(model);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        model.addToHistory();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return execute(model);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/alias/AddAliasCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.commands.alias;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALIAS_ALIAS_INPUT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALIAS_ALIAS_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.Alias;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandGroup;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.GenericCommandWord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.UndoableCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.expense.AliasPanel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Create an alias for common user input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class AddAliasCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String COMMAND_WORD \u003d GenericCommandWord.ADD + CommandGroup.ALIAS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Create a shortcut for commonly used Commands.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + \"Parameters: \" + PREFIX_ALIAS_ALIAS_NAME"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + \" \u003calias name\u003e  \" + PREFIX_ALIAS_ALIAS_INPUT + \" \u003cinput string\u003e \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + \"Example: addalias \" + PREFIX_ALIAS_ALIAS_NAME"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + \" findAnimal \" + PREFIX_ALIAS_ALIAS_INPUT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + \" find rat rats mouse mice cow cows ox oxen tiger tigers\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Alias created: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_RESERVED_NAME \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \"%1$s is a reserved command name and cannot be used for an alias name\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_RECURSIVE_WARNING \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \"This alias is not allowed because it may possibly be recursive\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Alias toAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Creates an AddExpenseCommand to add the specified {@code Expense}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public AddAliasCommand(Alias alias) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(alias);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.toAdd \u003d alias;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    protected void validate(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // if command_word is reserved"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String aliasName \u003d toAdd.getAliasName();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (model.getUserPrefs().aliasNameIsReserved(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_RESERVED_NAME, aliasName));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // if recursive"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String commandWord \u003d toAdd.getCommandWord();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (commandWord.equalsIgnoreCase(aliasName) || model.getUserPrefs().aliasCommandWordIsAlias(toAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new CommandException(MESSAGE_RECURSIVE_WARNING);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    protected CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        model.addUserAlias(toAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                String.format(MESSAGE_SUCCESS, toAdd.getAliasName()), AliasPanel.PANEL_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return obj \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                || (obj instanceof AddAliasCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u0026\u0026 this.toAdd.equals(((AddAliasCommand) obj).toAdd));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 73,
      "czkay": 1,
      "ryoarmanda": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/alias/DeleteAliasCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.commands.alias;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandGroup;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.GenericCommandWord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.UndoableCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.expense.AliasPanel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Create an alias for common user input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class DeleteAliasCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String COMMAND_WORD \u003d GenericCommandWord.DELETE + CommandGroup.ALIAS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Delete an alias with the alias name.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + \"Parameters: \u003calias name\u003e\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + \"Example: deletealias findCat\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Alias deleted: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"There is no Alias with the following name: \\\"%s\\\"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private String aliasName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Creates an AddExpenseCommand to add the specified {@code Expense}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public DeleteAliasCommand(String aliasName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(aliasName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.aliasName \u003d aliasName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    protected void validate(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // no validation needed"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!model.aliasWithNameExists(aliasName)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_FAILURE, aliasName));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    protected CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        model.removeAliasWithName(aliasName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, aliasName), AliasPanel.PANEL_NAME);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return obj \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                || (obj instanceof DeleteAliasCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u0026\u0026 this.aliasName.equals(((DeleteAliasCommand) obj).aliasName));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/alias/ListAliasCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.commands.alias;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandGroup;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.GenericCommandWord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.UndoableCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.expense.AliasPanel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Create an alias for common user input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class ListAliasCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String COMMAND_WORD \u003d GenericCommandWord.LIST + CommandGroup.ALIAS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": List all user defined alises.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You have %d aliases.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    protected void validate(Model model) throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // no validation needed"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    protected CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                String.format(MESSAGE_SUCCESS, model.getAliasMappings().getAliases().size()),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                AliasPanel.PANEL_NAME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/budget/AddBudgetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.commands.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERIOD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandGroup;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.GenericCommandWord;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.UndoableCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.budget.BudgetPanel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Adds a budget to MooLah."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class AddBudgetCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String COMMAND_WORD \u003d GenericCommandWord.ADD + CommandGroup.BUDGET;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an budget to MooLah.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + PREFIX_PRICE + \"AMOUNT \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + PREFIX_START_DATE + \"START DATE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + PREFIX_PERIOD + \"PERIOD\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + PREFIX_DESCRIPTION + \"school related expenses \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + PREFIX_PRICE + \"300 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + PREFIX_START_DATE + \"23-06 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + PREFIX_PERIOD + \"month\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New budget added:\\n %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BUDGET \u003d \"This budget already exists in MooLah\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final Budget toAdd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public AddBudgetCommand(Budget budget) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        toAdd \u003d budget;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    protected void validate(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (model.hasBudget(toAdd)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BUDGET);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    protected CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        model.addBudget(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), BudgetPanel.PANEL_NAME);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                || (other instanceof AddBudgetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddBudgetCommand) other).toAdd));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 9,
      "anqichen9856": 54,
      "ryoarmanda": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/budget/DeleteBudgetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.logic.commands.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandGroup;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.GenericCommandWord;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.UndoableCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.ui.budget.BudgetListPanel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Deletes a budget identified using it\u0027s displayed index from the MooLah."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class DeleteBudgetCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String COMMAND_WORD \u003d GenericCommandWord.DELETE + CommandGroup.BUDGET;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \": Deletes the budget identified by the index number used in the displayed budget list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String MESSAGE_DELETE_BUDGET_SUCCESS \u003d \"Deleted Budget: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public DeleteBudgetCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    protected void validate(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        List\u003cBudget\u003e lastShownList \u003d model.getFilteredBudgetList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BUDGET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (lastShownList.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_CANNOT_DELETE_DEFAULT_BUDGET);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    protected CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        List\u003cBudget\u003e lastShownList \u003d model.getFilteredBudgetList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Budget budgetToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        model.deleteBudget(budgetToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_BUDGET_SUCCESS, budgetToDelete),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                BudgetListPanel.PANEL_NAME);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                || (other instanceof DeleteBudgetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteBudgetCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 3,
      "anqichen9856": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/budget/DeleteExpenseFromBudgetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.logic.commands.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.UndoableCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.ui.budget.BudgetPanel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Dummy."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class DeleteExpenseFromBudgetCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletefrombudget\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \": Deletes the expense identified by the index number used in the \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \"displayed expense list in this budget.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String MESSAGE_DELETE_EXPENSE_SUCCESS \u003d \"Deleted Expense: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public DeleteExpenseFromBudgetCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    protected void validate(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getPrimaryBudget().getCurrentPeriodExpenses();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    protected CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getPrimaryBudget().getCurrentPeriodExpenses();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Expense expenseToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        model.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EXPENSE_SUCCESS, expenseToDelete),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                BudgetPanel.PANEL_NAME);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                || (other instanceof DeleteExpenseFromBudgetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteExpenseFromBudgetCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/budget/EditBudgetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.logic.commands.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERIOD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BUDGETS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandGroup;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.UndoableCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.BudgetPeriod;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Price;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.ui.budget.BudgetListPanel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Edits the details of an existing budget in the MooLah."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class EditBudgetCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\" + CommandGroup.BUDGET;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the budget identified \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \"by the index number used in the displayed expense list. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \"[\" + PREFIX_PRICE + \"AMOUNT] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \"[\" + PREFIX_START_DATE + \"START DATE]\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \"[\" + PREFIX_PERIOD + \"PERIOD]\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + PREFIX_PRICE + \"400 \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String MESSAGE_EDIT_BUDGET_SUCCESS \u003d \"Edited Budget: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String MESSAGE_DEFAULT_BUDGET_UNEDITABLE \u003d \"The default budget cannot be edited.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BUDGET \u003d \"This budget already exists in the MooLah.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final EditBudgetDescriptor editBudgetDescriptor;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param index of the budget in the filtered budget list to edit"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param editBudgetDescriptor details to edit the budget with"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public EditBudgetCommand(Index index, EditBudgetDescriptor editBudgetDescriptor) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(editBudgetDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.editBudgetDescriptor \u003d new EditBudgetDescriptor(editBudgetDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    protected void validate(Model model) throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        List\u003cBudget\u003e lastShownList \u003d model.getFilteredBudgetList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Budget budgetToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (budgetToEdit.isSameBudget(Budget.createDefaultBudget())) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new CommandException(MESSAGE_DEFAULT_BUDGET_UNEDITABLE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Budget editedBudget \u003d createEditedBudget(budgetToEdit, editBudgetDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (!budgetToEdit.isSameBudget(editedBudget) \u0026\u0026 model.hasBudget(editedBudget)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BUDGET);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    protected CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        List\u003cBudget\u003e lastShownList \u003d model.getFilteredBudgetList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Budget budgetToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Budget editedBudget \u003d createEditedBudget(budgetToEdit, editBudgetDescriptor);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        model.setBudget(budgetToEdit, editedBudget);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        model.updateFilteredBudgetList(PREDICATE_SHOW_ALL_BUDGETS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_BUDGET_SUCCESS, editedBudget),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                BudgetListPanel.PANEL_NAME);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Creates and returns a {@code Expense} with the details of {@code expenseToEdit}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * edited with {@code editExpenseDescriptor}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static Budget createEditedBudget(Budget budgetToEdit, EditBudgetDescriptor editBudgetDescriptor) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assert budgetToEdit !\u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Description updatedDescription \u003d editBudgetDescriptor.getDescription().orElse(budgetToEdit.getDescription());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Price updatedAmount \u003d editBudgetDescriptor.getAmount().orElse(budgetToEdit.getAmount());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Timestamp updatedStartDate \u003d editBudgetDescriptor.getStartDate().orElse(budgetToEdit.getStartDate());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        BudgetPeriod updatedPeriod \u003d editBudgetDescriptor.getPeriod().orElse(budgetToEdit.getPeriod());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Budget newBudget \u003d new Budget(updatedDescription, updatedAmount, updatedStartDate, updatedPeriod,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                budgetToEdit.getExpenses());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        newBudget.setIsPrimary(budgetToEdit.isPrimary());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        newBudget.normalize(Timestamp.getCurrentTimestamp());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        newBudget.updateProportionUsed();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return newBudget;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (!(other instanceof EditBudgetCommand)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        EditBudgetCommand e \u003d (EditBudgetCommand) other;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 editBudgetDescriptor.equals(e.editBudgetDescriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Stores the details to edit the expense with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * corresponding field value of the expense."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static class EditBudgetDescriptor {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        private Price amount;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        private Timestamp startDate;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        private BudgetPeriod period;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public EditBudgetDescriptor() {}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public EditBudgetDescriptor(EditBudgetDescriptor toCopy) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            setStartDate(toCopy.startDate);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            setPeriod(toCopy.period);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "         */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return CollectionUtil.isAnyNonNull(description, amount, startDate, period);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public Optional\u003cPrice\u003e getAmount() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void setAmount(Price amount) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public Optional\u003cTimestamp\u003e getStartDate() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return Optional.ofNullable(startDate);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void setStartDate(Timestamp startDate) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public Optional\u003cBudgetPeriod\u003e getPeriod() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return Optional.ofNullable(period);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void setPeriod(BudgetPeriod period) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            this.period \u003d period;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            if (!(other instanceof EditBudgetDescriptor)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            EditBudgetDescriptor e \u003d (EditBudgetDescriptor) other;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return description.equals(e.description)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    \u0026\u0026 amount.equals(e.amount)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    \u0026\u0026 startDate.equals(e.startDate)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    \u0026\u0026 period.equals(e.period);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 2,
      "anqichen9856": 218
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/budget/EditExpenseFromBudgetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.logic.commands.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESTAMP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.UndoableCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.EditExpenseCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Price;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.ui.budget.BudgetPanel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Dummy."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class EditExpenseFromBudgetCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editfrombudget\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the expense identified \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \"by the index number used in the displayed expense list of this budget. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \"[\" + PREFIX_PRICE + \"PRICE] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"CATEGORY]\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \"[\" + PREFIX_TIMESTAMP + \"TIMESTAMP]\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + PREFIX_PRICE + \"3512.123 \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String MESSAGE_EDIT_EXPENSE_SUCCESS \u003d \"Edited Expense: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXPENSE \u003d \"This expense already exists in the MooLah.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final EditExpenseCommand.EditExpenseDescriptor editExpenseDescriptor;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param index of the expense in the filtered expense list to edit"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param editExpenseDescriptor details to edit the expense with"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public EditExpenseFromBudgetCommand(Index index, EditExpenseCommand.EditExpenseDescriptor editExpenseDescriptor) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(editExpenseDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.editExpenseDescriptor \u003d new EditExpenseCommand.EditExpenseDescriptor(editExpenseDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    protected void validate(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getPrimaryBudget().getCurrentPeriodExpenses();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Expense expenseToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Expense editedExpense \u003d createEditedExpense(expenseToEdit, editExpenseDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (!expenseToEdit.isSameExpense(editedExpense) \u0026\u0026 model.hasExpense(editedExpense)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    protected CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getPrimaryBudget().getCurrentPeriodExpenses();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Expense expenseToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Expense editedExpense \u003d createEditedExpense(expenseToEdit, editExpenseDescriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        model.setExpense(expenseToEdit, editedExpense);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        model.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                BudgetPanel.PANEL_NAME);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Creates and returns a {@code Expense} with the details of {@code expenseToEdit}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * edited with {@code editExpenseDescriptor}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static Expense createEditedExpense(Expense expenseToEdit,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                                               EditExpenseCommand.EditExpenseDescriptor editExpenseDescriptor) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assert expenseToEdit !\u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Description updatedDescription \u003d editExpenseDescriptor.getDescription().orElse(expenseToEdit.getDescription());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Price updatedPrice \u003d editExpenseDescriptor.getPrice().orElse(expenseToEdit.getPrice());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Category updatedCategory \u003d editExpenseDescriptor.getCategory().orElse(expenseToEdit.getCategory());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Timestamp updatedTimestamp \u003d editExpenseDescriptor.getTimestamp().orElse(expenseToEdit.getTimestamp());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return new Expense(updatedDescription, updatedPrice, updatedCategory,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                updatedTimestamp, expenseToEdit.getBudgetName(), expenseToEdit.getUniqueIdentifier());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (!(other instanceof EditExpenseFromBudgetCommand)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        EditExpenseFromBudgetCommand e \u003d (EditExpenseFromBudgetCommand) other;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 editExpenseDescriptor.equals(e.editExpenseDescriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 6,
      "anqichen9856": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/budget/ListBudgetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.logic.commands.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BUDGETS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandGroup;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.GenericCommandWord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.UndoableCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.ui.budget.BudgetListPanel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Lists all budgets in the MooLah to the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class ListBudgetCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String COMMAND_WORD \u003d GenericCommandWord.LIST + CommandGroup.BUDGET;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all budgets\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    protected void validate(Model model) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // No validation necessary."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    protected CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        model.updateFilteredBudgetList(PREDICATE_SHOW_ALL_BUDGETS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, BudgetListPanel.PANEL_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 3,
      "anqichen9856": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/budget/PastPeriodCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.logic.commands.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESTAMP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.UndoableCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.ui.budget.BudgetPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Switches budget window to a period in the past."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class PastPeriodCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"pastperiod\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Switches the budget to a past period anchored by \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \"the specified date and displays a list of expenses under this budget during that period.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + PREFIX_TIMESTAMP + \"DATE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + PREFIX_TIMESTAMP + \"05-01-2019\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String MESSAGE_SWITCH_PERIOD_SUCCESS \u003d \"Budget window switched back to the period \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \"anchored by: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final Timestamp pastDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public PastPeriodCommand(Timestamp pastDate) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.pastDate \u003d pastDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    protected void validate(Model model) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // No validation necessary."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    protected CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        model.changePrimaryBudgetWindow(pastDate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                String.format(MESSAGE_SWITCH_PERIOD_SUCCESS, pastDate),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                BudgetPanel.PANEL_NAME);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                || (other instanceof PastPeriodCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 pastDate.equals(((PastPeriodCommand) other).pastDate)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/budget/SwitchBudgetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.commands.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandGroup;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.UndoableCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.budget.BudgetPanel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Switches the primary budget to another budget."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class SwitchBudgetCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"switch\" + CommandGroup.BUDGET;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Switches the primary budget to another budget.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Primary budget switched to: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String MESSAGE_BUDGET_NOT_FOUND \u003d \"This budget does not exist in the address book\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String MESSAGE_BUDGET_ALREADY_PRIMARY \u003d \"This budget is already the primary budget\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final Description targetDescription;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Creates an SwitchBudgetCommand to switch primary budget the budget with the specified {@code targetDescription}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public SwitchBudgetCommand(Description targetDescription) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(targetDescription);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.targetDescription \u003d targetDescription;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    protected void validate(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (!model.hasBudgetWithName(targetDescription)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new CommandException(MESSAGE_BUDGET_NOT_FOUND);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (model.getPrimaryBudget().getDescription().equals(targetDescription)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new CommandException(MESSAGE_BUDGET_ALREADY_PRIMARY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    protected CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        model.switchBudgetTo(targetDescription);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, targetDescription), BudgetPanel.PANEL_NAME);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                || (other instanceof SwitchBudgetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 targetDescription.equals(((SwitchBudgetCommand) other).targetDescription));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 7,
      "anqichen9856": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/event/AddEventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.commands.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESTAMP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandGroup;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.GenericCommandWord;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.UndoableCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Adds an event to the MooLah."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class AddEventCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String COMMAND_WORD \u003d GenericCommandWord.ADD + CommandGroup.EVENT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \": Adds an event to MooLah. \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "            + PREFIX_PRICE + \"PRICE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": "            + PREFIX_TIMESTAMP + \"TIMESTAMP\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Chicken Rice \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czkay"
        },
        "content": "            + PREFIX_PRICE + \"3.50 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            + PREFIX_CATEGORY + \"Food \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czkay"
        },
        "content": "            + PREFIX_TIMESTAMP + \"25-12\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New event added: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in the tracker\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private final Event toAdd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Creates an AddEventCommand to add the specified {@code Event}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public AddEventCommand(Event event) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "czkay"
        },
        "content": "        toAdd \u003d event;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    protected void validate(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (model.hasEvent(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    protected CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "czkay"
        },
        "content": "        model.addEvent(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "czkay"
        },
        "content": "                || (other instanceof AddEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "czkay"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddEventCommand) other).toAdd));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 8,
      "czkay": 55,
      "qweiping31415": 2,
      "anqichen9856": 2,
      "ryoarmanda": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/event/DeleteEventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "package seedu.address.logic.commands.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.logic.commands.UndoableCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.ui.event.EventListPanel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Deletes a expense identified using it\u0027s displayed index from the MooLah."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class DeleteEventCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteevent\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "            + \": Deletes the event identified by the index number used in the displayed event list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final String MESSAGE_DELETE_EVENT_SUCCESS \u003d \"Deleted Event: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public DeleteEventCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "czkay"
        },
        "content": "    protected void validate(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "czkay"
        },
        "content": "        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "czkay"
        },
        "content": "    protected CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "czkay"
        },
        "content": "        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Event eventToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "czkay"
        },
        "content": "        model.deleteEvent(eventToDelete);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EVENT_SUCCESS, eventToDelete),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "czkay"
        },
        "content": "                EventListPanel.PANEL_NAME);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "czkay"
        },
        "content": "                || (other instanceof DeleteEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "czkay"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteEventCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/event/EditEventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "package seedu.address.logic.commands.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESTAMP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EVENTS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.logic.commands.UndoableCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Price;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.ui.event.EventListPanel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Edits the details of an existing expense in the MooLah."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class EditEventCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editevent\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the event identified \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czkay"
        },
        "content": "            + \"by the index number used in the displayed event list. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "czkay"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czkay"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "czkay"
        },
        "content": "            + \"[\" + PREFIX_PRICE + \"PRICE] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "czkay"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"CATEGORY]\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "czkay"
        },
        "content": "            + \"[\" + PREFIX_TIMESTAMP + \"TIMESTAMP]\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "czkay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "czkay"
        },
        "content": "            + PREFIX_PRICE + \"3512.123 \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final String MESSAGE_EDIT_EVENT_SUCCESS \u003d \"Edited Event: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in MooLah.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private final EditEventDescriptor editEventDescriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param index of the event in the filtered event list to edit"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param editEventDescriptor details to edit the event with"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public EditEventCommand(Index index, EditEventDescriptor editEventDescriptor) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireNonNull(editEventDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.editEventDescriptor \u003d new EditEventDescriptor(editEventDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "czkay"
        },
        "content": "    protected void validate(Model model) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "czkay"
        },
        "content": "        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Event eventToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Event editedEvent \u003d createEditedEvent(eventToEdit, editEventDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (!eventToEdit.isSameEvent(editedEvent) \u0026\u0026 model.hasEvent(editedEvent)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "czkay"
        },
        "content": "    protected CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "czkay"
        },
        "content": "        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Event eventToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Event editedEvent \u003d createEditedEvent(eventToEdit, editEventDescriptor);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "czkay"
        },
        "content": "        model.setEvent(eventToEdit, editedEvent);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "czkay"
        },
        "content": "        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EVENT_SUCCESS, editedEvent),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "czkay"
        },
        "content": "                EventListPanel.PANEL_NAME);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Creates and returns a {@code Expense} with the details of {@code expenseToEdit}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * edited with {@code editExpenseDescriptor}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private static Event createEditedEvent(Event eventToEdit, EditEventDescriptor editEventDescriptor) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "czkay"
        },
        "content": "        assert eventToEdit !\u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Description updatedDescription \u003d editEventDescriptor.getDescription().orElse(eventToEdit.getDescription());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Price updatedPrice \u003d editEventDescriptor.getPrice().orElse(eventToEdit.getPrice());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Category updatedCategory \u003d editEventDescriptor.getCategory().orElse(eventToEdit.getCategory());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Timestamp updatedTimestamp \u003d editEventDescriptor.getTimestamp().orElse(eventToEdit.getTimestamp());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return new Event(updatedDescription, updatedPrice, updatedCategory,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "czkay"
        },
        "content": "                updatedTimestamp, eventToEdit.getBudgetName());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "czkay"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "czkay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "czkay"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (!(other instanceof EditEventCommand)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "czkay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "czkay"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "czkay"
        },
        "content": "        EditEventCommand e \u003d (EditEventCommand) other;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "czkay"
        },
        "content": "                \u0026\u0026 editEventDescriptor.equals(e.editEventDescriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Stores the details to edit the expense with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * corresponding field value of the expense."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static class EditEventDescriptor {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "czkay"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "czkay"
        },
        "content": "        private Price price;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "czkay"
        },
        "content": "        private Category category;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "czkay"
        },
        "content": "        private Timestamp timestamp;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "czkay"
        },
        "content": "        public EditEventDescriptor() {}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "czkay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "czkay"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "czkay"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "czkay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "czkay"
        },
        "content": "        public EditEventDescriptor(EditEventDescriptor toCopy) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "czkay"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "czkay"
        },
        "content": "            setPrice(toCopy.price);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "czkay"
        },
        "content": "            setCategory(toCopy.category);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "czkay"
        },
        "content": "            setTimestamp(toCopy.timestamp);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "czkay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "czkay"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "czkay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "czkay"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "czkay"
        },
        "content": "            return CollectionUtil.isAnyNonNull(description, price, category, timestamp);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "czkay"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "czkay"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "czkay"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "czkay"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "czkay"
        },
        "content": "        public void setPrice(Price price) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "czkay"
        },
        "content": "            this.price \u003d price;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "czkay"
        },
        "content": "        public Optional\u003cPrice\u003e getPrice() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "czkay"
        },
        "content": "            return Optional.ofNullable(price);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "czkay"
        },
        "content": "        public void setCategory(Category category) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "czkay"
        },
        "content": "            this.category \u003d category;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "czkay"
        },
        "content": "        public Optional\u003cCategory\u003e getCategory() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "czkay"
        },
        "content": "            return Optional.ofNullable(category);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "czkay"
        },
        "content": "        public void setTimestamp(Timestamp timestamp) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "czkay"
        },
        "content": "            this.timestamp \u003d timestamp;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "czkay"
        },
        "content": "        public Optional\u003cTimestamp\u003e getTimestamp() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "czkay"
        },
        "content": "            return Optional.ofNullable(timestamp);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "czkay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "czkay"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "czkay"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "czkay"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "czkay"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "czkay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "czkay"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "czkay"
        },
        "content": "            if (!(other instanceof EditEventDescriptor)) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "czkay"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "czkay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "czkay"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "czkay"
        },
        "content": "            EditEventDescriptor e \u003d (EditEventDescriptor) other;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "czkay"
        },
        "content": "            return getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    \u0026\u0026 getPrice().equals(e.getPrice())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    \u0026\u0026 getCategory().equals(e.getCategory())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    \u0026\u0026 getTimestamp().equals(e.getTimestamp());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 211
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/event/ListEventsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.commands.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EVENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandGroup;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.GenericCommandWord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.UndoableCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.ui.event.EventListPanel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Lists all events to the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class ListEventsCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String COMMAND_WORD \u003d GenericCommandWord.LIST + CommandGroup.EVENT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all events\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    protected void validate(Model model) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        // No validation necessary."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    protected CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": "        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, EventListPanel.PANEL_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 6,
      "czkay": 20,
      "ryoarmanda": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/expense/AddExpenseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.commands.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESTAMP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandGroup;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.GenericCommandWord;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.UndoableCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.ui.budget.BudgetPanel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Adds a expense to the MooLah."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class AddExpenseCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String COMMAND_WORD \u003d GenericCommandWord.ADD + CommandGroup.EXPENSE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \": Adds an expense to MooLah. \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + PREFIX_PRICE + \"PRICE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": "            + PREFIX_TIMESTAMP + \"TIMESTAMP\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Chicken Rice \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + PREFIX_PRICE + \"3.50 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czkay"
        },
        "content": "            + PREFIX_CATEGORY + \"Food \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": "            + PREFIX_TIMESTAMP + \"10-10\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New expense added: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXPENSE \u003d \"This expense already exists in the MooLah\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final Expense toAdd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Creates an AddExpenseCommand to add the specified {@code Expense}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public AddExpenseCommand(Expense expense) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        toAdd \u003d expense;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    protected void validate(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (model.hasExpense(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    protected CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        model.addExpense(toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), BudgetPanel.PANEL_NAME);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "czkay"
        },
        "content": "                || (other instanceof AddExpenseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "czkay"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddExpenseCommand) other).toAdd));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 22,
      "czkay": 10,
      "qweiping31415": 1,
      "anqichen9856": 5,
      "-": 30,
      "ryoarmanda": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/expense/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.commands.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandGroup;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.UndoableCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.MooLah;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.expense.ExpenseListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Clears the MooLah."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class ClearCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\" + CommandGroup.EXPENSE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All expenses in MooLah have been cleared!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    protected void validate(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        // No validation necessary."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    protected CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        model.setMooLah(new MooLah());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, ExpenseListPanel.PANEL_NAME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 9,
      "anqichen9856": 3,
      "-": 14,
      "ryoarmanda": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/expense/DeleteExpenseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.commands.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandGroup;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.UndoableCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.expense.ExpenseListPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Deletes a expense identified using it\u0027s displayed index from the MooLah."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class DeleteExpenseCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\" + CommandGroup.EXPENSE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + \": Deletes the expense identified by the index number used in the displayed expense list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_DELETE_EXPENSE_SUCCESS \u003d \"Deleted Expense: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public DeleteExpenseCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    protected void validate(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    protected CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense expenseToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        model.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EXPENSE_SUCCESS, expenseToDelete),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                ExpenseListPanel.PANEL_NAME);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                || (other instanceof DeleteExpenseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteExpenseCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 19,
      "anqichen9856": 1,
      "-": 37,
      "ryoarmanda": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/expense/EditExpenseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.commands.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESTAMP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandGroup;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.UndoableCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Price;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.expense.ExpenseListPanel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Edits the details of an existing expense in the MooLah."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class EditExpenseCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\" + CommandGroup.EXPENSE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the expense identified \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + \"by the index number used in the displayed expense list. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + \"[\" + PREFIX_PRICE + \"PRICE] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"CATEGORY]\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            + \"[\" + PREFIX_TIMESTAMP + \"TIMESTAMP]\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + PREFIX_PRICE + \"3512.123 \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_EDIT_EXPENSE_SUCCESS \u003d \"Edited Expense: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXPENSE \u003d \"This expense already exists in MooLah.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final EditExpenseDescriptor editExpenseDescriptor;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param index of the expense in the filtered expense list to edit"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param editExpenseDescriptor details to edit the expense with"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public EditExpenseCommand(Index index, EditExpenseDescriptor editExpenseDescriptor) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(editExpenseDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.editExpenseDescriptor \u003d new EditExpenseDescriptor(editExpenseDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    protected void validate(Model model) throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense expenseToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense editedExpense \u003d createEditedExpense(expenseToEdit, editExpenseDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!expenseToEdit.isSameExpense(editedExpense) \u0026\u0026 model.hasExpense(editedExpense)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    protected CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        Expense expenseToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        Expense editedExpense \u003d createEditedExpense(expenseToEdit, editExpenseDescriptor);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        model.setExpense(expenseToEdit, editedExpense);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        model.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                ExpenseListPanel.PANEL_NAME);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Creates and returns a {@code Expense} with the details of {@code expenseToEdit}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * edited with {@code editExpenseDescriptor}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static Expense createEditedExpense(Expense expenseToEdit, EditExpenseDescriptor editExpenseDescriptor) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assert expenseToEdit !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Description updatedDescription \u003d editExpenseDescriptor.getDescription().orElse(expenseToEdit.getDescription());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Price updatedPrice \u003d editExpenseDescriptor.getPrice().orElse(expenseToEdit.getPrice());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        Category updatedCategory \u003d editExpenseDescriptor.getCategory().orElse(expenseToEdit.getCategory());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Timestamp updatedTimestamp \u003d editExpenseDescriptor.getTimestamp().orElse(expenseToEdit.getTimestamp());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return new Expense(updatedDescription, updatedPrice, updatedCategory,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                updatedTimestamp, expenseToEdit.getBudgetName(), expenseToEdit.getUniqueIdentifier());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!(other instanceof EditExpenseCommand)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseCommand e \u003d (EditExpenseCommand) other;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u0026\u0026 editExpenseDescriptor.equals(e.editExpenseDescriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Stores the details to edit the expense with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * corresponding field value of the expense."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static class EditExpenseDescriptor {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        private Price price;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        private Category category;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "czkay"
        },
        "content": "        private Timestamp timestamp;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public EditExpenseDescriptor() {}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public EditExpenseDescriptor(EditExpenseDescriptor toCopy) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            setPrice(toCopy.price);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            setCategory(toCopy.category);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "czkay"
        },
        "content": "            setTimestamp(toCopy.timestamp);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return CollectionUtil.isAnyNonNull(description, price, category, timestamp);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public void setPrice(Price price) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            this.price \u003d price;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public Optional\u003cPrice\u003e getPrice() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return Optional.ofNullable(price);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        public void setCategory(Category category) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            this.category \u003d category;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        public Optional\u003cCategory\u003e getCategory() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return Optional.ofNullable(category);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "czkay"
        },
        "content": "        public void setTimestamp(Timestamp timestamp) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "czkay"
        },
        "content": "            this.timestamp \u003d timestamp;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "czkay"
        },
        "content": "        public Optional\u003cTimestamp\u003e getTimestamp() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "czkay"
        },
        "content": "            return Optional.ofNullable(timestamp);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (!(other instanceof EditExpenseDescriptor)) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            EditExpenseDescriptor e \u003d (EditExpenseDescriptor) other;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    \u0026\u0026 getPrice().equals(e.getPrice())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    \u0026\u0026 getCategory().equals(e.getCategory())"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    \u0026\u0026 getTimestamp().equals(e.getTimestamp());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 64,
      "czkay": 15,
      "qweiping31415": 14,
      "anqichen9856": 2,
      "-": 106,
      "ryoarmanda": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/expense/FindExpenseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.commands.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandGroup;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.UndoableCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.expense.ExpenseListPanel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Finds and lists all expenses in MooLah whose description contains any of the argument keywords."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class FindExpenseCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\" + CommandGroup.EXPENSE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all expenses whose descriptions contain any of \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final DescriptionContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public FindExpenseCommand(DescriptionContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    protected void validate(Model model) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        // No validation necessary."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    protected CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        model.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                String.format(Messages.MESSAGE_EXPENSES_LISTED_OVERVIEW, model.getFilteredExpenseList().size()),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                ExpenseListPanel.PANEL_NAME);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                || (other instanceof FindExpenseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindExpenseCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 16,
      "anqichen9856": 1,
      "-": 29,
      "ryoarmanda": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/expense/ListExpenseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.commands.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandGroup;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.GenericCommandWord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.UndoableCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.expense.ExpenseListPanel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Lists all expenses in the MooLah to the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class ListExpenseCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String COMMAND_WORD \u003d GenericCommandWord.LIST + CommandGroup.EXPENSE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all expenses\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    protected void validate(Model model) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        // No validation necessary."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    protected CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        model.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, ExpenseListPanel.PANEL_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 12,
      "anqichen9856": 1,
      "-": 15,
      "ryoarmanda": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/general/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandGroup;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.panel.PanelName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\" + CommandGroup.GENERAL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting MooLah as requested ...\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    protected void validate(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        // No validation necessary."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    protected CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, null, false, true, PanelName.CURRENT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 7,
      "anqichen9856": 1,
      "-": 14,
      "ryoarmanda": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/general/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandGroup;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.panel.PanelName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\" + CommandGroup.GENERAL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    protected void validate(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        // No validation necessary."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    protected CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, null, true, false, PanelName.CURRENT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 7,
      "-": 17,
      "ryoarmanda": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/statistics/StatsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.commands.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandGroup;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.panel.PanelName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Calculates statistics for Moolah"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public class StatsCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stats\" + CommandGroup.GENERAL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Pie Chart calculated!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            + \": Calculates statistics between the Start Date and End Date \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            + \"[\" + PREFIX_START_DATE + \"START_DATE] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            + \"[\" + PREFIX_END_DATE + \"END_DATE] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            + PREFIX_START_DATE + \"11-11-1111 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            + PREFIX_END_DATE + \"12-12-1212 \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private final Timestamp startDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private final Timestamp endDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Creates an StatsCommand to calculate statistics between 2 dates {@code Timestamp}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public StatsCommand(Timestamp startDate, Timestamp endDate) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        requireNonNull(startDate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        requireNonNull(endDate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    protected void validate(Model model) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        Statistics statistics \u003d model.calculateStatistics(COMMAND_WORD, startDate, endDate, null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, statistics, false, false, PanelName.CURRENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return other \u003d\u003d this //short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                || (other instanceof StatsCommand // instance of handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \u0026\u0026 startDate.equals(((StatsCommand) other).startDate)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \u0026\u0026 endDate.equals(((StatsCommand) other).endDate));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "briyanii": 7,
      "qweiping31415": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/statistics/StatsCompareCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.commands.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FIRST_START_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERIOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SECOND_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandGroup;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.panel.PanelName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Calculates comparison statistics for Moolah"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public class StatsCompareCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"statscompare\" + CommandGroup.GENERAL;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Statistics Comparison Calculated!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            + \": Compare statistics between two time periods\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            + \"[\" + PREFIX_FIRST_START_DATE + \"START_DATE] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            + \"[\" + PREFIX_SECOND_START_DATE + \"END_DATE] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            + PREFIX_PERIOD + \"month\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            + PREFIX_FIRST_START_DATE + \"11-11-1111 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            + PREFIX_SECOND_START_DATE + \"12-12-1212 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            + PREFIX_PERIOD + \"month\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private final Timestamp firstStartDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private final Timestamp secondStartDate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private final Period period;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public StatsCompareCommand(Timestamp date1, Timestamp date2, Period period) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        requireNonNull(date1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        requireNonNull(date2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        requireNonNull(period);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.firstStartDate \u003d date1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.secondStartDate \u003d date2;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    protected void validate(Model model) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        Statistics statistics \u003d model.calculateStatistics(COMMAND_WORD, firstStartDate , secondStartDate, period);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, statistics, false, false, PanelName.CURRENT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return other \u003d\u003d this //short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                || (other instanceof StatsCompareCommand // instance of handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \u0026\u0026 firstStartDate.equals(((StatsCompareCommand) other).firstStartDate)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \u0026\u0026 secondStartDate.equals(((StatsCompareCommand) other).secondStartDate)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \u0026\u0026 period.equals(((StatsCompareCommand) other).period));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "briyanii": 7,
      "qweiping31415": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ui/ViewPanelCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.commands.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandGroup;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.panel.PanelName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Changes the currently viewed panel in the MainWindow\u0027s PanelView."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class ViewPanelCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\" + CommandGroup.GENERAL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Navigates to the specified GUI panel. \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + \"PARAMETERS: \u003cPanel Name\u003e \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + \"EXAMPLE: view Budget List \\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Viewing: %s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String SHOW_AVAILABLE_PANELS \u003d \"Here are the panels that you may view:\\n%s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private PanelName panelName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ViewPanelCommand(PanelName panelName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.panelName \u003d panelName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!(obj instanceof ViewPanelCommand)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        ViewPanelCommand otherViewPanelCommand \u003d (ViewPanelCommand) obj;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return otherViewPanelCommand.panelName.equals(panelName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    protected void validate(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // No need to validate as model is not affected."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    protected CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new CommandResult(\"Now Showing: \" + panelName.toString(), null, false, false, panelName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 51,
      "qweiping31415": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddAliasCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALIAS_ALIAS_INPUT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALIAS_ALIAS_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.Alias;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.alias.AddAliasCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Parses input arguments and creates a new AddExpenseCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class AddAliasCommandParser implements Parser\u003cAddAliasCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final List\u003cPrefix\u003e REQUIRED_PREFIXES \u003d Collections.unmodifiableList(List.of("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            PREFIX_ALIAS_ALIAS_NAME, PREFIX_ALIAS_ALIAS_INPUT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    ));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final List\u003cPrefix\u003e OPTIONAL_PREFIXES \u003d Collections.unmodifiableList(List.of());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddExpenseCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * and returns an AddExpenseCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public AddAliasCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ALIAS_ALIAS_INPUT, PREFIX_ALIAS_ALIAS_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ALIAS_ALIAS_NAME, PREFIX_ALIAS_ALIAS_INPUT)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAliasCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Optional\u003cString\u003e aliasName \u003d argMultimap.getValue(PREFIX_ALIAS_ALIAS_NAME);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Optional\u003cString\u003e aliasInputMapping \u003d argMultimap.getValue(PREFIX_ALIAS_ALIAS_INPUT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (aliasName.isEmpty() || aliasInputMapping.isEmpty() || aliasName.get().isEmpty()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                || aliasInputMapping.get().isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAliasCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Alias alias \u003d ParserUtil.parseAlias(aliasName.get(), aliasInputMapping.get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new AddAliasCommand(alias);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 63,
      "czkay": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddBudgetCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERIOD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.budget.AddBudgetCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.BudgetPeriod;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Price;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Parses input arguments and creates a new BudgetCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class AddBudgetCommandParser implements Parser\u003cAddBudgetCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final List\u003cPrefix\u003e REQUIRED_PREFIXES \u003d Collections.unmodifiableList(List.of("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            PREFIX_DESCRIPTION, PREFIX_START_DATE, PREFIX_PERIOD, PREFIX_PRICE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    ));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final List\u003cPrefix\u003e OPTIONAL_PREFIXES \u003d Collections.unmodifiableList(List.of());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the BudgetCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * and returns a BudgetCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public AddBudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_START_DATE, PREFIX_PERIOD, PREFIX_PRICE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_START_DATE, PREFIX_PERIOD, PREFIX_PRICE)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddBudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Price amount \u003d ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Timestamp startDate \u003d ParserUtil.parseTimestamp(argMultimap.getValue(PREFIX_START_DATE).get()).toStartOfDay();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        BudgetPeriod period \u003d ParserUtil.parsePeriod(argMultimap.getValue(PREFIX_PERIOD).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Budget budget \u003d new Budget(description, amount, startDate, period);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return new AddBudgetCommand(budget);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "briyanii": 9,
      "czkay": 1,
      "anqichen9856": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddEventCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_REPEATED_PREFIX_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.event.AddEventCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESTAMP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.event.AddEventCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.Timekeeper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Event;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Price;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Parses input arguments and creates a new AddExpenseCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class AddEventCommandParser implements Parser\u003cAddEventCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final List\u003cPrefix\u003e REQUIRED_PREFIXES \u003d Collections.unmodifiableList(List.of("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            PREFIX_DESCRIPTION, PREFIX_PRICE, PREFIX_CATEGORY, PREFIX_TIMESTAMP"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    ));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final List\u003cPrefix\u003e OPTIONAL_PREFIXES \u003d Collections.unmodifiableList(List.of());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddExpenseCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * and returns an AddExpenseCommand object for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public AddEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_PRICE, PREFIX_CATEGORY, PREFIX_TIMESTAMP);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_PRICE, PREFIX_CATEGORY)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                            MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (hasRepeatedPrefixes(argMultimap, PREFIX_DESCRIPTION, PREFIX_PRICE, PREFIX_CATEGORY, PREFIX_TIMESTAMP)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new ParseException(MESSAGE_REPEATED_PREFIX_COMMAND);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Price price \u003d ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Category category \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        boolean isTimestampPresent \u003d argMultimap.getValue(PREFIX_TIMESTAMP).isPresent();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (isTimestampPresent) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            Timestamp timestamp \u003d ParserUtil.parseTimestamp(argMultimap.getValue(PREFIX_TIMESTAMP).get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (Timekeeper.isFutureTimestamp(timestamp)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                Event event \u003d new Event(description, price, category, timestamp, null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                return new seedu.address.logic.commands.event.AddEventCommand(event);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                throw new ParseException(\"Event must occur in the future\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new ParseException(\"Event must occur in the future\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns true if none of the prefixes are repeated"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static boolean hasRepeatedPrefixes(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return !(Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getAllValues(prefix).size() \u003c\u003d 1));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddExpenseCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_REPEATED_PREFIX_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.expense.AddExpenseCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESTAMP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.AddExpenseCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.Timekeeper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Price;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.util.UniqueIdentifierGenerator;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Parses input arguments and creates a new AddExpenseCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class AddExpenseCommandParser implements Parser\u003cAddExpenseCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final List\u003cPrefix\u003e REQUIRED_PREFIXES \u003d Collections.unmodifiableList(List.of("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            PREFIX_DESCRIPTION, PREFIX_PRICE, PREFIX_CATEGORY"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    ));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final List\u003cPrefix\u003e OPTIONAL_PREFIXES \u003d Collections.unmodifiableList(List.of("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            PREFIX_TIMESTAMP"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    ));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddExpenseCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * and returns an AddExpenseCommand object for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public AddExpenseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_PRICE, PREFIX_CATEGORY, PREFIX_TIMESTAMP);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_PRICE, PREFIX_CATEGORY)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (hasRepeatedPrefixes(argMultimap, PREFIX_DESCRIPTION, PREFIX_PRICE, PREFIX_CATEGORY, PREFIX_TIMESTAMP)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new ParseException(MESSAGE_REPEATED_PREFIX_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Price price \u003d ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Category category \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        boolean isTimestampPresent \u003d argMultimap.getValue(PREFIX_TIMESTAMP).isPresent();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (isTimestampPresent) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            Timestamp timestamp \u003d ParserUtil.parseTimestamp(argMultimap.getValue(PREFIX_TIMESTAMP).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (Timekeeper.isFutureTimestamp(timestamp)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                throw new ParseException(\"Expense cannot be in the future\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            Expense expense \u003d new Expense(description, price, category, timestamp,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    UniqueIdentifierGenerator.generateRandomUniqueIdentifier());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return new AddExpenseCommand(expense);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            Expense expense \u003d new Expense(description, price, category,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    UniqueIdentifierGenerator.generateRandomUniqueIdentifier());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return new AddExpenseCommand(expense);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns true if none of the prefixes are repeated"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static boolean hasRepeatedPrefixes(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return !(Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getAllValues(prefix).size() \u003c\u003d 1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return getValue(new Prefix(\"\", \"no argument description\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new Prefix(\"\", \"no argument description\"), 0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new Prefix(\"\", \"no argument description\"), argsString.length());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 4,
      "-": 146
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\", \"description\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Prefix PREFIX_PRICE \u003d new Prefix(\"p/\", \"amount\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"c/\", \"category\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Prefix PREFIX_PERIOD \u003d new Prefix(\"pr/\", \"period\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final Prefix PREFIX_TIMESTAMP \u003d new Prefix(\"t/\", \"date\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Prefix PREFIX_START_DATE \u003d new Prefix(\"sd/\", \"start date\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Prefix PREFIX_END_DATE \u003d new Prefix(\"ed/\", \"end date\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Prefix PREFIX_FIRST_START_DATE \u003d new Prefix(\"sd1/\", \"start date1\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Prefix PREFIX_SECOND_START_DATE \u003d new Prefix(\"sd2/\", \"start date2\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Prefix PREFIX_ALIAS_ALIAS_NAME \u003d new Prefix(\"a/\", \"alias name\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Prefix PREFIX_ALIAS_ALIAS_INPUT \u003d new Prefix(\"i/\", \"alias input\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "briyanii": 10,
      "czkay": 1,
      "qweiping31415": 2,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteAliasCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.alias.DeleteAliasCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Parses input arguments and creates a new AddExpenseCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class DeleteAliasCommandParser implements Parser\u003cDeleteAliasCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final List\u003cPrefix\u003e REQUIRED_PREFIXES \u003d Collections.unmodifiableList(List.of());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final List\u003cPrefix\u003e OPTIONAL_PREFIXES \u003d Collections.unmodifiableList(List.of());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddExpenseCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * and returns an AddExpenseCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public DeleteAliasCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (args.trim().isBlank()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAliasCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new DeleteAliasCommand(args.trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteBudgetCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.budget.DeleteBudgetCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Parses input arguments and creates a new DeleteBudgetCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class DeleteBudgetCommandParser implements Parser\u003cDeleteBudgetCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteBudgetCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * and returns a DeleteBudgetCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public DeleteBudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return new DeleteBudgetCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteBudgetCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.DeleteExpenseCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteExpenseCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final List\u003cPrefix\u003e REQUIRED_PREFIXES \u003d Collections.unmodifiableList(List.of());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final List\u003cPrefix\u003e OPTIONAL_PREFIXES \u003d Collections.unmodifiableList(List.of());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public DeleteExpenseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return new DeleteExpenseCommand(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteExpenseCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 10,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteEventCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.logic.commands.event.DeleteEventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class DeleteEventCommandParser implements Parser\u003cDeleteEventCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public DeleteEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "            return new DeleteEventCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteEventCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteExpenseFromBudgetCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.budget.DeleteExpenseFromBudgetCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * dummy."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class DeleteExpenseFromBudgetCommandParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteExpenseFromBudgetCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * and returns a DeleteExpenseFromBudgetCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public DeleteExpenseFromBudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return new DeleteExpenseFromBudgetCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteExpenseFromBudgetCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditBudgetCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERIOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.budget.EditBudgetCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.budget.EditBudgetCommand.EditBudgetDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Parses input arguments and creates a new EditBudgetCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class EditBudgetCommandParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditBudgetCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * and returns an EditBudgetCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public EditBudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_PRICE, PREFIX_START_DATE, PREFIX_PERIOD);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditBudgetCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        EditBudgetDescriptor editBudgetDescriptor \u003d new EditBudgetDescriptor();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            editBudgetDescriptor.setDescription("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRICE).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            editBudgetDescriptor.setAmount("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE).get()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (argMultimap.getValue(PREFIX_START_DATE).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            editBudgetDescriptor.setStartDate("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    ParserUtil.parseTimestamp(argMultimap.getValue(PREFIX_START_DATE).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PERIOD).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            editBudgetDescriptor.setPeriod("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    ParserUtil.parsePeriod(argMultimap.getValue(PREFIX_PERIOD).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (!editBudgetDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new ParseException(EditBudgetCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return new EditBudgetCommand(index, editBudgetDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESTAMP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.EditExpenseCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.EditExpenseCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditExpenseCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final List\u003cPrefix\u003e REQUIRED_PREFIXES \u003d Collections.unmodifiableList(List.of());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final List\u003cPrefix\u003e OPTIONAL_PREFIXES \u003d Collections.unmodifiableList(List.of("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            PREFIX_DESCRIPTION, PREFIX_PRICE, PREFIX_CATEGORY, PREFIX_TIMESTAMP"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    ));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public EditExpenseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_PRICE, PREFIX_CATEGORY, PREFIX_TIMESTAMP);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditExpenseCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseDescriptor editExpenseDescriptor \u003d new EditExpenseDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            editExpenseDescriptor.setDescription("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRICE).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            editExpenseDescriptor.setPrice("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CATEGORY).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            editExpenseDescriptor.setCategory("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TIMESTAMP).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "czkay"
        },
        "content": "            editExpenseDescriptor.setTimestamp("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    ParserUtil.parseTimestamp(argMultimap.getValue(PREFIX_TIMESTAMP).get()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!editExpenseDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new ParseException(EditExpenseCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new EditExpenseCommand(index, editExpenseDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 23,
      "czkay": 5,
      "qweiping31415": 5,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditEventCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESTAMP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.logic.commands.event.EditEventCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.logic.commands.event.EditEventCommand.EditEventDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class EditEventCommandParser implements Parser\u003cEditEventCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditEventCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * and returns an EditEventCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public EditEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_PRICE, PREFIX_CATEGORY, PREFIX_TIMESTAMP);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czkay"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czkay"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditEventCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "czkay"
        },
        "content": "        EditEventDescriptor editEventDescriptor \u003d new EditEventDescriptor();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "czkay"
        },
        "content": "            editEventDescriptor.setDescription("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRICE).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "czkay"
        },
        "content": "            editEventDescriptor.setPrice("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CATEGORY).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "czkay"
        },
        "content": "            editEventDescriptor.setCategory("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TIMESTAMP).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "czkay"
        },
        "content": "            editEventDescriptor.setTimestamp("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    ParserUtil.parseTimestamp(argMultimap.getValue(PREFIX_TIMESTAMP).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (!editEventDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new ParseException(EditEventCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return new EditEventCommand(index, editEventDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "czkay": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditExpenseFromBudgetCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESTAMP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.budget.EditExpenseFromBudgetCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.EditExpenseCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Dummy."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class EditExpenseFromBudgetCommandParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditExpenseFromBudgetCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * and returns an EditExpenseFromBudgetCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public EditExpenseFromBudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_PRICE, PREFIX_CATEGORY, PREFIX_TIMESTAMP);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditExpenseFromBudgetCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseCommand.EditExpenseDescriptor editExpenseDescriptor \u003d new EditExpenseCommand.EditExpenseDescriptor();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            editExpenseDescriptor.setDescription("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRICE).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            editExpenseDescriptor.setPrice("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE).get()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CATEGORY).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            editExpenseDescriptor.setCategory("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TIMESTAMP).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            editExpenseDescriptor.setTimestamp("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    ParserUtil.parseTimestamp(argMultimap.getValue(PREFIX_TIMESTAMP).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (!editExpenseDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new ParseException(EditExpenseFromBudgetCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return new EditExpenseFromBudgetCommand(index, editExpenseDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 2,
      "anqichen9856": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.FindExpenseCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindExpenseCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final List\u003cPrefix\u003e REQUIRED_PREFIXES \u003d Collections.unmodifiableList(List.of());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final List\u003cPrefix\u003e OPTIONAL_PREFIXES \u003d Collections.unmodifiableList(List.of());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public FindExpenseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String[] descriptionKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new FindExpenseCommand(new DescriptionContainsKeywordsPredicate(Arrays.asList(descriptionKeywords)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 11,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Input.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.GenericCommandWord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Input to pass to parser."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class Input {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS_COMMAND_WORD \u003d \"(\\\\S+)\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private String commandWord;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private String arguments;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Input(String commandWord, String arguments) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(commandWord, arguments);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        checkArgument(isValidCommandWord(commandWord));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.commandWord \u003d commandWord;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static boolean isValidCommandWord(String commandWord) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return commandWord.matches(MESSAGE_CONSTRAINTS_COMMAND_WORD);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return commandWord;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public String getArguments() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return arguments;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean isGeneric() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return GenericCommandWord.isGeneric(commandWord);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MooLahParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.Alias;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.alias.AddAliasCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.alias.DeleteAliasCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.alias.ListAliasCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.budget.AddBudgetCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.budget.DeleteBudgetCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.budget.EditBudgetCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.budget.ListBudgetCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.budget.PastPeriodCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.budget.SwitchBudgetCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.event.AddEventCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.event.ListEventsCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.AddExpenseCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.ClearCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.DeleteExpenseCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.EditExpenseCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.FindExpenseCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.ListExpenseCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.general.ExitCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.statistics.StatsCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.statistics.StatsCompareCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.ui.ViewPanelCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class MooLahParser {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param commandGroup"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param readOnlyUserPrefs read only user preferences to check for aliases"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Command parseCommand(String userInput, String commandGroup, ReadOnlyUserPrefs readOnlyUserPrefs)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Input input \u003d ParserUtil.parseInput(userInput);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String commandWord;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (input.isGeneric()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            commandWord \u003d input.getCommandWord() + commandGroup;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            commandWord \u003d input.getCommandWord();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String arguments \u003d input.getArguments();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case AddEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return new AddEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case AddExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return new AddExpenseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case AddAliasCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return new AddAliasCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case DeleteAliasCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return new DeleteAliasCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case ListAliasCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return new ListAliasCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        case AddBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return new AddBudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case EditExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case DeleteExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        case EditBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return new EditBudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case FindExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case ListExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return new ListExpenseCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case ListEventsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return new ListEventsCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        case StatsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return new StatsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        case StatsCompareCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return new StatsCompareCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        case SwitchBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return new SwitchBudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        case ViewPanelCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return new ViewPanelCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        case ListBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return new ListBudgetCommand();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        case DeleteBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return new DeleteBudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        case PastPeriodCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return new PastPeriodCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // check if alias exists"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (readOnlyUserPrefs.hasAlias(commandWord)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                Alias alias \u003d readOnlyUserPrefs.getAlias(commandWord);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                return parseCommand(alias.getInput() + arguments, commandGroup, readOnlyUserPrefs);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 61,
      "qweiping31415": 5,
      "anqichen9856": 17,
      "-": 33,
      "ryoarmanda": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.Alias;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.BudgetPeriod;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.Percentage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Price;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Parses a {@code String price} into a {@code Price}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @throws ParseException if the given {@code price} is invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static Price parsePrice(String price) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String trimmedPrice \u003d price.trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!Price.isValidPrice(trimmedPrice)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new ParseException(Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new Price(trimmedPrice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Parses a {@code String category} into a {@code Category}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @throws ParseException if the given {@code category} is invalid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static Category parseCategory(String category) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        String trimmedCategory \u003d category.trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        if (!Category.isValidCategoryName(trimmedCategory)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            throw new ParseException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return new Category(trimmedCategory);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Parses {@code String aliasName} and {@code String input} into a user defined {@code Alias}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @throws ParseException if the given {@code aliasName} is invalid."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static Alias parseAlias(String aliasName, String input) throws ParseException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!Alias.isValidAliasName(aliasName)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new ParseException(Alias.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!Alias.isValidInput(input)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new ParseException(Alias.MESSAGE_INPUT_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new Alias(aliasName, input);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Parses a {@code String timestamp} into a {@code Timestamp}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @throws ParseException if the given {@code timestamp} is invalid."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static Timestamp parseTimestamp(String timestamp) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireNonNull(timestamp);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "czkay"
        },
        "content": "        String trimmedTimestamp \u003d timestamp.trim();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Optional\u003cTimestamp\u003e potentialTimestamp \u003d Timestamp.createTimestampIfValid(trimmedTimestamp);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (potentialTimestamp.isPresent()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "czkay"
        },
        "content": "            return potentialTimestamp.get();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "czkay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new ParseException(Timestamp.MESSAGE_CONSTRAINTS_DATE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Dummy."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param percentage"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static Percentage parsePercentage(String percentage) throws ParseException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(percentage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        String trimmedPercentage \u003d percentage.trim();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        String proportionString \u003d trimmedPercentage.substring(0, percentage.length() - 1);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            int proportion \u003d Integer.parseInt(proportionString);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            if (!Percentage.isValidPercentage(proportion)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                throw new ParseException(Percentage.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return new Percentage(proportion);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new ParseException(Percentage.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Parses {@code String period} into a {@code BudgetPeriod}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @throws ParseException if the given {@code period} is invalid."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static BudgetPeriod parsePeriod(String period) throws ParseException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        String trimmedPeriod \u003d period.trim();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        switch (trimmedPeriod) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        case \"day\":"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return BudgetPeriod.DAY;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        case \"week\":"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return BudgetPeriod.WEEK;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        case \"month\":"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return BudgetPeriod.MONTH;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        case \"year\":"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return BudgetPeriod.YEAR;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        case \"infinity\":"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return BudgetPeriod.INFINITY;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new ParseException(Timestamp.MESSAGE_CONSTRAINTS_PERIOD);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Parses user input into Input with a command word and argument attributes."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param input the user input to parse"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return The Input with the command word and arguments"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @throws ParseException if invalid format"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static Input parseInput(String input) throws ParseException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        final Matcher matcher \u003d Input.BASIC_COMMAND_FORMAT.matcher(input.trim());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new Input(commandWord, arguments);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 46,
      "czkay": 10,
      "qweiping31415": 10,
      "anqichen9856": 43,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PastPeriodCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESTAMP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.budget.PastPeriodCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Parses input arguments and creates a new PastPeriodCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class PastPeriodCommandParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the PastPeriodCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * and returns a PastPeriodCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public PastPeriodCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TIMESTAMP);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TIMESTAMP)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, PastPeriodCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Timestamp pastDate \u003d ParserUtil.parseTimestamp(argMultimap.getValue(PREFIX_TIMESTAMP).get()).toStartOfDay();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return new PastPeriodCommand(pastDate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final String descriptionOfArgument;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final boolean isMandatory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Prefix(String prefix, String descriptionOfArgument) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.descriptionOfArgument \u003d descriptionOfArgument;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.isMandatory \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public String getDescriptionOfArgument() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return descriptionOfArgument;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 9,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/StatsCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_REPEATED_PREFIX_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.statistics.StatsCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Parses input arguments and creates a new StatsCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public class StatsCommandParser implements Parser\u003cStatsCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final List\u003cPrefix\u003e REQUIRED_PREFIXES \u003d Collections.unmodifiableList(List.of("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            PREFIX_START_DATE, PREFIX_END_DATE"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    ));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final List\u003cPrefix\u003e OPTIONAL_PREFIXES \u003d Collections.unmodifiableList(List.of());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StatsCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * and returns an StatsCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public StatsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_START_DATE, PREFIX_END_DATE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        if (hasRepeatedPrefixes(argMultimap, PREFIX_START_DATE, PREFIX_END_DATE)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            throw new ParseException(MESSAGE_REPEATED_PREFIX_COMMAND);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        Timestamp startDate \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        Timestamp endDate \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        boolean isStartPresent \u003d argMultimap.getValue(PREFIX_START_DATE).isPresent();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        boolean isEndPresent \u003d argMultimap.getValue(PREFIX_END_DATE).isPresent();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        if (isStartPresent \u0026\u0026 isEndPresent) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            checkStartBeforeEnd(argMultimap);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            startDate \u003d ParserUtil.parseTimestamp(argMultimap.getValue(PREFIX_START_DATE).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            endDate \u003d ParserUtil.parseTimestamp(argMultimap.getValue(PREFIX_END_DATE).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        } else if (isStartPresent) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            startDate \u003d ParserUtil.parseTimestamp(argMultimap.getValue(PREFIX_START_DATE).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            endDate \u003d startDate.createForwardTimestamp();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        } else if (isEndPresent) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            endDate \u003d ParserUtil.parseTimestamp(argMultimap.getValue(PREFIX_END_DATE).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            startDate \u003d endDate.createBackwardTimestamp();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            endDate \u003d Timestamp.getCurrentTimestamp();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            startDate \u003d endDate.createBackwardTimestamp();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return new StatsCommand(startDate, endDate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StatsCommand"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Checks that start date is before the end date of the given {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @throws ParseException if the detected start date is after the end date"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private void checkStartBeforeEnd(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        Timestamp startDate \u003d ParserUtil.parseTimestamp(argMultimap.getValue(PREFIX_START_DATE).get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        Timestamp endDate \u003d ParserUtil.parseTimestamp(argMultimap.getValue(PREFIX_END_DATE).get());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        if (endDate.isBefore(startDate)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            throw new ParseException(Statistics.MESSAGE_CONSTRAINTS_END_DATE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Returns true if none of the prefixes are repeated"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private static boolean hasRepeatedPrefixes(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return !(Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getAllValues(prefix).size() \u003c\u003d 1));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 9,
      "qweiping31415": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/StatsCompareCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_REPEATED_PREFIX_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FIRST_START_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERIOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SECOND_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.statistics.StatsCompareCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Parses input arguments and creates a new StatsCompareCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public class StatsCompareCommandParser implements Parser\u003cStatsCompareCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final List\u003cPrefix\u003e REQUIRED_PREFIXES \u003d Collections.unmodifiableList("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            List.of(PREFIX_FIRST_START_DATE, PREFIX_SECOND_START_DATE, PREFIX_PERIOD)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    );"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final List\u003cPrefix\u003e OPTIONAL_PREFIXES \u003d Collections.unmodifiableList(List.of());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StatsCompareCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * and returns an StatsCompareCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public StatsCompareCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_FIRST_START_DATE, PREFIX_SECOND_START_DATE, PREFIX_PERIOD);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_FIRST_START_DATE, PREFIX_SECOND_START_DATE, PREFIX_PERIOD)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatsCompareCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        if (hasRepeatedPrefixes(argMultimap, PREFIX_FIRST_START_DATE, PREFIX_SECOND_START_DATE, PREFIX_PERIOD)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            throw new ParseException(MESSAGE_REPEATED_PREFIX_COMMAND);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        Timestamp startDate1 \u003d ParserUtil.parseTimestamp(argMultimap.getValue(PREFIX_FIRST_START_DATE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        Timestamp startDate2 \u003d ParserUtil.parseTimestamp(argMultimap.getValue(PREFIX_SECOND_START_DATE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Period period \u003d ParserUtil.parsePeriod(argMultimap.getValue(PREFIX_PERIOD).get()).getPeriod();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return new StatsCompareCommand(startDate1, startDate2, period);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Returns true if at least one prefix have more than one usage"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * {@code ArgumentMultiMap}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private static boolean hasRepeatedPrefixes(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return !(Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getAllValues(prefix).size() \u003c\u003d 1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "briyanii": 9,
      "qweiping31415": 61,
      "anqichen9856": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SwitchBudgetCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.budget.SwitchBudgetCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Parses input arguments and creates a new SwitchBudgetCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class SwitchBudgetCommandParser implements Parser\u003cSwitchBudgetCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final List\u003cPrefix\u003e REQUIRED_PREFIXES \u003d Collections.unmodifiableList(List.of(PREFIX_DESCRIPTION));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final List\u003cPrefix\u003e OPTIONAL_PREFIXES \u003d Collections.unmodifiableList(List.of());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddExpenseCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * and returns an AddExpenseCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public SwitchBudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchBudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Description targetDescription \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return new SwitchBudgetCommand(targetDescription);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 6,
      "czkay": 2,
      "anqichen9856": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewPanelCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.ui.ViewPanelCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.panel.PanelName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Parses input arguments to create a new ViewPanelCommand."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class ViewPanelCommandParser implements Parser\u003cViewPanelCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewPanelCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * and returns an ViewPanelCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ViewPanelCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (userInput.isBlank()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewPanelCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!PanelName.isValidPanelName(userInput.trim())) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new ParseException(String.format(PanelName.MESSAGE_NAME_FORMAT, userInput));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new ViewPanelCommand(new PanelName(userInput.trim()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.Alias;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.AliasMappings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    Predicate\u003cExpense\u003e PREDICATE_SHOW_ALL_EXPENSES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "    Predicate\u003cEvent\u003e PREDICATE_SHOW_ALL_EVENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    Predicate\u003cBudget\u003e PREDICATE_SHOW_ALL_BUDGETS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Resets data to the given model."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    void resetData(Model model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MODEL HISTORY \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Returns the model history."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    ReadOnlyModelHistory getModelHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Replaces model history with the data in {@code history}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    void setModelHistory(ReadOnlyModelHistory history);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Adds the current model to the history."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    void addToHistory();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Adds a to the past history."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    void addToPastHistory(Model model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Adds a to the future history."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    void addToFutureHistory(Model model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Checks whether model can be rolled-back."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    boolean canRollback();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Returns the rolled-back version of the model to the immediate previous state."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    Optional\u003cModel\u003e rollbackModel();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Checks whether model can be migrated."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    boolean canMigrate();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Returns the migrated version of the model to the immediate next state."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    Optional\u003cModel\u003e migrateModel();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d USER PREFS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d GUI SETTINGS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ALIAS SETTINGS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Return\u0027s the user prefs\u0027 alias mappings."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    AliasMappings getAliasMappings();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Sets the user prefs\u0027 alias mappings."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void setAliasMappings(AliasMappings aliasMappings);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Add a user defined alias to the user prefs\u0027 alias mappings."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void addUserAlias(Alias alias);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Removes an alias with the given name if it exists, and returns true, otherwise return false."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    boolean removeAliasWithName(String aliasName);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    boolean aliasWithNameExists(String aliasName);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MOOLAH SETTINGS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Returns the user prefs\u0027 MooLah file path."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    Path getMooLahFilePath();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Sets the user prefs\u0027 MooLah file path."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    void setMooLahFilePath(Path mooLahFilePath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /** Returns the MooLah */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    ReadOnlyMooLah getMooLah();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Replaces MooLah data with the data in {@code mooLah}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    void setMooLah(ReadOnlyMooLah mooLah);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MOOLAH ACTIONS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns true if a expense with the same identity as {@code expense}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * exists in the MooLah."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    boolean hasExpense(Expense expense);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Deletes the given expense."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * The expense must exist in the MooLah."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void deleteExpense(Expense target);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Adds the given expense."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * {@code expense} must not already exist in the MooLah."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void addExpense(Expense expense);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Replaces the given expense {@code target} with {@code editedExpense}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * {@code target} must exist in the MooLah."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * The expense identity of {@code editedExpense} must not be the same as another"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * existing expense in the MooLah."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void setExpense(Expense target, Expense editedExpense);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    boolean hasBudget(Budget budget);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    boolean hasBudgetWithName(Description targetDescription);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    Budget getPrimaryBudget();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    void addBudget(Budget budget);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    void switchBudgetTo(Description description);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    void deleteBudget(Budget target);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    void setBudget(Budget target, Budget editedBudget);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    void changePrimaryBudgetWindow(Timestamp pastDate);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /** Returns an unmodifiable view of the filtered expense list */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    ObservableList\u003cBudget\u003e getFilteredBudgetList();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    void updateFilteredBudgetList(Predicate\u003c? super Budget\u003e budget);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    Predicate\u003c? super Budget\u003e getFilteredBudgetPredicate();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /** Returns an unmodifiable view of the filtered expense list */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    ObservableList\u003cExpense\u003e getFilteredExpenseList();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /** Returns the predicate of the filtered expense list. **/"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    Predicate\u003c? super Expense\u003e getFilteredExpensePredicate();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Updates the filter of the filtered expense list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    void updateFilteredExpenseList(Predicate\u003c? super Expense\u003e predicate);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /** Returns an unmodifiable view of the filtered expense list */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "czkay"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredEventList();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /** Returns the predicate of the filtered expense list */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    Predicate\u003c? super Event\u003e getFilteredEventPredicate();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Updates the filter of the filtered expense list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    void updateFilteredEventList(Predicate\u003c? super Event\u003e predicate);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "czkay"
        },
        "content": "    void notifyAboutTranspiredEvents(List\u003cEvent\u003e events);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "czkay"
        },
        "content": "    boolean hasEvent(Event event);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "czkay"
        },
        "content": "    void addEvent(Event event);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "czkay"
        },
        "content": "    void deleteEvent(Event target);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "czkay"
        },
        "content": "    void setEvent(Event eventToEdit, Event editedEvent);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    Statistics calculateStatistics(String command, Timestamp date1, Timestamp date2, Period period);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    boolean hasStatistic();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    StringBuilder getStatistic();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 23,
      "briyanii": 33,
      "qweiping31415": 9,
      "anqichen9856": 39,
      "-": 70,
      "ryoarmanda": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": " * A history of models throughout execution, to facilitate easy rollback and migration."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class ModelHistory implements ReadOnlyModelHistory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private Stack\u003cModel\u003e pastModels;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private Stack\u003cModel\u003e futureModels;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public ModelHistory(Stack\u003cModel\u003e pastModels, Stack\u003cModel\u003e futureModels) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        setPastModels(pastModels);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        setFutureModels(futureModels);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public ModelHistory() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this(new Stack\u003c\u003e(), new Stack\u003c\u003e());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Copy constructor for ModelHistory."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public ModelHistory(ReadOnlyModelHistory history) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this(history.getPastModels(), history.getFutureModels());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Replaces model history data with the given history."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void resetData(ReadOnlyModelHistory history) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        setPastModels(history.getPastModels());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        setFutureModels(history.getFutureModels());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public Stack\u003cModel\u003e getPastModels() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return pastModels;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public Stack\u003cModel\u003e getFutureModels() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return futureModels;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void setPastModels(Stack\u003cModel\u003e pastModels) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        requireNonNull(pastModels);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.pastModels \u003d (Stack\u003cModel\u003e) pastModels.clone();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void setFutureModels(Stack\u003cModel\u003e futureModels) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        requireNonNull(futureModels);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.futureModels \u003d (Stack\u003cModel\u003e) futureModels.clone();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Adds the copy of a model to the past models history."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void addToPastModels(Model model) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        pastModels.push(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Adds the copy of a model to the future models history."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void addToFutureModels(Model model) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        futureModels.push(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Clears future models history."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void clearFutureModels() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        futureModels.clear();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Checks whether there are no past models."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public boolean isPastModelsEmpty() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return pastModels.isEmpty();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Checks whether there are no future models."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public boolean isFutureModelsEmpty() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return futureModels.isEmpty();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Returns the previous model in history, if exists."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public Optional\u003cModel\u003e getPrevModel() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        if (isPastModelsEmpty()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        Model prevModel \u003d pastModels.pop();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return Optional.of(prevModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Returns the next model in history, if exists."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public Optional\u003cModel\u003e getNextModel() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        if (isFutureModelsEmpty()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        Model nextModel \u003d futureModels.pop();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return Optional.of(nextModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        if (!(obj instanceof ModelHistory)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        ModelHistory other \u003d (ModelHistory) obj;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return pastModels.equals(other.pastModels)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                \u0026\u0026 futureModels.equals(other.futureModels);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return String.format(\"%d past and %d future models\", pastModels.size(), futureModels.size());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 140
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.Alias;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.AliasMappings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.exceptions.RecursiveAliasException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Represents the in-memory model of the MooLah data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final MooLah mooLah;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private final ModelHistory modelHistory;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final FilteredList\u003cExpense\u003e filteredExpenses;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private final FilteredList\u003cEvent\u003e filteredEvents;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final FilteredList\u003cBudget\u003e filteredBudgets;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private StringBuilder statsBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Initializes a ModelManager with the given mooLah and userPrefs."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public ModelManager(ReadOnlyMooLah mooLah, ReadOnlyUserPrefs userPrefs,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                        ReadOnlyModelHistory modelHistory) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireAllNonNull(mooLah, userPrefs, modelHistory);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        logger.fine(\"Initializing with MooLah: \" + mooLah + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.mooLah \u003d new MooLah(mooLah);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.modelHistory \u003d new ModelHistory(modelHistory);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        filteredEvents \u003d new FilteredList\u003c\u003e(this.mooLah.getEventList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        filteredExpenses \u003d new FilteredList\u003c\u003e(this.mooLah.getExpenseList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        filteredBudgets \u003d new FilteredList\u003c\u003e(this.mooLah.getBudgetList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this(new MooLah(), new UserPrefs(), new ModelHistory());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Copy constructor for ModelManager."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public ModelManager(Model model) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        resetData(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void resetData(Model model) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        setMooLah(model.getMooLah());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        setUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        setModelHistory(model.getModelHistory());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        if (model.getFilteredEventPredicate() !\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            updateFilteredEventList(model.getFilteredEventPredicate());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            updateFilteredEventList(model.PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        if (model.getFilteredExpensePredicate() !\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            updateFilteredExpenseList(model.getFilteredExpensePredicate());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            updateFilteredExpenseList(model.PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (model.getFilteredBudgetPredicate() !\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            updateFilteredBudgetList(model.getFilteredBudgetPredicate());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            updateFilteredBudgetList(model.PREDICATE_SHOW_ALL_BUDGETS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ModelHistory \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public ReadOnlyModelHistory getModelHistory() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return modelHistory;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void setModelHistory(ReadOnlyModelHistory modelHistory) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        requireNonNull(modelHistory);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        this.modelHistory.resetData(modelHistory);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void addToHistory() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        modelHistory.addToPastModels(new ModelManager(this));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        modelHistory.clearFutureModels();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void addToPastHistory(Model model) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        modelHistory.addToPastModels(new ModelManager(model));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void addToFutureHistory(Model model) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        modelHistory.addToFutureModels(new ModelManager(model));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public boolean canRollback() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return !modelHistory.isPastModelsEmpty();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public Optional\u003cModel\u003e rollbackModel() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        Optional\u003cModel\u003e prevModel \u003d modelHistory.getPrevModel();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        if (prevModel.isEmpty()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        Model pastModel \u003d prevModel.get();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        pastModel.addToFutureHistory(this);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return Optional.of(pastModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public boolean canMigrate() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return !modelHistory.isFutureModelsEmpty();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public Optional\u003cModel\u003e migrateModel() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        Optional\u003cModel\u003e nextModel \u003d modelHistory.getNextModel();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        if (nextModel.isEmpty()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        Model futureModel \u003d nextModel.get();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        futureModel.addToPastHistory(this);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return Optional.of(futureModel);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Path getMooLahFilePath() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return userPrefs.getMooLahFilePath();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void setMooLahFilePath(Path mooLahFilePath) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(mooLahFilePath);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        userPrefs.setMooLahFilePath(mooLahFilePath);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AliasSettings \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public AliasMappings getAliasMappings() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return userPrefs.getAliasMappings();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setAliasMappings(AliasMappings aliasMappings) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(aliasMappings);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        userPrefs.setAliasMappings(aliasMappings);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void addUserAlias(Alias alias) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            userPrefs.addUserAlias(alias);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } catch (RecursiveAliasException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // should should be prevented by validation"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean aliasWithNameExists(String aliasName) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return userPrefs.hasAlias(aliasName);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean removeAliasWithName(String aliasName) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return userPrefs.removeAliasWithName(aliasName);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d GuiSettings \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Expense \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public ReadOnlyMooLah getMooLah() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return mooLah;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void setMooLah(ReadOnlyMooLah mooLah) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(mooLah);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.mooLah.resetData(mooLah);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return mooLah.hasExpense(expense);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void deleteExpense(Expense target) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        mooLah.removeExpense(target);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        mooLah.addExpense(expense);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireAllNonNull(target, editedExpense);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        mooLah.setExpense(target, editedExpense);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Budget \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean hasBudget(Budget budget) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return mooLah.hasBudget(budget);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void addBudget(Budget budget) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        mooLah.addBudget(budget);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean hasBudgetWithName(Description targetDescription) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return mooLah.hasBudgetWithName(targetDescription);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Budget getPrimaryBudget() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return mooLah.getPrimaryBudget();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void switchBudgetTo(Description targetDescription) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        mooLah.switchBudgetTo(targetDescription);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void deleteBudget(Budget target) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        mooLah.removeBudget(target);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void setBudget(Budget target, Budget editedBudget) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireAllNonNull(target, editedBudget);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        mooLah.setBudget(target, editedBudget);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void changePrimaryBudgetWindow(Timestamp pastDate) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireAllNonNull(pastDate);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        mooLah.changePrimaryBudgetWindow(pastDate);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void notifyAboutTranspiredEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return mooLah.hasEvent(event);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void deleteEvent(Event target) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        mooLah.removeEvent(target);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        mooLah.addEvent(event);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "czkay"
        },
        "content": "        updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void setEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireAllNonNull(target, editedEvent);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "czkay"
        },
        "content": "        mooLah.setEvent(target, editedEvent);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Statistics \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public Statistics calculateStatistics(String command, Timestamp date1, Timestamp date2, Period period) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        ObservableList\u003cExpense\u003e statsExpenses \u003d getFilteredExpenseList();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return Statistics.calculateStats(statsExpenses, command, date1, date2, period);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public boolean hasStatistic() {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return statsBuilder \u003d\u003d null;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public StringBuilder getStatistic() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return statsBuilder;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Expense List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Expense} backed by the internal list of"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * {@code versionedMooLah}"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return filteredExpenses;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public Predicate\u003c? super Expense\u003e getFilteredExpensePredicate() {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return filteredExpenses.getPredicate();"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void updateFilteredExpenseList(Predicate\u003c? super Expense\u003e predicate) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        filteredExpenses.setPredicate(predicate);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Event List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Expense} backed by the internal list of"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * {@code versionedMooLah}"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return filteredEvents;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public Predicate\u003c? super Event\u003e getFilteredEventPredicate() {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return filteredEvents.getPredicate();"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void updateFilteredEventList(Predicate\u003c? super Event\u003e predicate) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "czkay"
        },
        "content": "        filteredEvents.setPredicate(predicate);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Budget List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Expense} backed by the internal list of"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * {@code versionedMooLah}"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return filteredBudgets;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void updateFilteredBudgetList(Predicate\u003c? super Budget\u003e predicate) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        filteredBudgets.setPredicate(predicate);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Predicate\u003c? super Budget\u003e getFilteredBudgetPredicate() {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return filteredBudgets.getPredicate();"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return mooLah.equals(other.mooLah)"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "czkay"
        },
        "content": "                \u0026\u0026 filteredExpenses.equals(other.filteredExpenses)"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                \u0026\u0026 filteredEvents.equals(other.filteredEvents)"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                \u0026\u0026 modelHistory.equals(other.modelHistory);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 37,
      "briyanii": 52,
      "qweiping31415": 25,
      "anqichen9856": 81,
      "-": 148,
      "ryoarmanda": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/model/MooLah.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.UniqueBudgetList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.UniqueEventList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.UniqueExpenseList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Wraps all data at the MooLah level"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Duplicates are not allowed (by .isSameExpense comparison)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class MooLah implements ReadOnlyMooLah {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final UniqueExpenseList expenses;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final UniqueBudgetList budgets;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private final UniqueEventList events;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * sometimes used to avoid duplication"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * avoid duplication among constructors."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /*{"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expenses \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        budgets \u003d new UniqueBudgetList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (budgets.isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            Budget defaultBudget \u003d Budget.createDefaultBudget();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            defaultBudget.setPrimary();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            budgets.add(defaultBudget);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "czkay"
        },
        "content": "        events \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public MooLah() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        expenses \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        budgets \u003d new UniqueBudgetList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        budgets.add(Budget.createDefaultBudget());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        events \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Creates an MooLah using the Expenses in the {@code toBeCopied}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public MooLah(ReadOnlyMooLah toBeCopied) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Replaces the contents of the expense list with {@code expenses}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * {@code expenses} must not contain duplicate expenses."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setExpenses(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.expenses.setExpenses(expenses);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void setBudgets(List\u003cBudget\u003e budgets) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.budgets.setBudgets(budgets);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Replaces the contents of the expense list with {@code expenses}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * {@code expenses} must not contain duplicate expenses."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.events.setEvents(events);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Resets the existing data of this {@code MooLah} with {@code newData}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void resetData(ReadOnlyMooLah newData) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        setExpenses(newData.getExpenseList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        setBudgets(newData.getBudgetList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "czkay"
        },
        "content": "        setEvents(newData.getEventList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        resetBudgetExpenseLists();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Update expense list of all budgets as a result of UndoCommand on expenses."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private void resetBudgetExpenseLists() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        for (Budget b : budgets) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            b.clearExpenses();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        for (Expense e : expenses) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            Budget b \u003d budgets.getBudgetWithName(e.getBudgetName());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            if (b !\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                b.addExpense(e);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Expense-level operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Returns true if an expense with the same identity as {@code expense}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * exists in the MooLah."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return expenses.contains(expense);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Adds an expense to the MooLah."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * The expense must not already exist in the MooLah."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void addExpense(Expense p) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (p.getBudgetName() \u003d\u003d null) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            Budget primaryBudget \u003d budgets.getPrimaryBudget();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            p.setBudget(primaryBudget);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            primaryBudget.addExpense(p);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            primaryBudget.updateProportionUsed();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            Budget budget \u003d budgets.getBudgetWithName(p.getBudgetName());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            if (budget !\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                budget.addExpense(p);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                budget.updateProportionUsed();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        expenses.add(p);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Replaces the given expense {@code target} in the list with {@code editedExpense}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * {@code target} must exist in the MooLah."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * The expense identity of {@code editedExpense} must not be the same as another existing"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * expense in the MooLah."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(editedExpense);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expenses.setExpense(target, editedExpense);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        for (Budget budget : budgets) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            budget.setExpense(target, editedExpense);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Removes {@code key} from this {@code MooLah}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * {@code key} must exist in the MooLah."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void removeExpense(Expense key) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expenses.remove(key);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        for (Budget budget : budgets) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            budget.removeExpense(key);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Budget-level operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Returns true if a budget with the same identity as {@code budget}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * exists in Moolah."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean hasBudget(Budget budget) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return budgets.contains(budget);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Adds a budget to Moolah."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * The budget must not already exist in Moolah."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void addBudget(Budget budget) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        budgets.add(budget);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void addBudgetFromStorage(Budget budget) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        budgets.addBudgetFromStorage(budget);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Checks whether MooLah has a budget with the specified name."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param targetDescription The description (i.e. name) of the budget to check."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A boolean indicating whether the MooLah has such budget."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean hasBudgetWithName(Description targetDescription) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(targetDescription);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return budgets.hasBudgetWithName(targetDescription);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Budget getBudgetWithName(Description d) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return budgets.getBudgetWithName(d);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Returns the primary budget in the MooLah."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return The primary budget in the MooLah."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Budget getPrimaryBudget() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return budgets.getPrimaryBudget();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Switches the primary budget to the budget with the specified name."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param targetDescription The name of the budget to be switched to."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void switchBudgetTo(Description targetDescription) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Budget targetBudget \u003d budgets.getBudgetWithName(targetDescription);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        budgets.setPrimary(targetBudget);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    void setBudget(Budget target, Budget editedBudget) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(editedBudget);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        budgets.setBudget(target, editedBudget);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        for (Expense expense : expenses) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            expense.setBudget(editedBudget);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Removes Budget {@code key} from this {@code MooLah}."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * {@code key} must exist in the MooLah."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void removeBudget(Budget key) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        budgets.remove(key);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        for (Expense expense : expenses) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            expense.removeBudget();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Changes budget window of primary budget to a period in the past, as specified by the anchor date."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param pastDate The date to anchor the period."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void changePrimaryBudgetWindow(Timestamp pastDate) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(pastDate);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        budgets.changePrimaryBudgetWindow(pastDate);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event-level operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Returns true if an event with the same identity as {@code event}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * exists in the MooLah."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return events.contains(event);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Adds an event to the MooLah."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * The event must not already exist in the MooLah."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (budgets.isEmpty()) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "czkay"
        },
        "content": "            Budget defaultBudget \u003d Budget.createDefaultBudget();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "czkay"
        },
        "content": "            defaultBudget.setToPrimary();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "czkay"
        },
        "content": "            budgets.add(defaultBudget);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Budget primaryBudget \u003d budgets.getPrimaryBudget();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (event.getBudgetName() \u003d\u003d null) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "czkay"
        },
        "content": "            event.setBudget(primaryBudget);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "czkay"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Removes {@code key} from this {@code MooLah}."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * {@code key} must exist in the MooLah."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void removeEvent(Event key) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "czkay"
        },
        "content": "        events.remove(key);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Replaces the given event {@code target} in the list with {@code editedEvent}."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * {@code target} must exist in MooLah."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * The event identity of {@code editedEvent} must not be the same as another existing"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * expense in the MooLah."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void setEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireNonNull(editedEvent);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "czkay"
        },
        "content": "        events.setEvent(target, editedEvent);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "czkay"
        },
        "content": "        //        for (Budget budget : budgets) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "czkay"
        },
        "content": "        //            budget.setEvent(target, editedEvent);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "czkay"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return expenses.asUnmodifiableObservableList().size() + \" expenses\";"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ObservableList\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return expenses.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public ObservableList\u003cBudget\u003e getBudgetList() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return budgets.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public ObservableList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return events.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                || (other instanceof MooLah // instanceof handles nulls"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 expenses.equals(((MooLah) other).expenses));"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return expenses.hashCode();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 58,
      "briyanii": 29,
      "anqichen9856": 177,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyModelHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": " * Unmodifiable view of a model history."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public interface ReadOnlyModelHistory {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    Stack\u003cModel\u003e getPastModels();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    Stack\u003cModel\u003e getFutureModels();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyMooLah.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Unmodifiable view of a MooLah"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public interface ReadOnlyMooLah {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns an unmodifiable view of the expenses list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * This list will not contain any duplicate expenses."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    ObservableList\u003cExpense\u003e getExpenseList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    ObservableList\u003cBudget\u003e getBudgetList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "    ObservableList\u003cEvent\u003e getEventList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 2,
      "briyanii": 4,
      "anqichen9856": 5,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.Alias;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.AliasMappings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    Path getMooLahFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    AliasMappings getAliasMappings();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    Alias getAlias(String aliasName);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    boolean hasAlias(String aliasName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    boolean aliasNameIsReserved(Alias alias);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    boolean aliasCommandWordIsAlias(Alias alias);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 11,
      "anqichen9856": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Timekeeper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Reminder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Handles all comparisons between system time and the time fields of Expenses, Events and Budgets."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class Timekeeper {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final long UPPER_THRESHOLD \u003d 7;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private static Timestamp systemTime \u003d new Timestamp(LocalDateTime.now());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private ObservableList\u003cEvent\u003e events;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private List\u003cReminder\u003e reminders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private ObservableList\u003cBudget\u003e budgets;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public Timekeeper(Logic logic) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": "        events \u003d logic.getFilteredEventList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czkay"
        },
        "content": "        budgets \u003d logic.getMooLah().getBudgetList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Checks the system\u0027s time and updates the app\u0027s system time field to it."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void updateTime() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "czkay"
        },
        "content": "        systemTime \u003d new Timestamp(LocalDateTime.now());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "czkay"
        },
        "content": "        refreshBudgets();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Converts the Date object returned by Natty into a LocalDateTime object with 0 in both its"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * seconds and nanoseconds field."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param dateToConvert The Date object returned by Natty\u0027s parser."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @return The LocalDateTime object to be wrapped in a Timestamp."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static LocalDateTime convertToLocalDateTime(Date dateToConvert) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return dateToConvert.toInstant()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "czkay"
        },
        "content": "                .atZone(ZoneId.systemDefault())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "czkay"
        },
        "content": "                .toLocalDateTime()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "czkay"
        },
        "content": "                .withSecond(0)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "czkay"
        },
        "content": "                .withNano(0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Removes events with timestamps on this current day or before this current day. Returns these transpired events."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @return A list of transpired events."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public List\u003cEvent\u003e getTranspiredEvents() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "czkay"
        },
        "content": "        List\u003cEvent\u003e eventsToNotify \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "czkay"
        },
        "content": "        List\u003cEvent\u003e eventsToBeRemoved \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "czkay"
        },
        "content": "        for (Event event : events) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "czkay"
        },
        "content": "            Timestamp timestamp \u003d event.getTimestamp();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "czkay"
        },
        "content": "            if (hasTranspired(timestamp)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "czkay"
        },
        "content": "                eventsToBeRemoved.add(event);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "czkay"
        },
        "content": "                if (logic.hasBudgetWithName(event.getBudgetName())) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    eventsToNotify.add(event);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "czkay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "czkay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "czkay"
        },
        "content": "        logic.deleteTranspiredEvents(eventsToBeRemoved);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return eventsToNotify;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Creates then formats a list of reminders into a readable format."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @return The String of reminders."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public String displayReminders() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "czkay"
        },
        "content": "        for (Event event : events) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "czkay"
        },
        "content": "            Optional\u003cReminder\u003e potentialReminder \u003d createReminderIfValid(event);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "czkay"
        },
        "content": "            if (potentialReminder.isPresent()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "czkay"
        },
        "content": "                reminders.add(potentialReminder.get());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "czkay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "czkay"
        },
        "content": "        StringBuilder remindersMessage \u003d new StringBuilder(\"These are your upcoming events:\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "czkay"
        },
        "content": "        for (Reminder reminder: reminders) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "czkay"
        },
        "content": "            remindersMessage.append(\"\\n\" + reminder.toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return remindersMessage.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Dummy."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void refreshBudgets() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        for (Budget budget : budgets) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            budget.normalize(Timestamp.getCurrentTimestamp());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Given an Event, create an Optional Reminder which will contain a Reminder"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * if the Event is upcoming."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param event The Event which a Reminder may be made from."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @return An Optional Reminder which may contain a Reminder of the Event."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private static Optional\u003cReminder\u003e createReminderIfValid(Event event) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Timestamp timestamp \u003d event.getTimestamp();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "czkay"
        },
        "content": "        long daysLeft \u003d calculateDaysRemaining(timestamp);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return (isUrgent(timestamp)) ? Optional.of(new Reminder(event, daysLeft)) : Optional.empty();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Calculates how many days outdated the given timestamp is."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param timestamp The given timestamp."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @return How many days outdated the given timestamp is. Can be negative."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static String formatTimeOutdated(Timestamp timestamp) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "czkay"
        },
        "content": "        LocalDateTime temp \u003d systemTime.fullTimestamp;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "czkay"
        },
        "content": "        long daysLeft \u003d temp.until(timestamp.fullTimestamp, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "czkay"
        },
        "content": "        temp \u003d temp.plusDays(daysLeft);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "czkay"
        },
        "content": "        long hoursLeft \u003d temp.until(timestamp.fullTimestamp, ChronoUnit.HOURS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "czkay"
        },
        "content": "        temp \u003d temp.plusHours(hoursLeft);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "czkay"
        },
        "content": "        long minutesLeft \u003d temp.until(timestamp.fullTimestamp, ChronoUnit.MINUTES);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "czkay"
        },
        "content": "        String timeRemaining \u003d String.format(\"%d days, %d hours and %d minutes\","
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "czkay"
        },
        "content": "                Math.abs(daysLeft), Math.abs(hoursLeft), Math.abs(minutesLeft));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return timeRemaining;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private static long calculateDaysRemaining(Timestamp timestamp) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "czkay"
        },
        "content": "        long daysLeft \u003d systemTime.getFullTimestamp().until(timestamp.getFullTimestamp(), ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return daysLeft;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private static boolean isUrgent(Timestamp timestamp) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "czkay"
        },
        "content": "        long daysLeft \u003d calculateDaysRemaining(timestamp);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return daysLeft \u003c UPPER_THRESHOLD \u0026\u0026 !hasTranspired(timestamp);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private static boolean hasTranspired(Timestamp timestamp) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return timestamp.isBefore(systemTime);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static boolean isFutureTimestamp(Timestamp timestamp) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return timestamp.isAfter(systemTime);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 154,
      "anqichen9856": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.Alias;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.AliasMappings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.exceptions.RecursiveAliasException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private Path mooLahFilePath \u003d Paths.get(\"data\" , \"moolah.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private AliasMappings aliasMappings \u003d new AliasMappings();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        setMooLahFilePath(newUserPrefs.getMooLahFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        setAliasMappings(newUserPrefs.getAliasMappings());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Path getMooLahFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return mooLahFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void setMooLahFilePath(Path mooLahFilePath) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(mooLahFilePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.mooLahFilePath \u003d mooLahFilePath;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public AliasMappings getAliasMappings() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return aliasMappings;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setAliasMappings(AliasMappings aliasMappings) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(aliasMappings);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.aliasMappings \u003d aliasMappings;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean removeAliasWithName(String name) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return aliasMappings.removeAlias(name);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Add a user defined {@code Alias} to the user prefs\u0027 {@code AliasMappings}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param alias"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void addUserAlias(Alias alias) throws RecursiveAliasException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(alias);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.aliasMappings \u003d aliasMappings.addAlias(alias);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Alias getAlias(String aliasName) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(aliasName);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return this.aliasMappings.getAlias(aliasName);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean hasAlias(String aliasName) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return this.aliasMappings.aliasWithNameExists(aliasName);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns true if the {@code String aliasName} is a reserved command word, and false otherwise."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param alias"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean aliasNameIsReserved(Alias alias) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(alias);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return this.aliasMappings.aliasUsesReservedName(alias);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns true if the {@code String commandWord} of an {@code Alias} is an alias name mapped to an"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * existing {@code Alias}, and false otherwise."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param alias"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean aliasCommandWordIsAlias(Alias alias) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(alias);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return this.aliasMappings.aliasCommandWordIsAlias(alias);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 mooLahFilePath.equals(o.mooLahFilePath)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u0026\u0026 aliasMappings.equals(o.aliasMappings);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return Objects.hash(guiSettings, mooLahFilePath, aliasMappings);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + mooLahFilePath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 55,
      "anqichen9856": 10,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/model/budget/Budget.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Price;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Represents a Budget in MooLah."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class Budget {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final Description DEFAULT_BUDGET_DESCRIPTION \u003d new Description(\"Default Budget\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static final Price DEFAULT_BUDGET_AMOUNT \u003d Price.MAX_PRICE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static final Timestamp DEFAULT_BUDGET_START_DATE \u003d Timestamp.EARLIEST_TIMESTAMP;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static final BudgetPeriod DEFAULT_BUDGET_PERIOD \u003d BudgetPeriod.INFINITY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static final Percentage IS_NEAR_THRESHOLD \u003d new Percentage(90);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final Price amount;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final BudgetWindow window;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private ObservableList\u003cExpense\u003e expenses;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private boolean isPrimary;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private Percentage proportionUsed;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    //Constructor for user, four fields."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Budget(Description description, Price amount, Timestamp startDate, BudgetPeriod period) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireAllNonNull(description, amount, startDate, period);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.window \u003d new BudgetWindow(startDate, period);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.expenses \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.proportionUsed \u003d calculateProportionUsed();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    //Constructor for system, with expenses."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Budget(Description description, Price amount, Timestamp startDate, BudgetPeriod period,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                  ObservableList\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this(description, amount, startDate, period);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireAllNonNull(expenses);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.expenses \u003d expenses;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.proportionUsed \u003d calculateProportionUsed();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    //Constructor for system, all fields."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Budget(Description description, Price amount, Timestamp startDate, Timestamp endDate, BudgetPeriod period,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                  ObservableList\u003cExpense\u003e expenses, boolean isPrimary, Percentage proportionUsed) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this(description, amount, startDate, period, expenses);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireAllNonNull(endDate, isPrimary, proportionUsed);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.isPrimary \u003d isPrimary;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.proportionUsed \u003d proportionUsed;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Price getAmount() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public Timestamp getStartDate() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return window.getStartDate();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public Timestamp getEndDate() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return window.getEndDate();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public BudgetPeriod getPeriod() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return window.getPeriod();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ObservableList\u003cExpense\u003e getExpenses() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return expenses;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Percentage getProportionUsed() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return proportionUsed;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Dummy."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return Dummy."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static Budget createDefaultBudget() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Budget defaultBudget \u003d new Budget(DEFAULT_BUDGET_DESCRIPTION,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                DEFAULT_BUDGET_AMOUNT,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                DEFAULT_BUDGET_START_DATE,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                DEFAULT_BUDGET_PERIOD);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        defaultBudget.setToPrimary();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return defaultBudget;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Makes a deep copy of a budget."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param other The budget to be deep copied."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A deep copy of the budget, with identical attributes."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static Budget deepCopy(Budget other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Budget budget \u003d new Budget(other.description, other.amount, other.getStartDate(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                other.getEndDate(), other.getPeriod(), other.expenses, other.isPrimary,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                other.proportionUsed);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return budget;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Normalizes the budget window to the current period."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void normalize(Timestamp anchor) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        window.normalize(anchor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Adds an expense to this budget\u0027s expense list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param e The expense to add."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void addExpense(Expense e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (!expenses.contains(e)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            expenses.add(e);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Dummy."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param otherExpense"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void removeExpense(Expense otherExpense) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Expense toRemove \u003d null;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        for (Expense expense : expenses) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            if (expense.isSameExpense(otherExpense)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                toRemove \u003d expense;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        expenses.remove(toRemove);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void clearExpenses() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        expenses.clear();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Sets the specified expense in the expense list to an updated one."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param target The expense to be updated."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param editedExpense The edited expense."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (expenses.contains(target)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            int index \u003d expenses.indexOf(target);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            expenses.set(index, editedExpense);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ObservableList\u003cExpense\u003e getCurrentPeriodExpenses() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        ObservableList\u003cExpense\u003e currentPeriodExpenses \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (expenses !\u003d null) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            expenses.stream().forEach(expense -\u003e {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                if (withinCurrentPeriod(expense)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    currentPeriodExpenses.add(expense);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            });"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return currentPeriodExpenses;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Checks if an expense is within the current budget period."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private boolean withinCurrentPeriod(Expense expense) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return window.contains(expense.getTimestamp());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Dummy."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public double calculateExpenseSum() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        List\u003cExpense\u003e currentExpenses \u003d getCurrentPeriodExpenses();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        double sum \u003d 0;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        for (Expense expense : currentExpenses) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            sum +\u003d expense.getPrice().getAsDouble();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return sum;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Percentage calculateProportionUsed() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return Percentage.calculate(calculateExpenseSum(), amount.getAsDouble());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void updateProportionUsed() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        proportionUsed \u003d calculateProportionUsed();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean isNear() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return getProportionUsed().reach(IS_NEAR_THRESHOLD);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Checks whether the budget is exceeded."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean isExceeded() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return calculateExpenseSum() \u003e amount.getAsDouble();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean isPrimary() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return isPrimary;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void setToPrimary() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        isPrimary \u003d true;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void setToNotPrimary() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        isPrimary \u003d false;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void setIsPrimary(boolean status) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        isPrimary \u003d status;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Returns true if both budgets have the same description, i.e. name."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Implication: all budgets should have different names."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean isSameBudget(Budget otherBudget) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (otherBudget \u003d\u003d this) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return otherBudget !\u003d null"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 otherBudget.description.equals(description);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (!(other instanceof Budget)) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Budget otherBudget \u003d (Budget) other;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return otherBudget.description.equals(description)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 otherBudget.amount.equals(amount)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 otherBudget.window.equals(window)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 otherBudget.expenses.equals(expenses)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 otherBudget.isPrimary \u003d\u003d isPrimary"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 otherBudget.proportionUsed.equals(proportionUsed);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return Objects.hash(description, amount, window, expenses, isPrimary, proportionUsed);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        builder.append(\"|| Description: \")"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .append(\" Amount: \")"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .append(getAmount())"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .append(window)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .append(\" ||\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 7,
      "czkay": 3,
      "anqichen9856": 268
    }
  },
  {
    "path": "src/main/java/seedu/address/model/budget/BudgetPeriod.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Dummy."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public enum BudgetPeriod {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    DAY(\"day\", Period.ofDays(1)),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    WEEK(\"week\", Period.ofWeeks(1)),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    MONTH(\"month\", Period.ofMonths(1)),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    YEAR(\"year\", Period.ofYears(1)),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    INFINITY(\"infinity\", Period.ofYears(999));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final String label;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final Period period;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private BudgetPeriod(String label, Period period) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.label \u003d label;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Period getPeriod() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return period;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return label;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/budget/BudgetWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Dummy."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class BudgetWindow {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private Timestamp startDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private Timestamp endDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final BudgetPeriod period;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public BudgetWindow(Timestamp startDate, BudgetPeriod period) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.startDate \u003d startDate.toStartOfDay();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.endDate \u003d calculateEndDate();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Timestamp getStartDate() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Timestamp getEndDate() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public BudgetPeriod getPeriod() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return period;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Dummy."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param timestamp"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean contains(Timestamp timestamp) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return isAfterOrEqualStartDate(timestamp)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 isBeforeOrEqualEndDate(timestamp);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private boolean isAfterOrEqualStartDate(Timestamp timestamp) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return timestamp.dateIsAfter(startDate.minusDays(1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private boolean isBeforeOrEqualEndDate(Timestamp timestamp) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return timestamp.dateIsBefore(endDate.plusDays(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Dummy."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param rawAnchor"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void normalize(Timestamp rawAnchor) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        LocalDateTime anchor \u003d rawAnchor.toStartOfDay().fullTimestamp;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        LocalDateTime normalized;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        switch(period) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        case DAY:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            normalized \u003d anchor;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        case WEEK:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            long daysDiff \u003d ChronoUnit.DAYS.between(startDate.getDate(), anchor.toLocalDate());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            long offset \u003d daysDiff % 7;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            normalized \u003d anchor.toLocalDate().minusDays(offset).atStartOfDay();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        case MONTH:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            int specifiedDayOfMonth \u003d startDate.getDayOfMonth();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            int currentDayOfMonth \u003d anchor.getDayOfMonth();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            normalized \u003d currentDayOfMonth \u003e\u003d specifiedDayOfMonth"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    ? anchor.withDayOfMonth(specifiedDayOfMonth)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    : anchor.minusMonths(1).withDayOfMonth(specifiedDayOfMonth);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        case YEAR:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            int specifiedDayOfYear \u003d startDate.getDayOfYear();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            int currentDayOfYear \u003d anchor.getDayOfYear();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            normalized \u003d currentDayOfYear \u003e\u003d specifiedDayOfYear"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    ? anchor.withMonth(startDate.getMonthValue())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    .withDayOfMonth(startDate.getDayOfMonth())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    : anchor.minusYears(1)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    .withMonth(startDate.getMonthValue())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    .withDayOfMonth(startDate.getDayOfMonth());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            normalized \u003d anchor;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        startDate \u003d new Timestamp(normalized);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        endDate \u003d calculateEndDate();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Calculates proper end date based on given start date and period."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private Timestamp calculateEndDate() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Timestamp endDate \u003d startDate.plus(period.getPeriod());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (period \u003d\u003d BudgetPeriod.DAY \u0026\u0026 endDate.getDayOfMonth() \u003c startDate.getDayOfMonth()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            endDate.plusDays(1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return endDate.minusDays(1).toEndOfDay();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (!(other instanceof BudgetWindow)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        BudgetWindow otherWindow \u003d (BudgetWindow) other;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return otherWindow.startDate.getDate().equals(startDate.getDate())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 otherWindow.period.equals(period)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 otherWindow.endDate.getDate().equals(endDate.getDate());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        builder.append(\" Period: \")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                //.append(ParserUtil.formatPeriod(period))"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .append(period)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .append(\" Start date: \")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .append(startDate)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .append(\" End date: \")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .append(endDate);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/model/budget/Percentage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * dummy."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class Percentage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            \"Percentage should be a non-negative integer, followed by a % sign.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final int proportion;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Percentage(int proportion) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        checkArgument(isValidPercentage(proportion), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.proportion \u003d proportion;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public int getProportion() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return proportion;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Calculates the percentage from double division."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param num The numerator."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param den The denominator."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @return A Percentage representing the proportion of num over den."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @throws IllegalArgumentException If num is larger than den, or num and den have different signs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static Percentage calculate(double num, double den) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (num * den \u003c 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new IllegalArgumentException(\"Numerator and denominator must have same sign\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return new Percentage((int) Math.round(num / den * 100));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean reach(Percentage threshold) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return getProportion() \u003e\u003d threshold.getProportion();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Returns true if a given int is a valid percentage."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static boolean isValidPercentage(int input) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return input \u003e\u003d 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return proportion + \"%\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (!(other instanceof Percentage)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Percentage otherPercentage \u003d (Percentage) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return this.proportion \u003d\u003d otherPercentage.proportion;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return Objects.hash(proportion);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/model/budget/UniqueBudgetList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.exceptions.BudgetNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.exceptions.DeleteDefaultBudgetException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.exceptions.DuplicateBudgetException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.exceptions.NotPastPeriodException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * A list of budgets that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * A budget is considered unique by comparing using {@code Budget#isSameBudget(Budget)}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * As such, adding and updating of budgets use Budget#isSameBudget(Budget) for equality so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * as to ensure that the budget being added or updated is unique in terms of identity in"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * the UniqueBudgetList. However, the removal of a budget uses Budget#equals(Object) so"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * as to ensure that the budget with exactly the same fields will be removed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * @see Budget#isSameBudget(Budget)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class UniqueBudgetList implements Iterable\u003cBudget\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final ObservableList\u003cBudget\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final ObservableList\u003cBudget\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Returns true if the list contains an equivalent budget as the given argument."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean contains(Budget toCheck) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameBudget);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Adds a budget to the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * The budget must not already exist in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void add(Budget toAdd) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new DuplicateBudgetException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        toAdd.normalize(Timestamp.getCurrentTimestamp());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        setPrimary(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Adds a budget to MooLah when reconstructing MooLah from json storage file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void addBudgetFromStorage(Budget toAdd) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new DuplicateBudgetException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        toAdd.normalize(Timestamp.getCurrentTimestamp());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (internalList.size() \u003e 1) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            getDefaultBudget().setToNotPrimary();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void setBudgets(UniqueBudgetList replacement) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void setBudgets(List\u003cBudget\u003e budgets) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireAllNonNull(budgets);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (!budgetsAreUnique(budgets)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new DuplicateBudgetException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        internalList.setAll(budgets);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void setPrimary(Budget budget) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireAllNonNull(budget);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (budget.isPrimary()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        for (Budget b : internalList) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            if (b.isPrimary()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                Budget b1 \u003d Budget.deepCopy(b);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                b1.setToNotPrimary();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                setBudget(b, b1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Budget b1 \u003d Budget.deepCopy(budget);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        b1.setToPrimary();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        setBudget(budget, b1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Budget getPrimaryBudget() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Budget primaryBudget \u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            Budget b \u003d internalList.get(i);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            if (b.isPrimary()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                primaryBudget \u003d b;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return primaryBudget;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Changes window of primary budget to a past one specified by the anchor date."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void changePrimaryBudgetWindow(Timestamp pastDate) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireAllNonNull(pastDate);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (pastDate.dateIsAfter(getPrimaryBudget().getStartDate().minusDays(1))) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new NotPastPeriodException();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Budget copy \u003d Budget.deepCopy(getPrimaryBudget());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        copy.normalize(pastDate);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        copy.updateProportionUsed();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        setBudget(getPrimaryBudget(), copy);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean hasBudgetWithName(Description targetDescription) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return internalList.stream().anyMatch(b -\u003e b.getDescription().equals(targetDescription));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Budget getBudgetWithName(Description targetDescription) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Budget targetBudget \u003d null;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            Budget b \u003d internalList.get(i);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            if (b.getDescription().equals(targetDescription)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                targetBudget \u003d b;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return targetBudget;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private Budget getDefaultBudget() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return getBudgetWithName(Budget.DEFAULT_BUDGET_DESCRIPTION);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Removes a budget from this unique budget list."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void remove(Budget toRemove) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (toRemove.isSameBudget(getDefaultBudget())) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new DeleteDefaultBudgetException();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new BudgetNotFoundException();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (toRemove.isPrimary()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            setPrimary(getDefaultBudget());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return internalList.size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public ObservableList\u003cBudget\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Iterator\u003cBudget\u003e iterator() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                || (other instanceof UniqueBudgetList // instanceof handles nulls"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueBudgetList) other).internalList));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Returns true if {@code budgets} contains only unique budgets."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private boolean budgetsAreUnique(List\u003cBudget\u003e budgets) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        for (int i \u003d 0; i \u003c budgets.size() - 1; i++) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            for (int j \u003d i + 1; j \u003c budgets.size(); j++) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                if (budgets.get(i).isSameBudget(budgets.get(j))) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void setBudget(Budget target, Budget editedBudget) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireAllNonNull(target, editedBudget);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new BudgetNotFoundException();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (!target.isSameBudget(editedBudget) \u0026\u0026 contains(editedBudget)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new DuplicateBudgetException();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        internalList.set(index, editedBudget);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 218
    }
  },
  {
    "path": "src/main/java/seedu/address/model/budget/exceptions/BudgetNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.model.budget.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Signals that the operation is unable to find the specified budget."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class BudgetNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public BudgetNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        super(\"Budget is not found in MooLah\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/budget/exceptions/DeleteDefaultBudgetException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.model.budget.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Signals that the operation will result in the default budget being deleted."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class DeleteDefaultBudgetException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public DeleteDefaultBudgetException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        super(\"Default budget cannot be deleted\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/budget/exceptions/DuplicateBudgetException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.model.budget.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Signals that the operation will result in duplicate Budgets (Budgets are considered"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class DuplicateBudgetException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public DuplicateBudgetException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        super(\"Operation would result in duplicate budgets\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/budget/exceptions/NotPastPeriodException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.model.budget.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Signals that the period to be switched to is not a past period."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class NotPastPeriodException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public NotPastPeriodException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        super(\"The period you want to switch to is not a past period.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/category/Category.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package seedu.address.model.category;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Represents a Category in the MooLah."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidCategoryName(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public class Category {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            \"Category should only be one of the following: FOOD, TRAVEL, TRANSPORT, SHOPPING, UTILITIES, \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    + \"HEALTHCARE, ENTERTAINMENT, EDUCATION, OTHERS.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private static List\u003cString\u003e validCategories \u003d List.of(\"FOOD\", \"TRAVEL\", \"TRANSPORT\", \"SHOPPING\", \"UTILITIES\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            \"HEALTHCARE\", \"ENTERTAINMENT\", \"EDUCATION\", \"OTHERS\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private final String categoryName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param categoryName A valid category name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public Category(String categoryName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        requireNonNull(categoryName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        checkArgument(isValidCategoryName(categoryName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.categoryName \u003d categoryName.toUpperCase();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String getCategoryName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return categoryName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static int indexOfInList(Category test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return validCategories.indexOf(test.categoryName.toUpperCase());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Returns true if a given string is a valid category name."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static boolean isValidCategoryName(String test) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 validCategories.contains(test.toUpperCase());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static List\u003cCategory\u003e getValidCategories() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return validCategories"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                .map(Category::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                || (other instanceof Category // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \u0026\u0026 categoryName.equals(((Category) other).categoryName)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return categoryName.hashCode();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return categoryName;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 1,
      "qweiping31415": 45,
      "anqichen9856": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/Description.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Represents a Expense\u0027s description in the MooLah."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \"Descriptions should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum}\\\\s]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public final String fullDescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        fullDescription \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return fullDescription;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u0026\u0026 fullDescription.equals(((Description) other).fullDescription)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return fullDescription.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 57,
      "anqichen9856": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/DescriptionContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Tests that a {@code Expense}\u0027s {@code Description} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class DescriptionContainsKeywordsPredicate implements Predicate\u003cExpense\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public DescriptionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean test(Expense expense) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        .containsWordIgnoreCase(expense.getDescription().fullDescription, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                || (other instanceof DescriptionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u0026\u0026 keywords.equals(((DescriptionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.util.UniqueIdentifierGenerator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Represents an Event in MooLah."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private final Price price;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private final Timestamp timestamp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private final Category category;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private Description budgetName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public Event(Description description, Price price, Category category, Timestamp timestamp) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireAllNonNull(description, price, timestamp);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.timestamp \u003d timestamp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.budgetName \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public Event(Description description, Price price, Category category,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": "                 Timestamp timestamp, Description budgetName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireAllNonNull(description, price, timestamp);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.timestamp \u003d timestamp;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.budgetName \u003d budgetName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public Price getPrice() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public Timestamp getTimestamp() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return timestamp;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public Description getBudgetName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return budgetName;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void setBudget(Budget budget) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "czkay"
        },
        "content": "        budgetName \u003d budget.getDescription();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Returns true if both events of the same description have at least one other identity field that is the same."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * This defines a weaker notion of equality between two events."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public boolean isSameEvent(Event otherEvent) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (otherEvent \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "czkay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return otherEvent !\u003d null"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "czkay"
        },
        "content": "                \u0026\u0026 otherEvent.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "czkay"
        },
        "content": "                \u0026\u0026 (otherEvent.getPrice().equals(getPrice()))"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "czkay"
        },
        "content": "                \u0026\u0026 (otherEvent.getTimestamp().equals(getTimestamp()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Returns true if both events have the same identity and data fields."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * This defines a stronger notion of equality between two events."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "czkay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (!(other instanceof Event)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "czkay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Event otherEvent \u003d (Event) other;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return otherEvent.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "czkay"
        },
        "content": "                \u0026\u0026 otherEvent.getPrice().equals(getPrice())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \u0026\u0026 otherEvent.getCategory().equals(getCategory())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "czkay"
        },
        "content": "                \u0026\u0026 (otherEvent.getTimestamp().equals(getTimestamp()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "czkay"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return Objects.hash(description, price, timestamp, category);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "czkay"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "czkay"
        },
        "content": "        builder.append(\"Description: \")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "czkay"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "czkay"
        },
        "content": "                .append(\" Price: \")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "czkay"
        },
        "content": "                .append(getPrice())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                .append(\" Category: \")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "czkay"
        },
        "content": "                .append(getCategory())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                .append(\" Timestamp: \")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "czkay"
        },
        "content": "                .append(getTimestamp());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Converts the transpired Event into its corresponding Expense."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @return The Event\u0027s corresponding Expense."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public Expense convertToExpense() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Expense convertedExpense \u003d new Expense(description, price, category,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "czkay"
        },
        "content": "                timestamp, budgetName, UniqueIdentifierGenerator.generateRandomUniqueIdentifier());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return convertedExpense;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 125,
      "qweiping31415": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/Expense.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Represents a Expense in MooLah."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class Expense {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // identity fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final UniqueIdentifier uniqueIdentifier;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // data fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final Price price;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private final Timestamp timestamp;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private Description budgetName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private final Category category;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public Expense(Description description, Price price, Category category, UniqueIdentifier uniqueIdentifier) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        requireAllNonNull(description, price, category, uniqueIdentifier);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.uniqueIdentifier \u003d uniqueIdentifier;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.timestamp \u003d Timestamp.getCurrentTimestamp();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.budgetName \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public Expense(Description description, Price price, Category category,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "czkay"
        },
        "content": "                   Timestamp timestamp, UniqueIdentifier uniqueIdentifier) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireAllNonNull(description, price, category, uniqueIdentifier);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.uniqueIdentifier \u003d uniqueIdentifier;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.timestamp \u003d timestamp;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.budgetName \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Expense(Description description, Price price, Category category, Timestamp timestamp, Description budgetName,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                   UniqueIdentifier uniqueIdentifier) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireAllNonNull(description, price, category, timestamp, budgetName, uniqueIdentifier);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.uniqueIdentifier \u003d uniqueIdentifier;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.timestamp \u003d timestamp;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.budgetName \u003d budgetName;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Price getPrice() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public Timestamp getTimestamp() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return timestamp;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public UniqueIdentifier getUniqueIdentifier() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return uniqueIdentifier;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Description getBudgetName() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return budgetName;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void setBudget(Budget budget) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.budgetName \u003d budget.getDescription();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void removeBudget() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.budgetName \u003d new Description(\"default budget\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns true if both expenses of the same unique identifier."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * This defines a weaker notion of equality between two expenses."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean isSameExpense(Expense otherExpense) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (otherExpense \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return otherExpense !\u003d null"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u0026\u0026 otherExpense.getUniqueIdentifier().equals(getUniqueIdentifier());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns true if both expenses have the same unique identifier and data fields."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * This defines a stronger notion of equality between two expenses."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!(other instanceof Expense)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense otherExpense \u003d (Expense) other;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return otherExpense.uniqueIdentifier.equals(uniqueIdentifier)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 otherExpense.description.equals(description)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 otherExpense.price.equals(price)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 otherExpense.timestamp.equals(timestamp)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 otherExpense.category.equals(category)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u0026\u0026 otherExpense.budgetName.equals(budgetName);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return Objects.hash(description, price, timestamp, budgetName, category, uniqueIdentifier);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "czkay"
        },
        "content": "        builder.append(\"Description: \")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .append(\" Price: \")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .append(getPrice())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .append(\" Date: \")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .append(getTimestamp())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                .append(\" Category: \")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                .append(getCategory())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                .append(\" Timestamp: \")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "czkay"
        },
        "content": "                .append(getTimestamp());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 82,
      "czkay": 18,
      "qweiping31415": 11,
      "anqichen9856": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/Price.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Represents a Expense\u0027s price in the MooLah."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPrice(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class Price {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \"Prices should only contain numeric characters, which can be followed by at most\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + \" 1 period or comma followed by the numbers representing the cents\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+([,.]\\\\d+)?\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final Price MAX_PRICE \u003d new Price(\"999999999999999999999\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs a {@code Price}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param price A valid price."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Price(String price) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        checkArgument(isValidPrice(price), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        value \u003d price;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns true if a given string is a valid price."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static boolean isValidPrice(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Double getAsDouble() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return Double.parseDouble(value);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                || (other instanceof Price // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u0026\u0026 value.equals(((Price) other).value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 54,
      "anqichen9856": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/Reminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "// import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": "// import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "// import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": " * A reminder of an upcoming task that the user had inputted."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class Reminder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private Event event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private long daysLeft;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public Reminder(Event event, long daysLeft) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.daysLeft \u003d daysLeft;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Formats the reminder into a readable form for the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @return The reminder message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return String.format("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "                \"You have %d days left before this event: %s!\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "                daysLeft, event.getDescription());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/Timestamp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "import com.joestelmach.natty.DateGroup;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "import com.joestelmach.natty.Parser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.Timekeeper;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Represents an Expense\u0027s timestamp in the MooLah."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #createTimestampIfValid(String)}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class Timestamp implements Comparable\u003cTimestamp\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final int CURRENT_YEAR \u003d LocalDate.now().getYear();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_PERIOD \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            \"Input period is not day/week/month/year\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_DATE \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            \"Timestamps must be in the format dd-MM[-yyyy]\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final Timestamp EARLIEST_TIMESTAMP \u003d new Timestamp("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            LocalDateTime.of(2000, 1, 1, 0, 0));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private static final DateTimeFormatter FORMATTER_WITH_YEAR \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "czkay"
        },
        "content": "            DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private static final int MONTH_CHANGE \u003d 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private static final DateTimeFormatter FORMATTER_WITHOUT_YEAR \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "czkay"
        },
        "content": "            new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    .appendPattern(\"dd-MM\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    .parseDefaulting(ChronoField.YEAR, CURRENT_YEAR)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    .toFormatter(Locale.ENGLISH);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private static final Pattern DDMM_PATTERN \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "czkay"
        },
        "content": "            Pattern.compile(\"(?\u003c\u003d\\\\b)(?\u003cdd\u003e[0-9]{1,2})(?\u003cdiv1\u003e[\\\\\\\\\\\\-\\\\/])(?\u003cmm\u003e[0-9]{1,2})\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public final LocalDateTime fullTimestamp;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public Timestamp(LocalDateTime fullTimestamp) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireAllNonNull(fullTimestamp);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.fullTimestamp \u003d fullTimestamp;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Constructs a Timestamp from a raw date String,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * only if the date conforms to the format of dd-MM[-yyyy]."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param rawTimestamp A String inputted by the user in the date field."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @return An Optional Timestamp that will contain a Timestamp"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * if the date given is of the valid format."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static Optional\u003cTimestamp\u003e createTimestampIfValid(String rawTimestamp) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Matcher m \u003d DDMM_PATTERN.matcher(rawTimestamp);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (m.find()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "czkay"
        },
        "content": "            rawTimestamp \u003d m.replaceFirst(\"$3$2$1\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "czkay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "czkay"
        },
        "content": "            Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "czkay"
        },
        "content": "            List\u003cDateGroup\u003e groups \u003d parser.parse(rawTimestamp);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "czkay"
        },
        "content": "            DateGroup group \u003d groups.get(0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "czkay"
        },
        "content": "            Date datetime \u003d group.getDates().get(0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "czkay"
        },
        "content": "            LocalDateTime fullTimestamp \u003d Timekeeper.convertToLocalDateTime(datetime);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "czkay"
        },
        "content": "            return Optional.of(new Timestamp(fullTimestamp));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "czkay"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "czkay"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Constructs a Timestamp from a raw date String,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * only if the date conforms to the format of dd-MM[-yyyy]."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param rawTimestamp A String inputted by the user in the date field."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @return An Optional Timestamp that will contain a Timestamp"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * if the date given is of the valid format."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static Optional\u003cTimestamp\u003e createTimestampFromStorage(String rawTimestamp) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "czkay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "czkay"
        },
        "content": "            Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "czkay"
        },
        "content": "            List\u003cDateGroup\u003e groups \u003d parser.parse(rawTimestamp);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "czkay"
        },
        "content": "            DateGroup group \u003d groups.get(0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "czkay"
        },
        "content": "            Date datetime \u003d group.getDates().get(0);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "czkay"
        },
        "content": "            LocalDateTime fullTimestamp \u003d Timekeeper.convertToLocalDateTime(datetime);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "czkay"
        },
        "content": "            return Optional.of(new Timestamp(fullTimestamp));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "czkay"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "czkay"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public LocalDateTime getFullTimestamp() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return fullTimestamp;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return fullTimestamp.toLocalDate();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Timestamp toStartOfDay() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return new Timestamp(fullTimestamp.toLocalDate().atStartOfDay());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Timestamp toEndOfDay() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return new Timestamp(fullTimestamp.toLocalDate().atTime(LocalTime.MAX));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public boolean isBefore(Timestamp other) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return this.fullTimestamp.isBefore(other.fullTimestamp);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public boolean isAfter(Timestamp other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return this.fullTimestamp.isAfter(other.fullTimestamp);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean dateIsAfter(Timestamp other) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return this.fullTimestamp.toLocalDate().isAfter(other.fullTimestamp.toLocalDate());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public boolean dateIsBefore(Timestamp other) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return this.fullTimestamp.toLocalDate().isBefore(other.fullTimestamp.toLocalDate());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public Timestamp createBackwardTimestamp() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return new Timestamp(this.fullTimestamp.minusMonths(MONTH_CHANGE));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public Timestamp createForwardTimestamp() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return new Timestamp(this.fullTimestamp.plusMonths(MONTH_CHANGE));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static Timestamp getCurrentTimestamp() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return new Timestamp(LocalDateTime.now());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public Timestamp plus(Period period) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return new Timestamp(fullTimestamp.plus(period));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Timestamp plusDays(long numDays) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return new Timestamp(fullTimestamp.plusDays(numDays));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Timestamp minusDays(long numDays) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return new Timestamp(fullTimestamp.minusDays(numDays));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public int getDayOfMonth() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return fullTimestamp.getDayOfMonth();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public int getDayOfYear() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return fullTimestamp.getDayOfYear();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public int getMonthValue() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return fullTimestamp.getMonthValue();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public boolean isEqual(Timestamp startDate) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return fullTimestamp.isEqual(startDate.getFullTimestamp());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return fullTimestamp.format(FORMATTER_WITH_YEAR);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "czkay"
        },
        "content": "                || (other instanceof Timestamp // instanceof handles nulls"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "czkay"
        },
        "content": "                \u0026\u0026 fullTimestamp.equals(((Timestamp) other).fullTimestamp)); // state check"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return fullTimestamp.hashCode();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public int compareTo(Timestamp other) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (this.fullTimestamp.isBefore(other.fullTimestamp)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "czkay"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (this.fullTimestamp.isAfter(other.fullTimestamp)) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "czkay"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 158,
      "qweiping31415": 5,
      "anqichen9856": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/UniqueEventList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.exceptions.DuplicateEventException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.exceptions.EventNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": " * A list of events that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": " * An event is considered unique by comparing using {@code Event#isSameEvent(Event)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": " * As such, adding and updating of events uses Expense#isSameEvent(Event) for equality so"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": " * as to ensure that the event being added or updated is unique in terms of identity in"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": " * the UniqueEventList. However, the removal of an event uses Event#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": " * as to ensure that the event with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": " * @see Event#isSameEvent(Event)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class UniqueEventList implements Iterable\u003cEvent\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private final ObservableList\u003cEvent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private final ObservableList\u003cEvent\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Returns true if the list contains an equivalent event as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public boolean contains(Event toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEvent);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Adds an event to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * The event must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void add(Event toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new DuplicateEventException(); // rmb to add DuplicateEventException"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "czkay"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Replaces the event {@code target} in the list with {@code editedEvent}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * The event identity of {@code editedEvent} must not be the same as another existing event in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //    IMPLEMENT AFTER WK 7"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        requireAllNonNull(target, editedExpense);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //            throw new ExpenseNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        if (!target.isSameExpense(editedExpense) \u0026\u0026 contains(editedExpense)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //            throw new DuplicateExpenseException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        internalList.set(index, editedExpense);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //    } IMPLEMENT AFTER WK 7"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Removes the equivalent event from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * The event must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void remove(Event toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new EventNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void setEvents(UniqueEventList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "czkay"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Replaces the contents of this list with {@code events}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * {@code events} must not contain duplicate events."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireAllNonNull(events);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (!eventsAreUnique(events)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "czkay"
        },
        "content": "        internalList.setAll(events);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Replaces the event {@code target} in the list with {@code editedEvent}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * The event identity of {@code editedEvent} must not be the same as another existing event in the list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void setEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "czkay"
        },
        "content": "        requireAllNonNull(target, editedEvent);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "czkay"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new EventNotFoundException();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (!target.isSameEvent(editedEvent) \u0026\u0026 contains(editedEvent)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "czkay"
        },
        "content": "        internalList.set(index, editedEvent);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public ObservableList\u003cEvent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public Iterator\u003cEvent\u003e iterator() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "czkay"
        },
        "content": "                || (other instanceof UniqueEventList // instanceof handles nulls"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "czkay"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueEventList) other).internalList));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Returns true if {@code events} contains only unique events."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private boolean eventsAreUnique(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "czkay"
        },
        "content": "        for (int i \u003d 0; i \u003c events.size() - 1; i++) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "czkay"
        },
        "content": "            for (int j \u003d i + 1; j \u003c events.size(); j++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "czkay"
        },
        "content": "                if (events.get(i).isSameEvent(events.get(j))) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "czkay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "czkay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "czkay": 160
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/UniqueExpenseList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.exceptions.DuplicateExpenseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.exceptions.ExpenseNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A list of expenses that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A expense is considered unique by comparing using {@code Expense#isSameExpense(Expense)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * As such, adding and updating of expenses uses Expense#isSameExpense(Expense) for equality so"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * as to ensure that the expense being added or updated is unique in terms of identity in"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * the UniqueExpenseList. However, the removal of a expense uses Expense#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * as to ensure that the expense with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * @see Expense#isSameExpense(Expense)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class UniqueExpenseList implements Iterable\u003cExpense\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final ObservableList\u003cExpense\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final ObservableList\u003cExpense\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns true if the list contains an equivalent expense as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean contains(Expense toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameExpense);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Adds a expense to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * The expense must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void add(Expense toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new DuplicateExpenseException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Replaces the expense {@code target} in the list with {@code editedExpense}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * The expense identity of {@code editedExpense} must not be the same as another existing expense in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireAllNonNull(target, editedExpense);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new ExpenseNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!target.isSameExpense(editedExpense) \u0026\u0026 contains(editedExpense)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new DuplicateExpenseException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        internalList.set(index, editedExpense);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Removes the equivalent expense from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * The expense must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void remove(Expense toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new ExpenseNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setExpenses(UniqueExpenseList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Replaces the contents of this list with {@code expenses}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * {@code expenses} must not contain duplicate expenses."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setExpenses(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireAllNonNull(expenses);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!expensesAreUnique(expenses)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new DuplicateExpenseException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        internalList.setAll(expenses);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ObservableList\u003cExpense\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Iterator\u003cExpense\u003e iterator() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                || (other instanceof UniqueExpenseList // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueExpenseList) other).internalList));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns true if {@code expenses} contains only unique expenses."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private boolean expensesAreUnique(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        for (int i \u003d 0; i \u003c expenses.size() - 1; i++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            for (int j \u003d i + 1; j \u003c expenses.size(); j++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                if (expenses.get(i).isSameExpense(expenses.get(j))) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 137,
      "anqichen9856": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/UniqueIdentifier.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Represents a Expense\u0027s unique identifier in the MooLah."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidUniqueIdentifier(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class UniqueIdentifier {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \"A unique identifier should begin with the prefix \\\u0027Expense@\\\u0027, followed by a 36 character\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \" Universally Unique Identifier which consists of a sequence of up of hex digits (4 chars each)\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + \" and 4 “-” symbols. More specifically a sequence of \u003c8 hex digits\u003e, \u003c4 hex digit\u003e,\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + \" \u003c4 hex digits\u003e, \u003c4 hex digits\u003e, and \u003c12 hex digits\u003e with a dash in between each.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String UNIQUE_IDENTIFIER_PREFIX \u003d \"Expense@\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String UUID_VALIDATION_REGEX \u003d \"[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}+-[0-9a-f]{4}-[0-9a-f]{12}\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d UNIQUE_IDENTIFIER_PREFIX + UUID_VALIDATION_REGEX;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs a {@code UniqueIdentifier}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param uniqueIdentifier A valid unique identifier."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public UniqueIdentifier(String uniqueIdentifier) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(uniqueIdentifier);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        checkArgument(isValidUniqueIdentifier(uniqueIdentifier), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        value \u003d uniqueIdentifier;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns true if a given string is a valid unique identifier."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static boolean isValidUniqueIdentifier(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                || (other instanceof UniqueIdentifier // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u0026\u0026 value.equals(((UniqueIdentifier) other).value)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 59,
      "anqichen9856": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/exceptions/DuplicateEventException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "package seedu.address.model.expense.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Signals that the operation will result in duplicate Events (Events are considered"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": " * duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class DuplicateEventException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public DuplicateEventException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "        super(\"Operation would result in duplicate events\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/exceptions/DuplicateExpenseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.model.expense.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Signals that the operation will result in duplicate Expenses (Expenses are considered"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class DuplicateExpenseException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public DuplicateExpenseException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(\"Operation would result in duplicate expenses\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/exceptions/EventNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "package seedu.address.model.expense.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Signals that the operation is unable to find the specified event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class EventNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "czkay": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/exceptions/ExpenseNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.model.expense.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Signals that the operation is unable to find the specified expense."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class ExpenseNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/util/UniqueIdentifierGenerator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.model.expense.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.model.expense.UniqueIdentifier.UNIQUE_IDENTIFIER_PREFIX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.UniqueIdentifier;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A utility class to generate random unique identifiers for an {@code Expense}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class UniqueIdentifierGenerator {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Generates a random unique identifier consisting of a version 4 universally unique identifier (UUID)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * prefixed with \u0027Expense@\u0027 e.g. Expense@13f213ea-0012-678c-c301-12ca22v21344."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static UniqueIdentifier generateRandomUniqueIdentifier() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        UniqueIdentifier uniqueIdentifier \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new UniqueIdentifier(UNIQUE_IDENTIFIER_PREFIX + UUID.randomUUID().toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return uniqueIdentifier;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/PieChartStatistics.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Represents the Statistics class that provides a PieChart as its Visual Representation method"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public class PieChartStatistics extends Statistics {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private List\u003cString\u003e formattedCategories;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private List\u003cDouble\u003e formattedPercentages;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private List\u003cCategory\u003e usedCategories;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private Timestamp startDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private Timestamp endDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private ObservableList\u003cExpense\u003e expenses;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private PieChartStatistics(ObservableList\u003cExpense\u003e expenses, List\u003cCategory\u003e validCategories,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                               Timestamp startDate, Timestamp endDate) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        super(expenses, validCategories);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.expenses \u003d getExpenses();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Creates a PieChartStatistics object with all the required information filled in its attributes"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param expenses List of expenses"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param validCategories List of allowed categories in MooLah"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param startDate The start date of the tracking period"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param endDate The end date of the tracking period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static PieChartStatistics run(ObservableList\u003cExpense\u003e expenses, List\u003cCategory\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            validCategories, Timestamp startDate, Timestamp endDate) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        PieChartStatistics statistics \u003d new PieChartStatistics(expenses, validCategories, startDate, endDate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        statistics.generatePieChartData();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return statistics;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Gathers the data to be used for the elements of the PieChart"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private void generatePieChartData() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        requireNonNull(startDate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        requireNonNull(endDate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.usedCategories \u003d collateUsedCategories(expenses);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        ArrayList\u003cArrayList\u003cExpense\u003e\u003e expensesInCategories \u003d extractRelevantExpenses(startDate, endDate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        String title \u003d String.format(\"Statistics Summary from %s to %s\\n\", startDate, endDate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        ArrayList\u003cDouble\u003e percentages \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        ArrayList\u003cInteger\u003e numberOfEntries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        ArrayList\u003cString\u003e names \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        for (Category category : usedCategories) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            percentages.add(0.0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            numberOfEntries.add(0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            names.add(category.getCategoryName());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        generatePercentages(expensesInCategories, percentages, numberOfEntries, names, title);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Extracts the expenses that are between the 2 dates"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return A list of categorised expenses according to their categories"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private ArrayList\u003cArrayList\u003cExpense\u003e\u003e extractRelevantExpenses(Timestamp startDate, Timestamp endDate) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        ArrayList\u003cArrayList\u003cExpense\u003e\u003e expensesInCategories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        for (int i \u003d 0; i \u003c usedCategories.size(); i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            expensesInCategories.add(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        for (Expense expense : expenses) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            Timestamp date \u003d expense.getTimestamp();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            if (date.compareTo(startDate) !\u003d -1 \u0026\u0026 date.compareTo(endDate) !\u003d 1) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                int index \u003d usedCategories.indexOf(expense.getCategory());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                expensesInCategories.get(index).add(expense);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return expensesInCategories;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Returns a list of categories used among all expenses. Meant for PieChart usage"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private static List\u003cCategory\u003e collateUsedCategories(ObservableList\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        Set\u003cCategory\u003e categories \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        for (Expense expense: expenses) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            categories.add(expense.getCategory());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        List\u003cCategory\u003e result \u003d new ArrayList\u003c\u003e(categories);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Fills in the data to be passed to a GUI"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param data Expenses grouped together under their Categories"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param percentages List of all percentages under each category"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param numberOfEntries List of number of entries under each category"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param names List of all names to be shown in the legend representing the category"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param titleWithPeriod String containing the period of time the statistics is taken"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private void generatePercentages(ArrayList\u003cArrayList\u003cExpense\u003e\u003e data, ArrayList\u003cDouble\u003e percentages,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                                     ArrayList\u003cInteger\u003e numberOfEntries, ArrayList\u003cString\u003e names,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                                     String titleWithPeriod) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        double totalAmount \u003d 0.0;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        for (int i \u003d 0; i \u003c usedCategories.size(); i++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            ArrayList\u003cExpense\u003e categoryStats \u003d data.get(i);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            for (Expense expense : categoryStats) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                double oldCategoricalTotal \u003d percentages.get(i);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                double price \u003d Double.parseDouble(expense.getPrice().value);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                percentages.set(i, oldCategoricalTotal + price);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                totalAmount +\u003d price;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                int oldNumberOfEntries \u003d numberOfEntries.get(i);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                numberOfEntries.set(i, oldNumberOfEntries + 1);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        for (int i \u003d 0; i \u003c usedCategories.size(); i++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            double categoricalTotal \u003d percentages.get(i);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            double roundedResult \u003d Math.round(categoricalTotal * 10000 / totalAmount) / 100.0;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            percentages.set(i, roundedResult);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            String oldName \u003d names.get(i);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            names.set(i, String.format(\"%s(%.2f%%)\", oldName, roundedResult));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.formattedCategories \u003d names;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.formattedPercentages \u003d percentages;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        setTitle(String.format(\"%s\\nTotal amount: $%.2f\", titleWithPeriod, totalAmount));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Returns the formatted validCategories to be used as labels for the PieChart"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public List\u003cString\u003e getFormattedCategories() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return formattedCategories;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public List\u003cDouble\u003e getFormattedPercentages() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return formattedPercentages;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 175
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/Statistics.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Represents the Statistics class in MooLah."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public class Statistics {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_END_DATE \u003d \"Start date must be before end date.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private ObservableList\u003cExpense\u003e expenses;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private final List\u003cCategory\u003e validCategories;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private int categorySize;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Creates a Statistics object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param expenses A list of expenses in the current budget"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param validCategories A list of tags used among all expenses"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public Statistics(ObservableList\u003cExpense\u003e expenses, List\u003cCategory\u003e validCategories) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        requireNonNull(validCategories);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        requireNonNull(expenses);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.expenses \u003d expenses;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.validCategories \u003d validCategories;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.categorySize \u003d validCategories.size();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    //\u003d\u003d\u003d\u003dgetters to be used by CommandResult \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Returns the lists of all expenses in the current budget"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public ObservableList\u003cExpense\u003e getExpenses() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return expenses;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    List\u003cCategory\u003e getValidCategories() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return validCategories;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    int getCategorySize() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return categorySize;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003dCommand word parser \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * The main handler method of the Statistics model object to identify what kind of Statistics has to be done"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * with each command word"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param expenses List of expenses"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param command Command word provided by the user"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param date1 First date input given by the user"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param date2 Second date input given by the user"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param period Period of time that may be relevant to the operation"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static Statistics calculateStats(ObservableList\u003cExpense\u003e expenses, String command,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                                            Timestamp date1, Timestamp date2, Period period) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        requireNonNull(expenses);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        List\u003cCategory\u003e validCategories \u003d Category.getValidCategories();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        case \"stats\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return PieChartStatistics.run(expenses, validCategories, date1, date2);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        case \"statscompare\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return TabularStatistics.run(expenses, validCategories, date1, date2, period);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/TableEntry.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Utility class representing a row in a table. This class is used mainly by the TabularStatistics class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public class TableEntry {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private double amount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private int numEntries;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    TableEntry(Category category, double amount, int numEntries) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.name \u003d category.getCategoryName();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.numEntries \u003d numEntries;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    TableEntry(String name, double amount, int numEntries) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.numEntries \u003d numEntries;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    static TableEntry createEmptyEntry() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return new TableEntry(\"EMPTY\", 0, 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**O"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Returns a new TableEntry with its attributes from deducting the callee\u0027s attributes from the caller"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param other The other Table Entry"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    TableEntry minus(TableEntry other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return new TableEntry(this.name, this.amount - other.amount,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                this.numEntries - other.numEntries);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Adds the new values to the existing values in the table entry"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public TableEntry add(TableEntry other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return new TableEntry(this.name, this.amount + other.amount,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                this.numEntries + other.numEntries);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public double getAmount() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public int getNumEntries() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return numEntries;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return String.format(\"Category: %s, Amount Spent($): %.2f, numEntries %d\", name, amount, numEntries);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/TabularStatistics.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Represents the Statistics class that provides a Table as its Visual Representation method"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public class TabularStatistics extends Statistics {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private Timestamp firstStartDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private Timestamp firstEndDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private Timestamp secondStartDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private Timestamp secondEndDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private List\u003cTableEntry\u003e differenceTable;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private int categorySize;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private ObservableList\u003cExpense\u003e expenses;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private TabularStatistics(ObservableList\u003cExpense\u003e expenses, List\u003cCategory\u003e validCategories,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                              Timestamp firstStartDate, Timestamp firstEndDate,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                              Timestamp secondStartDate, Timestamp secondEndDate) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        super(expenses, validCategories);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.firstStartDate \u003d firstStartDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.firstEndDate \u003d firstEndDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.secondStartDate \u003d secondStartDate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.secondEndDate \u003d secondEndDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.categorySize \u003d getCategorySize();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.expenses \u003d getExpenses();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public List\u003cTableEntry\u003e getDifferenceTable() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return differenceTable;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Compares the difference in basic statistics across 2 time periods"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param firstStartDate"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param secondStartDate"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param period"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static TabularStatistics run(ObservableList\u003cExpense\u003e expenses, List\u003cCategory\u003e validCategories,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                                        Timestamp firstStartDate, Timestamp secondStartDate, Period period) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        requireNonNull(firstStartDate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        requireNonNull(secondStartDate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        requireNonNull(period);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Timestamp firstEndDate \u003d new Timestamp(firstStartDate.getFullTimestamp().plus(period));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Timestamp secondEndDate \u003d new Timestamp(secondStartDate.getFullTimestamp().plus(period));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        TabularStatistics statistics \u003d new TabularStatistics(expenses, validCategories,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                firstStartDate, firstEndDate,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                secondStartDate, secondEndDate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        statistics.generateTableData();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return statistics;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Gathers the data to be used for the elements of the Table"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private void generateTableData() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        ArrayList\u003cArrayList\u003cExpense\u003e\u003e firstData \u003d extractRelevantExpenses(firstStartDate, firstEndDate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        ArrayList\u003cArrayList\u003cExpense\u003e\u003e secondData \u003d extractRelevantExpenses(secondStartDate, secondEndDate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        String title \u003d String.format(\"Statistics Summary: Comparing %s to %s with %s to %s\\n\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                firstStartDate, firstEndDate, secondStartDate, secondEndDate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        ArrayList\u003cTableEntry\u003e firstTable \u003d createEmptyTableWithoutPercentage();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        ArrayList\u003cTableEntry\u003e secondTable \u003d createEmptyTableWithoutPercentage();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        convertDataToFigures(firstData, firstTable);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        convertDataToFigures(secondData, secondTable);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.differenceTable \u003d secondMinusFirst(firstTable, secondTable);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.setTitle(title);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Creates an empty table"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return An list of table entries"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private ArrayList\u003cTableEntry\u003e createEmptyTableWithoutPercentage() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        ArrayList\u003cTableEntry\u003e table \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        for (int i \u003d 0; i \u003c getValidCategories().size() + 1; i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            table.add(TableEntry.createEmptyEntry());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return table;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Creates a new table containing the differences in the two tables of basic statistics"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param firstTable The basic statistics of the first time period"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param secondTable The basic statistics of the second time period"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return A table containing the differences in the two tables of basic statistics"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private ArrayList\u003cTableEntry\u003e secondMinusFirst(ArrayList\u003cTableEntry\u003e firstTable,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                                                   ArrayList\u003cTableEntry\u003e secondTable) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        ArrayList\u003cTableEntry\u003e result \u003d createEmptyTableWithoutPercentage();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        int rowSize \u003d firstTable.size();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        for (int i \u003d 0; i \u003c rowSize; i++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            TableEntry firstInput \u003d firstTable.get(i);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            TableEntry secondInput \u003d secondTable.get(i);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            TableEntry difference \u003d secondInput.minus(firstInput);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            result.set(i, difference);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Extracts the expenses that are between the 2 dates"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return A list of categorised expenses according to their categories"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private ArrayList\u003cArrayList\u003cExpense\u003e\u003e extractRelevantExpenses(Timestamp startDate, Timestamp endDate) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        ArrayList\u003cArrayList\u003cExpense\u003e\u003e data \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d categorySize; i++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            data.add(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        for (Expense expense : expenses) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            Timestamp date \u003d expense.getTimestamp();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            if (date.compareTo(startDate) !\u003d -1 \u0026\u0026 date.compareTo(endDate) !\u003d 1) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                data.get(categorySize).add(expense);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                int index \u003d Category.indexOfInList(expense.getCategory());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                data.get(index).add(expense);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Fills in the table with calculations from the expenses"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private void convertDataToFigures(ArrayList\u003cArrayList\u003cExpense\u003e\u003e data,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                                      ArrayList\u003cTableEntry\u003e table) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        table.set(categorySize, new TableEntry(\"Total\", 0, 0));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        TableEntry entryForTotal \u003d table.get(categorySize);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        for (int i \u003d 0; i \u003c categorySize; i++) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            ArrayList\u003cExpense\u003e categoryStats \u003d data.get(i);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            double categoricalTotal \u003d 0;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            int entryNumber \u003d 0;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            for (Expense expense : categoryStats) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                categoricalTotal +\u003d Double.parseDouble(expense.getPrice().value);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                entryNumber++;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            TableEntry changes \u003d new TableEntry(getValidCategories().get(i), categoricalTotal, entryNumber);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            table.set(i, changes);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            entryForTotal \u003d entryForTotal.add(changes);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        table.set(categorySize, entryForTotal);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "czkay": 2,
      "qweiping31415": 180
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.model.budget.Budget.DEFAULT_BUDGET_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.MooLah;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.ReadOnlyMooLah;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.BudgetPeriod;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Price;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.util.UniqueIdentifierGenerator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Contains utility methods for populating {@code MooLah} with sample data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static Budget[] getSampleBudgets() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return new Budget[] {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            new Budget(new Description(\"School\"), new Price(\"300\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        Timestamp.createTimestampIfValid(\"01-10\").get(), BudgetPeriod.MONTH),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            new Budget(new Description(\"Outside School\"), new Price(\"200\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        Timestamp.createTimestampIfValid(\"01-10\").get(), BudgetPeriod.MONTH),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static Expense[] getSampleExpenses() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new Expense[] {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            new Expense(new Description(\"Chickens\"), new Price(\"30\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    getCategory(\"food\"), Timestamp.getCurrentTimestamp(), DEFAULT_BUDGET_DESCRIPTION,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    UniqueIdentifierGenerator.generateRandomUniqueIdentifier()),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            new Expense(new Description(\"David Li\"), new Price(\"15000\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    getCategory(\"others\"), Timestamp.getCurrentTimestamp(), DEFAULT_BUDGET_DESCRIPTION,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    UniqueIdentifierGenerator.generateRandomUniqueIdentifier()),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            new Expense(new Description(\"Invite only Chicken Event\"), new Price(\"1000\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    getCategory(\"Food\"), Timestamp.getCurrentTimestamp(), DEFAULT_BUDGET_DESCRIPTION,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    UniqueIdentifierGenerator.generateRandomUniqueIdentifier()),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            new Expense(new Description(\"Chicken Rice extra Chicken\"), new Price(\"15\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    getCategory(\"Food\"), Timestamp.getCurrentTimestamp(), DEFAULT_BUDGET_DESCRIPTION,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    UniqueIdentifierGenerator.generateRandomUniqueIdentifier())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static ReadOnlyMooLah getSampleMooLah() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        MooLah sampleMl \u003d new MooLah();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        for (Budget sampleBudget : getSampleBudgets()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            sampleMl.addBudget(sampleBudget);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        for (Expense sampleExpense : getSampleExpenses()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            sampleMl.addExpense(sampleExpense);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return sampleMl;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static Category getCategory(String category) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return new Category(category);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 13,
      "qweiping31415": 4,
      "anqichen9856": 29,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedBudget.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.BudgetPeriod;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.Percentage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Price;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Jackson-friendly version of {@link Budget}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "class JsonAdaptedBudget {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Budget\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final String startDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final String endDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final String period;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final boolean isPrimary;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private List\u003cJsonAdaptedExpense\u003e expenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final String proportionUsed;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Constructs a {@code JsonAdaptedBudget} with the given budget details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public JsonAdaptedBudget(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                             @JsonProperty(\"amount\") String amount,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                             @JsonProperty(\"startDate\") String startDate,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                             @JsonProperty(\"endDate\") String endDate,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                             @JsonProperty(\"period\") String period,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                             @JsonProperty(\"expenses\") List\u003cJsonAdaptedExpense\u003e expenses,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                             @JsonProperty(\"isPrimary\") boolean isPrimary,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                             @JsonProperty(\"proportionUsed\") String proportionUsed) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (expenses !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            this.expenses.addAll(expenses);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.isPrimary \u003d isPrimary;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.proportionUsed \u003d proportionUsed;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Converts a given {@code Budget} into this class for Jackson use."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public JsonAdaptedBudget(Budget source) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(source);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        description \u003d source.getDescription().fullDescription;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        amount \u003d source.getAmount().value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        startDate \u003d source.getStartDate().toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        endDate \u003d source.getEndDate().toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        period \u003d source.getPeriod().toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        expenses.addAll(source.getExpenses().stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .map(JsonAdaptedExpense::new)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        isPrimary \u003d source.isPrimary();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        proportionUsed \u003d source.getProportionUsed().toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Converts this Jackson-friendly adapted budget object into the model\u0027s {@code Budget} object."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted budget."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Budget toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        final ObservableList\u003cExpense\u003e expenseList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        for (JsonAdaptedExpense expense : expenses) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            expenseList.add(expense.toModelType());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (amount \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (!Price.isValidPrice(amount)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new IllegalValueException(Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        final Price modelAmount \u003d new Price(amount);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Timestamp.class.getSimpleName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Optional\u003cTimestamp\u003e potentialStartDate \u003d Timestamp.createTimestampFromStorage(startDate);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (potentialStartDate.isEmpty()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new IllegalValueException(Timestamp.MESSAGE_CONSTRAINTS_DATE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "czkay"
        },
        "content": "        final Timestamp modelStartDate \u003d potentialStartDate.get();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Timestamp.class.getSimpleName()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Optional\u003cTimestamp\u003e potentialEndDate \u003d Timestamp.createTimestampFromStorage(endDate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (potentialEndDate.isEmpty()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new IllegalValueException(Timestamp.MESSAGE_CONSTRAINTS_DATE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "czkay"
        },
        "content": "        final Timestamp modelEndDate \u003d potentialEndDate.get();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (period \u003d\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Period.class.getSimpleName()));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            ParserUtil.parsePeriod(period);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new IllegalValueException(Timestamp.MESSAGE_CONSTRAINTS_PERIOD);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        final BudgetPeriod modelPeriod \u003d ParserUtil.parsePeriod(period);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (proportionUsed \u003d\u003d null) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Percentage.class.getSimpleName()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        //int proportionValue \u003d ParserUtil.parsePercentage(proportionUsed);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        //if (!Percentage.isValidPercentage(proportionValue)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        //  throw new IllegalValueException(Percentage.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        final Percentage modelProportionUsed \u003d ParserUtil.parsePercentage(proportionUsed);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Budget budget \u003d new Budget(modelDescription, modelAmount, modelStartDate, modelEndDate,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                modelPeriod, expenseList, isPrimary, modelProportionUsed);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return budget;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 9,
      "briyanii": 3,
      "anqichen9856": 149
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedCategory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Jackson-friendly version of {@link Category}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "class JsonAdaptedCategory {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private final String categoryName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code categoryName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public JsonAdaptedCategory(String categoryName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public JsonAdaptedCategory(Category source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        categoryName \u003d source.getCategoryName();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String getCategoryName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return categoryName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Converts this Jackson-friendly adapted category object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted category."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public Category toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        if (!Category.isValidCategoryName(categoryName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            throw new IllegalValueException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return new Category(categoryName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedEvent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Price;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Jackson-friendly version of {@link Event}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "class JsonAdaptedEvent {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Event\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private final String price;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private final String rawTimestamp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private final String category;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private final String budgetName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Constructs a {@code JsonAdaptedEvent} with the given event details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public JsonAdaptedEvent(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czkay"
        },
        "content": "                              @JsonProperty(\"price\") String price,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                              @JsonProperty(\"category\") String category,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": "                              @JsonProperty(\"timestamp\") String rawTimestamp,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "czkay"
        },
        "content": "                              @JsonProperty(\"budgetName\") String budgetName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.rawTimestamp \u003d rawTimestamp;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.budgetName \u003d budgetName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Converts a given {@code Event} into this class for Jackson use."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public JsonAdaptedEvent(Event source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.description \u003d source.getDescription().fullDescription;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.price \u003d source.getPrice().value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.rawTimestamp \u003d source.getTimestamp().fullTimestamp.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.category \u003d source.getCategory().getCategoryName();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.budgetName \u003d source.getBudgetName().fullDescription;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Converts this Jackson-friendly adapted event object into the model\u0027s {@code Event} object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted event."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public Event toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        if (category \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    Category.class.getSimpleName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        Category modelCategory \u003d new Category(category);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "czkay"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (price \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (!Price.isValidPrice(price)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new IllegalValueException(Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "czkay"
        },
        "content": "        final Price modelPrice \u003d new Price(price);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (rawTimestamp \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Timestamp.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Optional\u003cTimestamp\u003e potentialTimestamp \u003d Timestamp.createTimestampFromStorage(rawTimestamp);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (potentialTimestamp.isEmpty()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new IllegalValueException(Timestamp.MESSAGE_CONSTRAINTS_DATE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "czkay"
        },
        "content": "        final Timestamp modelTimestamp \u003d potentialTimestamp.get();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (budgetName \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Budget Name\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (!Description.isValidDescription(budgetName)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "czkay"
        },
        "content": "        final Description modelBudgetName \u003d new Description(budgetName);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return new Event(modelDescription, modelPrice, modelCategory, modelTimestamp, modelBudgetName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 96,
      "qweiping31415": 14,
      "anqichen9856": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedExpense.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Price;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.UniqueIdentifier;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Jackson-friendly version of {@link Expense}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "class JsonAdaptedExpense {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Expense\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final String price;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final String uniqueIdentifier;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private final String category;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private final String rawTimestamp;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final String budgetName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructs a {@code JsonAdaptedExpense} with the given expense details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public JsonAdaptedExpense(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                              @JsonProperty(\"price\") String price,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                              @JsonProperty(\"category\") String category,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                              @JsonProperty(\"timestamp\") String rawTimestamp,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                              @JsonProperty(\"budget\") String budgetName,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                              @JsonProperty(\"uniqueIdentifier\") String uniqueIdentifier) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.rawTimestamp \u003d rawTimestamp;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.budgetName \u003d budgetName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.uniqueIdentifier \u003d uniqueIdentifier;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Converts a given {@code Expense} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public JsonAdaptedExpense(Expense source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        description \u003d source.getDescription().fullDescription;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        price \u003d source.getPrice().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        category \u003d source.getCategory().getCategoryName();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        uniqueIdentifier \u003d source.getUniqueIdentifier().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "czkay"
        },
        "content": "        rawTimestamp \u003d source.getTimestamp().fullTimestamp.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        budgetName \u003d source.getBudgetName().fullDescription;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Converts this Jackson-friendly adapted expense object into the model\u0027s {@code Expense} object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted expense."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Expense toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        if (category \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    Category.class.getSimpleName()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (!Category.isValidCategoryName(category)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new IllegalValueException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        Category modelCategory \u003d new Category(category);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (price \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!Price.isValidPrice(price)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new IllegalValueException(Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        final Price modelPrice \u003d new Price(price);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (uniqueIdentifier \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, UniqueIdentifier.class.getSimpleName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!UniqueIdentifier.isValidUniqueIdentifier(uniqueIdentifier)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new IllegalValueException(UniqueIdentifier.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        final UniqueIdentifier modelUniqueIdentifier \u003d new UniqueIdentifier(uniqueIdentifier);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (rawTimestamp \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Timestamp.class.getSimpleName()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Optional\u003cTimestamp\u003e potentialTimestamp \u003d Timestamp.createTimestampFromStorage(rawTimestamp);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (potentialTimestamp.isEmpty()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new IllegalValueException(Timestamp.MESSAGE_CONSTRAINTS_DATE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "czkay"
        },
        "content": "        final Timestamp modelTimestamp \u003d potentialTimestamp.get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (budgetName \u003d\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Budget Name\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (!Description.isValidDescription(budgetName)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        final Description modelBudgetName \u003d new Description(budgetName);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return new Expense(modelDescription, modelPrice, modelCategory, modelTimestamp, modelBudgetName,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                modelUniqueIdentifier);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 78,
      "czkay": 15,
      "qweiping31415": 11,
      "anqichen9856": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonMooLahStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.commons.exceptions.DataInconsistencyException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.ReadOnlyMooLah;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * A class to access MooLah data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class JsonMooLahStorage implements MooLahStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonMooLahStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public JsonMooLahStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Path getMooLahFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Optional\u003cReadOnlyMooLah\u003e readMooLah() throws DataConversionException, DataInconsistencyException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return readMooLah(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Similar to {@link #readMooLah()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Optional\u003cReadOnlyMooLah\u003e readMooLah(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            DataInconsistencyException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Optional\u003cJsonSerializableMooLah\u003e jsonMooLah \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                filePath, JsonSerializableMooLah.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (!jsonMooLah.isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return Optional.of(jsonMooLah.get().toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void saveMooLah(ReadOnlyMooLah mooLah) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        saveMooLah(mooLah, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Similar to {@link #saveMooLah(ReadOnlyMooLah)}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void saveMooLah(ReadOnlyMooLah mooLah, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        requireNonNull(mooLah);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableMooLah(mooLah), filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 22,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableMooLah.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.commons.exceptions.DataInconsistencyException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.MooLah;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.ReadOnlyMooLah;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * An Immutable MooLah that is serializable to JSON format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "@JsonRootName(value \u003d \"moolah\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "class JsonSerializableMooLah {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXPENSE \u003d \"Expenses list contains duplicate expense(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"Events list contains duplicate event(s).\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BUDGET \u003d \"Budgets list contains duplicate budget(s).\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final List\u003cJsonAdaptedExpense\u003e expenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private final List\u003cJsonAdaptedEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final List\u003cJsonAdaptedBudget\u003e budgets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Constructs a {@code JsonSerializableMooLah} with the given expenses."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public JsonSerializableMooLah(@JsonProperty(\"expenses\") List\u003cJsonAdaptedExpense\u003e expenses,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                                  @JsonProperty(\"events\") List\u003cJsonAdaptedEvent\u003e events,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                                  @JsonProperty(\"budgets\") List\u003cJsonAdaptedBudget\u003e budgets) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.expenses.addAll(expenses);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.events.addAll(events);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.budgets.addAll(budgets);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Converts a given {@code ReadOnlyMooLah} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableMooLah}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public JsonSerializableMooLah(ReadOnlyMooLah source) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expenses.addAll(source.getExpenseList().stream().map(JsonAdaptedExpense::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "czkay"
        },
        "content": "        events.addAll(source.getEventList().stream().map(JsonAdaptedEvent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        budgets.addAll(source.getBudgetList().stream().map(JsonAdaptedBudget::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Converts this MooLah into the model\u0027s {@code MooLah} object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public MooLah toModelType() throws IllegalValueException, DataInconsistencyException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        MooLah mooLah \u003d new MooLah();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        for (JsonAdaptedBudget jsonAdaptedBudget : budgets) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            Budget budget \u003d jsonAdaptedBudget.toModelType();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            boolean isDefaultBudget \u003d budget.isSameBudget(Budget.createDefaultBudget());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            if (!isDefaultBudget) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                if (mooLah.hasBudget(budget)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    throw new IllegalValueException(MESSAGE_DUPLICATE_BUDGET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                mooLah.addBudgetFromStorage(budget);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        for (JsonAdaptedExpense jsonAdaptedExpense : expenses) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            Expense expense \u003d jsonAdaptedExpense.toModelType();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            if (mooLah.hasExpense(expense)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            mooLah.addExpense(expense);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "czkay"
        },
        "content": "        for (JsonAdaptedEvent jsonAdaptedEvent : events) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "czkay"
        },
        "content": "            Event event \u003d jsonAdaptedEvent.toModelType();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            if (mooLah.hasEvent(event)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "czkay"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "czkay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            mooLah.addEvent(event);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return mooLah;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 13,
      "briyanii": 8,
      "anqichen9856": 39,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/MooLahStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.commons.exceptions.DataInconsistencyException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.MooLah;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.ReadOnlyMooLah;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Represents a storage for {@link MooLah}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public interface MooLahStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    Path getMooLahFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Returns MooLah data as a {@link ReadOnlyMooLah}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    Optional\u003cReadOnlyMooLah\u003e readMooLah() throws DataConversionException, IOException, DataInconsistencyException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @see #getMooLahFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    Optional\u003cReadOnlyMooLah\u003e readMooLah(Path filePath) throws DataConversionException, IOException,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            DataInconsistencyException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Saves the given {@link ReadOnlyMooLah} to the storage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @param mooLah cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    void saveMooLah(ReadOnlyMooLah mooLah) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @see #saveMooLah(ReadOnlyMooLah)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    void saveMooLah(ReadOnlyMooLah mooLah, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.commons.exceptions.DataInconsistencyException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.ReadOnlyMooLah;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public interface Storage extends MooLahStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    Path getMooLahFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    Optional\u003cReadOnlyMooLah\u003e readMooLah() throws DataConversionException, IOException, DataInconsistencyException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    void saveMooLah(ReadOnlyMooLah mooLah) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 6,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.commons.exceptions.DataInconsistencyException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.ReadOnlyMooLah;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * Manages storage of MooLah data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private MooLahStorage mooLahStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public StorageManager(MooLahStorage mooLahStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.mooLahStorage \u003d mooLahStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MooLah methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Path getMooLahFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return mooLahStorage.getMooLahFilePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Optional\u003cReadOnlyMooLah\u003e readMooLah() throws DataConversionException, IOException,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            DataInconsistencyException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return readMooLah(mooLahStorage.getMooLahFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Optional\u003cReadOnlyMooLah\u003e readMooLah(Path filePath) throws DataConversionException, IOException,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            DataInconsistencyException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return mooLahStorage.readMooLah(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void saveMooLah(ReadOnlyMooLah mooLah) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        saveMooLah(mooLah, mooLahStorage.getMooLahFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void saveMooLah(ReadOnlyMooLah mooLah, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        mooLahStorage.saveMooLah(mooLah, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 19,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.ui.textfield.CommandTextField.ERROR_STYLE_CLASS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.panel.exceptions.UnmappedPanelException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.textfield.CommandTextField;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final CommandTextField commandTextField;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private StackPane commandInputAreaPlaceholder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandTextField \u003d new CommandTextField();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandTextField"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .textProperty()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandInputAreaPlaceholder.getChildren().add(commandTextField);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandTextField.addEventHandler(KeyEvent.KEY_PRESSED, keyEvent -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (keyEvent.getCode().equals(KeyCode.ENTER)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                handleCommandEntered();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void importSyntaxStyleSheet(Scene scene) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandTextField.importStyleSheet(scene);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            String input \u003d commandTextField.getText();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // do not execute if input is blank"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (input.isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            commandExecutor.execute(input);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            commandTextField.commitAndFlush();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } catch (CommandException | ParseException | UnmappedPanelException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // enable syntax highlighting"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandTextField.enableSyntaxHighlighting();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        //override style and disable syntax highlighting"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandTextField.overrideStyle(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Adds a command to enable syntax highlighting for"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param com The command word of the command"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param pre The prefix of the command"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param optionalPrefixes"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void enableSuggestionAndSyntaxHighlightingFor(String com, List\u003cPrefix\u003e pre, List\u003cPrefix\u003e optionalPrefixes) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandTextField.addSupportFor(com, pre, optionalPrefixes);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Disable syntax highlighting for the specified command."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param command The command word of the command."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void disableSuggestionsAndSyntaxHighlightingFor(String command) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandTextField.removeSupportFor(command);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void enableSyntaxHighlighting() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandTextField.enableSyntaxHighlighting();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "briyanii"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String, String)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException, UnmappedPanelException;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 60,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s1-cs2103t-t11-1.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        root.sizeToScene();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 1,
      "-": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.stage.Popup;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandGroup;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.GenericCommandWord;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.alias.AddAliasCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.alias.DeleteAliasCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.alias.ListAliasCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.budget.AddBudgetCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.budget.SwitchBudgetCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.event.AddEventCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.event.ListEventsCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.AddExpenseCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.ClearCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.DeleteExpenseCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.EditExpenseCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.FindExpenseCommand;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.ListExpenseCommand;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.general.ExitCommand;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.statistics.StatsCommand;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.statistics.StatsCompareCommand;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.ui.ViewPanelCommand;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.parser.AddAliasCommandParser;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.parser.AddBudgetCommandParser;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.parser.AddEventCommandParser;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.parser.AddExpenseCommandParser;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.parser.EditCommandParser;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.parser.StatsCommandParser;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.parser.StatsCompareCommandParser;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.parser.SwitchBudgetCommandParser;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.Timekeeper;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Event;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.statistics.PieChartStatistics;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.statistics.TabularStatistics;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.budget.BudgetListPanel;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.budget.BudgetPanel;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.event.EventListPanel;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.expense.AliasPanel;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.expense.ExpenseListPanel;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.panel.PanelName;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.panel.PlaceholderPanel;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.panel.SinglePanelView;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.panel.exceptions.UnmappedPanelException;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static final String MESSAGE_BUDGET_NEAR \u003d \"You are close to your budget limit.\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static final String MESSAGE_BUDGET_EXCEEDED \u003d \"Your budget is exceeded.\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static final Background BUDGET_WARNING_POPUP_BACKGROUND \u003d new Background("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            new BackgroundFill("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    Color.RED,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    new CornerRadii(10),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    Insets.EMPTY)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    );"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private Timekeeper timekeeper;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private Timer timer;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // Panel Manager which manages which panel(extending UiPart Region) is displayed."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private SinglePanelView singlePanelView;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // Ui parts which are always displayed"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private CommandBox commandBox;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // Popup windows"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private StatsWindow statsWindow;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private StackPane panelPlaceholder;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic, Timekeeper timekeeper, Timer timer) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.timekeeper \u003d timekeeper;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.timer \u003d timer;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // fill inner UiParts"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getMooLahFilePath());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        singlePanelView \u003d new SinglePanelView();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        panelPlaceholder.getChildren().add(singlePanelView.getRoot());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // fill single panel view"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        singlePanelView.setPanel(BudgetPanel.PANEL_NAME, new BudgetPanel(logic.getPrimaryBudget()));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        singlePanelView.setPanel(AliasPanel.PANEL_NAME, new AliasPanel(logic.getAliasMappings()));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        singlePanelView.setPanel(ExpenseListPanel.PANEL_NAME,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new ExpenseListPanel(logic.getFilteredExpenseList(), true));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        singlePanelView.setPanel(BudgetListPanel.PANEL_NAME,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new BudgetListPanel(logic.getFilteredBudgetList()));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        singlePanelView.setPanel(EventListPanel.PANEL_NAME, new PlaceholderPanel());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        singlePanelView.setPanel(PanelName.STATISTICS_PANEL, new PlaceholderPanel());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // startup panel \u003d expense list panel"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            changePanel(ExpenseListPanel.PANEL_NAME);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } catch (UnmappedPanelException e) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // should not be thrown"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // enable syntax highlighting"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        enableSyntaxHighlighting();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Enables syntax highlighting for a built in commands."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private void enableSyntaxHighlighting() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandBox.importSyntaxStyleSheet(getRoot().getScene());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // expense commands"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandBox.enableSuggestionAndSyntaxHighlightingFor("
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                AddExpenseCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                AddExpenseCommandParser.REQUIRED_PREFIXES,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                AddExpenseCommandParser.OPTIONAL_PREFIXES);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandBox.enableSuggestionAndSyntaxHighlightingFor("
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                DeleteExpenseCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandBox.enableSuggestionAndSyntaxHighlightingFor("
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                EditExpenseCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                EditCommandParser.REQUIRED_PREFIXES,"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                EditCommandParser.OPTIONAL_PREFIXES);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandBox.enableSuggestionAndSyntaxHighlightingFor("
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                FindExpenseCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandBox.enableSuggestionAndSyntaxHighlightingFor("
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                ListExpenseCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandBox.enableSuggestionAndSyntaxHighlightingFor("
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                ClearCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // event commands"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandBox.enableSuggestionAndSyntaxHighlightingFor("
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                AddEventCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                AddEventCommandParser.REQUIRED_PREFIXES,"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                AddEventCommandParser.OPTIONAL_PREFIXES);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandBox.enableSuggestionAndSyntaxHighlightingFor("
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                ListEventsCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // budget commands"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandBox.enableSuggestionAndSyntaxHighlightingFor("
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                AddBudgetCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                AddBudgetCommandParser.REQUIRED_PREFIXES,"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                AddBudgetCommandParser.OPTIONAL_PREFIXES);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandBox.enableSuggestionAndSyntaxHighlightingFor("
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                SwitchBudgetCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                SwitchBudgetCommandParser.REQUIRED_PREFIXES,"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                SwitchBudgetCommandParser.OPTIONAL_PREFIXES);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // alias commands"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandBox.enableSuggestionAndSyntaxHighlightingFor("
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                AddAliasCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                AddAliasCommandParser.REQUIRED_PREFIXES,"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                AddAliasCommandParser.OPTIONAL_PREFIXES);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandBox.enableSuggestionAndSyntaxHighlightingFor("
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                DeleteAliasCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandBox.enableSuggestionAndSyntaxHighlightingFor("
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                ListAliasCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // stats commands"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandBox.enableSuggestionAndSyntaxHighlightingFor("
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                StatsCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                StatsCommandParser.REQUIRED_PREFIXES,"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                StatsCommandParser.OPTIONAL_PREFIXES);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandBox.enableSuggestionAndSyntaxHighlightingFor("
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                StatsCompareCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                StatsCompareCommandParser.REQUIRED_PREFIXES,"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                StatsCompareCommandParser.OPTIONAL_PREFIXES);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // general commands"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandBox.enableSuggestionAndSyntaxHighlightingFor("
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                UndoCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandBox.enableSuggestionAndSyntaxHighlightingFor("
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                RedoCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandBox.enableSuggestionAndSyntaxHighlightingFor("
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                HelpCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandBox.enableSuggestionAndSyntaxHighlightingFor("
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                ExitCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandBox.enableSuggestionAndSyntaxHighlightingFor("
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                ViewPanelCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandBox.enableSyntaxHighlighting();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Changes the currently viewed Panel in the MainWindow."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param panelName The Panel Name of assigned to the Panel."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @throws UnmappedPanelException if there is no Panel assigned to the specified Panel Name."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private void changePanel(PanelName panelName) throws UnmappedPanelException {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        configureGenericCommands(panelName);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        singlePanelView.viewPanel(panelName);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Configures the custom text field to highlight for syntax for generic commands depending on the current panel."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private void configureGenericCommands(PanelName panelName) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandBox.disableSuggestionsAndSyntaxHighlightingFor(GenericCommandWord.ADD);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandBox.disableSuggestionsAndSyntaxHighlightingFor(GenericCommandWord.DELETE);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandBox.disableSuggestionsAndSyntaxHighlightingFor(GenericCommandWord.LIST);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (panelName.equals(BudgetPanel.PANEL_NAME)) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            commandBox.enableSuggestionAndSyntaxHighlightingFor("
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    GenericCommandWord.ADD,"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    AddExpenseCommandParser.REQUIRED_PREFIXES,"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    AddExpenseCommandParser.OPTIONAL_PREFIXES);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } else if (panelName.equals(ExpenseListPanel.PANEL_NAME)) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            commandBox.enableSuggestionAndSyntaxHighlightingFor("
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    GenericCommandWord.ADD,"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    AddExpenseCommandParser.REQUIRED_PREFIXES,"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    AddExpenseCommandParser.OPTIONAL_PREFIXES);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            commandBox.enableSuggestionAndSyntaxHighlightingFor("
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    GenericCommandWord.LIST,"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    AddExpenseCommandParser.REQUIRED_PREFIXES,"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    AddExpenseCommandParser.OPTIONAL_PREFIXES);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            commandBox.enableSuggestionAndSyntaxHighlightingFor("
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    GenericCommandWord.DELETE,"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    AddExpenseCommandParser.REQUIRED_PREFIXES,"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    AddExpenseCommandParser.OPTIONAL_PREFIXES);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } else if (panelName.equals(BudgetListPanel.PANEL_NAME)) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            commandBox.enableSuggestionAndSyntaxHighlightingFor("
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    GenericCommandWord.ADD,"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    AddBudgetCommandParser.REQUIRED_PREFIXES,"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    AddBudgetCommandParser.OPTIONAL_PREFIXES);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } else if (panelName.equals(EventListPanel.PANEL_NAME)) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            commandBox.enableSuggestionAndSyntaxHighlightingFor("
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    GenericCommandWord.ADD,"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    AddEventCommandParser.REQUIRED_PREFIXES,"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    AddEventCommandParser.OPTIONAL_PREFIXES);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            commandBox.enableSuggestionAndSyntaxHighlightingFor("
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    GenericCommandWord.LIST,"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    Collections.emptyList(),"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    Collections.emptyList());"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } else if (panelName.equals(AliasPanel.PANEL_NAME)) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            commandBox.enableSuggestionAndSyntaxHighlightingFor("
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    GenericCommandWord.ADD,"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    AddAliasCommandParser.REQUIRED_PREFIXES,"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    AddAliasCommandParser.OPTIONAL_PREFIXES);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            commandBox.enableSuggestionAndSyntaxHighlightingFor("
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    GenericCommandWord.DELETE,"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    Collections.emptyList(),"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    Collections.emptyList());"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            commandBox.enableSuggestionAndSyntaxHighlightingFor("
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    GenericCommandWord.LIST,"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    Collections.emptyList(),"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    Collections.emptyList());"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } else if (panelName.equals(PanelName.STATISTICS_PANEL)) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // does not use generic commands"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Opens the stats window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private void displayStats(CommandResult commandResult) {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        Statistics currentStats \u003d commandResult.getStatistics();"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        if (currentStats instanceof PieChartStatistics) {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            this.statsWindow \u003d new StatsWindow(commandResult.getNames(),"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    commandResult.getPercentages(), commandResult.getTitle());"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        } else if (currentStats instanceof TabularStatistics) {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            this.statsWindow \u003d new StatsWindow(commandResult.getTitle(), commandResult.getDifferenceTable());"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        requireNonNull(statsWindow);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        if (!statsWindow.isShowing()) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            statsWindow.show();"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            statsWindow.focus();"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "czkay"
        },
        "content": "        timer.cancel();"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "czkay"
        },
        "content": "        timer.purge();"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Executes the command and returns the result. If the command is a generic command, append the command group based"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * on the current panel."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @see Logic#execute(String, String)"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException,"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            UnmappedPanelException {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            String commandGroup \u003d decideCommandGroup();"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText, commandGroup);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            singlePanelView.setPanel(AliasPanel.PANEL_NAME, new AliasPanel(logic.getAliasMappings()));"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            singlePanelView.setPanel(BudgetPanel.PANEL_NAME, new BudgetPanel(logic.getPrimaryBudget()));"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            changePanel(commandResult.viewrequest());"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            Budget primaryBudget \u003d logic.getPrimaryBudget();"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            boolean initialIsNear \u003d primaryBudget.isNear();"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            boolean initialIsExceeded \u003d primaryBudget.isExceeded();"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            if (commandResult.isStatistic()) {"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                displayStats(commandResult);"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            }"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            boolean finalIsNear \u003d primaryBudget.isNear();"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            boolean finalIsExceeded \u003d primaryBudget.isExceeded();"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            showWarningIfAny(initialIsNear, initialIsExceeded, finalIsNear, finalIsExceeded);"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } catch (UnmappedPanelException e) {"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage() + \"\\n\""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    + String.format(ViewPanelCommand.SHOW_AVAILABLE_PANELS, singlePanelView.toString()));"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Decides what the command group should be based on the current panel name."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private String decideCommandGroup() {"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (BudgetPanel.PANEL_NAME.equals(singlePanelView.getCurrentPanelName())) {"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return CommandGroup.EXPENSE;"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } else if (ExpenseListPanel.PANEL_NAME.equals(singlePanelView.getCurrentPanelName())) {"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return CommandGroup.EXPENSE;"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } else if (EventListPanel.PANEL_NAME.equals(singlePanelView.getCurrentPanelName())) {"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return CommandGroup.EVENT;"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } else if (AliasPanel.PANEL_NAME.equals(singlePanelView.getCurrentPanelName())) {"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return CommandGroup.ALIAS;"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } else if (PanelName.STATISTICS_PANEL.equals(singlePanelView.getCurrentPanelName())) {"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return CommandGroup.STATISTIC;"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return CommandGroup.GENERAL;"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Displays Reminders of the user\u0027s upcoming Events."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void displayReminders() {"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "czkay"
        },
        "content": "        resultDisplay.setFeedbackToUser(timekeeper.displayReminders());"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Handles the opening of popup windows to notify the user of transpired events."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void handleTranspiredEvents() {"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "czkay"
        },
        "content": "        List\u003cEvent\u003e transpiredEvents \u003d timekeeper.getTranspiredEvents();"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "czkay"
        },
        "content": "        for (Event event : transpiredEvents) {"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "czkay"
        },
        "content": "            TranspiredEventsWindow eventWindow \u003d new TranspiredEventsWindow(logic);"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "czkay"
        },
        "content": "            eventWindow.show(event);"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Creates a popup for warnings related to budget."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Popup createPopup(String message) {"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Popup popup \u003d new Popup();"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        popup.setAutoFix(true);"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        popup.setAutoHide(true);"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        popup.setHideOnEscape(true);"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Label label \u003d new Label(message);"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        label.setBackground(BUDGET_WARNING_POPUP_BACKGROUND);"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        popup.getContent().add(label);"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return popup;"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Handles the showing and disappearing of popup warnings."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void showPopupMessage(String message) {"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Popup popup \u003d createPopup(message);"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        popup.setOnShown(new EventHandler\u003cWindowEvent\u003e() {"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            public void handle(WindowEvent e) {"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                popup.setX(primaryStage.getX() + primaryStage.getWidth() / 2 - popup.getWidth() / 2);"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                popup.setY(primaryStage.getY() + primaryStage.getHeight() / 2 - popup.getHeight() / 2);"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            }"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        });"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        popup.show(primaryStage);"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        PauseTransition delay \u003d new PauseTransition(Duration.seconds(2));"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        delay.setOnFinished(event -\u003e popup.hide());"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        delay.play();"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Determines if there is a need to show warnings, and shows the corresponding warnings."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void showWarningIfAny(boolean initialIsNear, boolean initialIsExceeded,"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                                 boolean finalIsNear, boolean finalIsExceeded) {"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (!initialIsExceeded \u0026\u0026 finalIsExceeded) {"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            showPopupMessage(MESSAGE_BUDGET_EXCEEDED);"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        if (!initialIsNear \u0026\u0026 finalIsNear) {"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            showPopupMessage(MESSAGE_BUDGET_NEAR);"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 286,
      "czkay": 28,
      "qweiping31415": 31,
      "anqichen9856": 82,
      "-": 181
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "// import java.awt.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 2,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatsWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.geometry.Side;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.statistics.TableEntry;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Controller for a stats page"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public class StatsWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatsWindow.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private static final String FXML \u003d \"StatsWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private StatsWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        root.sizeToScene();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Creates a new StatsWindow meant for PieChartStatistics"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    StatsWindow(List\u003cString\u003e names, List\u003cDouble\u003e percentages, String title) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        Stage primaryStage \u003d getRoot();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        primaryStage.setTitle(title);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e details \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        for (int i \u003d 0; i \u003c names.size(); i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            String name \u003d names.get(i);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            double percentage \u003d percentages.get(i);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            details.add(new PieChart.Data(name, percentage));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        BorderPane borderPane \u003d new BorderPane();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        Scene scene \u003d new Scene(borderPane, 600, 500);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        PieChart pieChart \u003d new PieChart();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        pieChart.setData(details);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        pieChart.setTitle(title);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        pieChart.setLegendSide(Side.BOTTOM);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        pieChart.setLabelsVisible(true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        borderPane.setCenter(pieChart);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        pieChart.setStartAngle(90);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        pieChart.setClockwise(false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        primaryStage.setScene(scene);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Creates a new StatsWindow meant for TabularStatistics"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    StatsWindow(String title, List\u003cTableEntry\u003e rows) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        Stage primaryStage \u003d getRoot();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        primaryStage.setTitle(title);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        TableColumn\u003cTableEntry, String\u003e nameColumn \u003d new TableColumn\u003c\u003e(\"Category\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        nameColumn.setMinWidth(200);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        nameColumn.setCellValueFactory(new PropertyValueFactory\u003cTableEntry, String\u003e(\"name\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        TableColumn\u003cTableEntry, String\u003e amountColumn \u003d new TableColumn\u003c\u003e(\"Amount\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        amountColumn.setMinWidth(200);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        amountColumn.setCellValueFactory(new PropertyValueFactory\u003cTableEntry, String\u003e(\"amount\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        TableColumn\u003cTableEntry, String\u003e frequencyColumn \u003d new TableColumn\u003c\u003e(\"Frequency\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        frequencyColumn.setMinWidth(200);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        frequencyColumn.setCellValueFactory(new PropertyValueFactory\u003cTableEntry, String\u003e(\"numEntries\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        TableView\u003cTableEntry\u003e table \u003d new TableView\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        table.setItems(getTableEntries(rows));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        table.getColumns().addAll(nameColumn, amountColumn, frequencyColumn);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        VBox vBox \u003d new VBox();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        vBox.getChildren().addAll(table);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        Scene scene \u003d new Scene(vBox);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        primaryStage.setScene(scene);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private ObservableList\u003cTableEntry\u003e getTableEntries(List\u003cTableEntry\u003e rows) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        ObservableList\u003cTableEntry\u003e result \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        result.addAll(rows);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        logger.fine(\"Showing stats page about the application.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Returns true if the stats window is currently being shown."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    boolean isShowing() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Hides the stats window."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Focuses on the stats window."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    void focus() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 162
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TranspiredEventsWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.Timekeeper;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class TranspiredEventsWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final String MESSAGE \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "            \"This event was supposed to have happened %s ago. Do you want to add it as an expense?\\n%s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final String ERROR_MESSAGE \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "            \"There was an error adding the specified expense!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private static final String FXML \u003d \"TranspiredEventsWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private Event currentEvent;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private Button yesButton;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private Button noButton;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private Label message;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public TranspiredEventsWindow(Stage root, Logic logic) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "czkay"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "czkay"
        },
        "content": "        root.sizeToScene();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public TranspiredEventsWindow(Logic logic) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this(new Stage(), logic);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void show(Event event) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Platform.runLater(new Runnable() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "czkay"
        },
        "content": "            @Override public void run() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "czkay"
        },
        "content": "                logger.fine(\"Notifying users of transpired events.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "czkay"
        },
        "content": "                currentEvent \u003d event;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "czkay"
        },
        "content": "                message.setText("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "czkay"
        },
        "content": "                        String.format(MESSAGE,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "czkay"
        },
        "content": "                                Timekeeper.formatTimeOutdated(event.getTimestamp()), event.toString()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "czkay"
        },
        "content": "                getRoot().show();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "czkay"
        },
        "content": "                getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "czkay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "czkay"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "czkay"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "czkay"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Adds the corresponding Expense from the transpired Event. Only triggers if the user presses \u0027Yes\u0027."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private void addExpenseFromEvent() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "czkay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "czkay"
        },
        "content": "            logic.addExpenseFromEvent(currentEvent);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "czkay"
        },
        "content": "            getRoot().close();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "czkay"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "czkay"
        },
        "content": "            message.setText(ERROR_MESSAGE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "czkay"
        },
        "content": "            PauseTransition delay \u003d new PauseTransition(Duration.seconds(1.5));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "czkay"
        },
        "content": "            delay.setOnFinished(event -\u003e getRoot().close());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "czkay"
        },
        "content": "            delay.play();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private void ignore() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "czkay"
        },
        "content": "        getRoot().close();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 134
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.Timekeeper;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/moolah.png\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private Timekeeper timekeeper;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private Timer timer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public UiManager(Logic logic, Timekeeper timekeeper) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.timekeeper \u003d timekeeper;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.timer \u003d new Timer();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "czkay"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic, timekeeper, timer);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "czkay"
        },
        "content": "            mainWindow.displayReminders();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "czkay"
        },
        "content": "            long interval \u003d 10000;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "czkay"
        },
        "content": "            timer.schedule(new TimerTask() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "czkay"
        },
        "content": "                public void run() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    timekeeper.updateTime();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    Platform.runLater(new Runnable() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "czkay"
        },
        "content": "                        @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "czkay"
        },
        "content": "                        public void run() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "czkay"
        },
        "content": "                            mainWindow.handleTranspiredEvents();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "czkay"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    });"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "czkay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "czkay"
        },
        "content": "            }, 0, interval);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 24,
      "anqichen9856": 1,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/alias/AliasPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.ui.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.Alias;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.AliasMappings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.panel.Panel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.panel.PanelName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Panel containing the list of expenses."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class AliasPanel extends Panel {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final PanelName PANEL_NAME \u003d new PanelName(\"Aliases\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String FXML \u003d \"ListPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AliasPanel.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private StackPane titlePlaceHolder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private ListView\u003cAlias\u003e listView;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private int maxLength;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public AliasPanel(AliasMappings aliasMappings) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        aliasMappings.getAliases();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        titlePlaceHolder.getChildren().add(new Label(\"User Defined Aliases\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        listView.getItems().addAll(aliasMappings.getAliases());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        maxLength \u003d aliasMappings.getAliases().stream().map(x -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return x.getAliasName().length();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }).reduce(0, Math::max);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        listView.setCellFactory(aliasListView -\u003e new AliasListCell());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void view() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        getRoot().setVisible(true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        getRoot().setDisable(false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        getRoot().setVisible(false);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        getRoot().setDisable(true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Alias} using a {@code TextFlow}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    class AliasListCell extends ListCell\u003cAlias\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        protected void updateItem(Alias alias, boolean empty) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            super.updateItem(alias, empty);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (empty || alias \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                int whiteSpaceCount \u003d maxLength - alias.getAliasName().length();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                Label aliasLabel \u003d new Label(\" \".repeat(whiteSpaceCount) + alias.getAliasName());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                aliasLabel.setBackground(new Background("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        new BackgroundFill(Color.ORANGE, new CornerRadii(3), Insets.EMPTY)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                aliasLabel.setTextFill(Color.WHITE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                Label input \u003d new Label(\"  \" + alias.getInput());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                TextFlow graphic \u003d new TextFlow(aliasLabel, input);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                setGraphic(graphic);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/budget/BudgetCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.ui.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.control.ProgressBar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.scene.layout.Border;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * An UI component that displays information of a {@code Budget}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class BudgetCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String FXML \u003d \"BudgetCard.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String CURRENCY_SYMBOL \u003d \"$\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static final DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * or an exceptions will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on MooLah level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private AnchorPane budgetCardPane;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Label budgetName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Label budgetStart;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Label budgetEnd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Label budgetTotalAmount;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Label budgetAllocatedAmount;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private Label proportionUsed;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private ProgressBar budgetProgressBar;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Budget budget;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public BudgetCard(Budget budget) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // budget name"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        updateBudgetCardDescription();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // budget period"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        updateBudgetCardPeriod();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // budget total over allocated"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        updateBudgetCardProgressBarText();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // budget proportion used"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        updateBudgetProportionUsed();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // progress bar colour"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        updateBudgetCardProgressBarColour();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        budget.getExpenses().addListener(new ListChangeListener\u003cExpense\u003e() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            public void onChanged(Change\u003c? extends Expense\u003e change) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                change.next();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                if (change.wasAdded() || change.wasRemoved() || change.wasReplaced() || change.wasUpdated()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    // update total"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    updateBudgetCardProgressBarText();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    updateBudgetCardProgressBarColour();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        });"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Updates the text displayed on the budget progress bar."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private void updateBudgetCardProgressBarText() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        updateBudgetCardTotalAmount(budget.calculateExpenseSum());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        budgetAllocatedAmount.setText(String.format(\"%s%.2f\", CURRENCY_SYMBOL, budget.getAmount().getAsDouble()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        updateBudgetProportionUsed();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private void updateBudgetCardTotalAmount(double totalAmount) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        budgetTotalAmount.setText(String.format(\"%s%.2f\", CURRENCY_SYMBOL, totalAmount));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        budgetProgressBar.setProgress(totalAmount / budget.getAmount().getAsDouble());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private void updateBudgetCardPeriod() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        budgetStart.setText(budget.getStartDate().fullTimestamp.format(formatter));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        budgetEnd.setText(budget.getEndDate().fullTimestamp.format(formatter));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private void updateBudgetCardDescription() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        budgetName.setText(budget.getDescription().fullDescription);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private void updateBudgetProportionUsed() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        proportionUsed.setText(\"[\" + budget.calculateProportionUsed().toString() + \"]\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Sets the progress bar colour to the colour defined in the stylesheet {@code -progress-bar-colour}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * If the budget total amount exceeds the budget allocated amount, the progress bar colour is set to"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * {@code -progress-bar-overbudget}, else it is set to {@code -progress-bar-inbudget}, as defined in the"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * stylesheet."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private void updateBudgetCardProgressBarColour() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (budget.isExceeded()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            budgetProgressBar.setStyle(\"-progress-bar-colour: -progress-bar-overbudget;\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        } else if (budget.isNear()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            budgetProgressBar.setStyle(\"-progress-bar-colour: -progress-bar-nearbudget;\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            budgetProgressBar.setStyle(\"-progress-bar-colour: -progress-bar-inbudget;\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void setBorder(Border border) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        budgetCardPane.setBorder(border);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!(other instanceof BudgetCard)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        BudgetCard card \u003d (BudgetCard) other;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return budgetName.equals(card.budgetName)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u0026\u0026 budgetStart.equals(card.budgetStart)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u0026\u0026 budgetEnd.equals(card.budgetEnd)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u0026\u0026 budget.equals(card.budget);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 124,
      "anqichen9856": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/budget/BudgetListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.ui.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.scene.layout.Border;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.scene.layout.BorderStroke;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.scene.layout.BorderStrokeStyle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.scene.layout.BorderWidths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.panel.Panel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.panel.PanelName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Panel containing the list of budgets."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class BudgetListPanel extends Panel {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final PanelName PANEL_NAME \u003d new PanelName(\"Budget List\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String FXML \u003d \"ListPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static final Border PRIMARY_BUDGET_BORDER \u003d new Border(new BorderStroke(Color.RED,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            BorderStrokeStyle.SOLID, CornerRadii.EMPTY, BorderWidths.DEFAULT));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(BudgetListPanel.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private StackPane titlePlaceHolder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private ListView\u003cBudget\u003e listView;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public BudgetListPanel(ObservableList\u003cBudget\u003e budgetList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        titlePlaceHolder.getChildren().add(new Label(\"Budget List\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        listView.setItems(budgetList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        listView.setCellFactory(listView -\u003e new BudgetListViewCell());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void view() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        getRoot().setVisible(true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        getRoot().setDisable(false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        getRoot().setVisible(false);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        getRoot().setDisable(true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Budget} using a {@code BudgetCard}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    class BudgetListViewCell extends ListCell\u003cBudget\u003e {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        protected void updateItem(Budget budget, boolean empty) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            super.updateItem(budget, empty);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (empty || budget \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                BudgetCard budgetCard \u003d new BudgetCard(budget);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                if (budget.isPrimary()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    budgetCard.setBorder(PRIMARY_BUDGET_BORDER);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                setGraphic(budgetCard.getRoot());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 66,
      "anqichen9856": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/budget/BudgetPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.ui.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.expense.ExpenseListPanel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.panel.Panel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.panel.PanelName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Panel containing the list of expenses."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class BudgetPanel extends Panel {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final PanelName PANEL_NAME \u003d new PanelName(\"Primary Budget\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String FXML \u003d \"BudgetPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(BudgetPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private StackPane budgetCardPlaceholder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private StackPane expenseListPanelPlaceholder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private ExpenseListPanel expenseListPanel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private BudgetCard budgetCard;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public BudgetPanel(Budget budget) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expenseListPanel \u003d new ExpenseListPanel(budget.getExpenses(), false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expenseListPanelPlaceholder.getChildren().add(expenseListPanel.getRoot());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        budgetCard \u003d new BudgetCard(budget);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        budgetCardPlaceholder.getChildren().add(budgetCard.getRoot());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void view() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        getRoot().setVisible(true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        getRoot().setDisable(false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        getRoot().setVisible(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        getRoot().setDisable(true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/event/EventCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "package seedu.address.ui.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": " * An UI component that displays information of a {@code Event}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class EventCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private static final String FXML \u003d \"EventListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on MooLah level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public final Event event;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private AnchorPane eventCardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private Label index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private Label price;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private Label budgetName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private FlowPane categories;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public EventCard(Event event, int displayedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "czkay"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "czkay"
        },
        "content": "        index.setText(Integer.toString(displayedIndex));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "czkay"
        },
        "content": "        description.setText(event.getDescription().fullDescription);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "czkay"
        },
        "content": "        price.setText(\"$\" + event.getPrice().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "czkay"
        },
        "content": "        categories.getChildren().add(new Label(event.getCategory().getCategoryName()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "czkay"
        },
        "content": "        date.setText(event.getTimestamp().fullTimestamp.format(DateTimeFormatter.ISO_DATE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "czkay"
        },
        "content": "        time.setText(null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "czkay"
        },
        "content": "        budgetName.setText(event.getBudgetName().fullDescription);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "czkay"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "czkay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "czkay"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (!(other instanceof EventCard)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "czkay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "czkay"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "czkay"
        },
        "content": "        EventCard card \u003d (EventCard) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return index.getText().equals(card.index.getText())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "czkay"
        },
        "content": "                \u0026\u0026 event.equals(card.event);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/event/EventListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "package seedu.address.ui.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.ui.panel.Panel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.ui.panel.PanelName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Panel containing the list of expenses."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class EventListPanel extends Panel {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final PanelName PANEL_NAME \u003d new PanelName(\"Event List\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private static final String FXML \u003d \"ListPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(seedu.address.ui.event.EventListPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private StackPane titlePlaceHolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private ListView\u003cEvent\u003e listView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public EventListPanel(ObservableList\u003cEvent\u003e eventList, boolean withTitle) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": "        titlePlaceHolder.setMinHeight(0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czkay"
        },
        "content": "        if (withTitle) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czkay"
        },
        "content": "            titlePlaceHolder.getChildren().add(new Label(\"Event List\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": "        listView.setItems(eventList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "czkay"
        },
        "content": "        listView.setCellFactory(listView -\u003e new EventListViewCell());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void view() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "czkay"
        },
        "content": "        getRoot().setVisible(true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czkay"
        },
        "content": "        getRoot().setDisable(false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "czkay"
        },
        "content": "        getRoot().setVisible(false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "czkay"
        },
        "content": "        getRoot().setDisable(true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Event} using a {@code EventCard}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "czkay"
        },
        "content": "    class EventListViewCell extends ListCell\u003cEvent\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "czkay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "czkay"
        },
        "content": "        protected void updateItem(Event event, boolean empty) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "czkay"
        },
        "content": "            super.updateItem(event, empty);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "czkay"
        },
        "content": "            if (empty || event \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "czkay"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "czkay"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "czkay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "czkay"
        },
        "content": "                setGraphic(new EventCard(event, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "czkay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/expense/ExpenseCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.ui.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * An UI component that displays information of a {@code Expense}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class ExpenseCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String FXML \u003d \"ExpenseListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //    private static final String FOOD_ICON \u003d \"images/category/food.png\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //    private static final String TRANSPORT_ICON \u003d \"images/category/transport.png\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //    private static final String UTILITIES_ICON \u003d \"images/category/utilities.png\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //    private static final String TRAVEL_ICON \u003d \"images/category/travel.png\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //    private static final String EDUCATION_ICON \u003d \"images/category/education.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //    private static final String ENTERTAINMENT_ICON \u003d \"images/category/entertainment.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //    private static final String OTHERS_ICON \u003d \"images/category/others.png\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //    private static final String HEALTHCARE_ICON \u003d \"images/category/healthcare.png\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on MooLah level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public final Expense expense;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private AnchorPane expenseCardPane;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Label index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Label price;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private FlowPane categories;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //    private Circle clip;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //    private ImageView icon;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ExpenseCard(Expense expense, int displayedIndex) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.expense \u003d expense;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        index.setText(Integer.toString(displayedIndex));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        description.setText(expense.getDescription().fullDescription);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        price.setText(\"$\" + expense.getPrice().value);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        categories.getChildren().add(new Label(expense.getCategory().getCategoryName()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "czkay"
        },
        "content": "        date.setText(expense.getTimestamp().fullTimestamp.format(DateTimeFormatter.ISO_DATE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        time.setText(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        //clip.setFill(new ImagePattern(getImage(expense.getCategory().getCategoryName())));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!(other instanceof ExpenseCard)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        ExpenseCard card \u003d (ExpenseCard) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return index.getText().equals(card.index.getText())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u0026\u0026 expense.equals(card.expense);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 43,
      "czkay": 1,
      "qweiping31415": 1,
      "anqichen9856": 1,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/expense/ExpenseListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.ui.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.panel.Panel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.panel.PanelName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Panel containing the list of expenses."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class ExpenseListPanel extends Panel {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final PanelName PANEL_NAME \u003d new PanelName(\"Expense List\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String FXML \u003d \"ListPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ExpenseListPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private StackPane titlePlaceHolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private ListView\u003cExpense\u003e listView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ExpenseListPanel(ObservableList\u003cExpense\u003e expenseList, boolean withTitle) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        titlePlaceHolder.setMinHeight(0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (withTitle) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            titlePlaceHolder.getChildren().add(new Label(\"Expense List\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        listView.setItems(expenseList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        listView.setCellFactory(listView -\u003e new ExpenseListViewCell());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void view() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        getRoot().setVisible(true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        getRoot().setDisable(false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        getRoot().setVisible(false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        getRoot().setDisable(true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Expense} using a {@code ExpenseCard}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    class ExpenseListViewCell extends ListCell\u003cExpense\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        protected void updateItem(Expense expense, boolean empty) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            super.updateItem(expense, empty);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (empty || expense \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                setGraphic(new ExpenseCard(expense, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panel/Panel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.ui.panel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Represents a viewable Panel in the GUI."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public abstract class Panel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Panel(String fxmlFileName) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(fxmlFileName);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Panel(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(fxmlFileUrl);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Panel(URL fxmlFileUrl, Region root) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Panel(String fxmlFileName, Region root) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(fxmlFileName, root);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Brings the panel to view."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public abstract void view();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Hides the panel from view."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public abstract void hide();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panel/PanelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.ui.panel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.panel.exceptions.UnmappedPanelException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Represents the Panel Map used by the GUI to navigate between Panels."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public interface PanelManager {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Assigns a Panel Name to a Panel for later access."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param panelName The name assigned to the specified Panel."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param panel The Panel which is stored for later access."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return True if the Panel was added, false otherwise."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    boolean setPanel(PanelName panelName, Panel panel);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns True if there is a Panel mapped to the specified Panel Name, False otherwise."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param panelName The Panel Name which is used to query the Panel Manager."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return True if there is a Panel mapped to the specified Panel Name, False otherwise."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    boolean hasPanel(PanelName panelName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns the Panel mapped to the specified Panel Name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param panelName The Panel Name used in the request."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return the Panel which is mapped to the specified Panel Name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    Panel getPanel(PanelName panelName) throws UnmappedPanelException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Removes the Panel mapped to the specified Panel Name and returns it."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param panelName The Panel Name used in the request."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return the Panel which is mapped to the specified Panel Name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    Panel removePanel(PanelName panelName) throws UnmappedPanelException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panel/PanelName.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.ui.panel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Represents a Panel Name which is used in the GUI."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class PanelName {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final PanelName CURRENT \u003d new PanelName(\"Current Page\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // temporary"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final PanelName STATISTICS_PANEL \u003d new PanelName(\"Statistics\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String MESSAGE_NAME_FORMAT \u003d \"\\\"%s\\\" is not a valid panel name. \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            + \"Panel names can only have alphanumeric characters with whitespaces in between.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String NAME_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+(\\\\s+\\\\p{Alnum}+)*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final String panelName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public PanelName(String panelName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(panelName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String trimmed \u003d panelName.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        checkArgument(isValidPanelName(trimmed), String.format(MESSAGE_NAME_FORMAT, panelName));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.panelName \u003d trimmed;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static boolean isValidPanelName(String panelName) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return Pattern.compile(NAME_VALIDATION_REGEX).matcher(panelName).matches();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!(obj instanceof PanelName)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        PanelName otherPanelName \u003d (PanelName) obj;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return otherPanelName.panelName.equals(panelName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return panelName.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return \"[Panel: \" + panelName + \"]\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panel/PlaceholderPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.ui.panel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Placeholder Panel for to represent null Panel instances."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class PlaceholderPanel extends Panel {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String PLACEHOLDER_PANEL_MESSAGE \u003d \"This panel is empty!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private StackPane panelPlaceholder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public PlaceholderPanel() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(SinglePanelView.FXML);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void view() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (panelPlaceholder.getChildren().size() \u003c 1) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            panelPlaceholder.getChildren().add(new Label(\"This is not the Panel you are looking for.\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        getRoot().setVisible(true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        getRoot().setDisable(false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        getRoot().setVisible(false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        getRoot().setDisable(true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panel/SinglePanelView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.ui.panel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.panel.exceptions.UnmappedPanelException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Represents a Panel Manager and Viewer UiPart in the GUI which allows a single panel to be shown at a time."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Supports operations to enable switching which Panel is currently visible to the user in the GUI."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class SinglePanelView extends UiPart\u003cRegion\u003e implements PanelManager {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String FXML \u003d \"PanelView.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Map\u003cPanelName, Panel\u003e panelNamePanelHashMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Panel currentPanel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private PanelName currentPanelName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private StackPane panelPlaceholder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructor for the PanelView."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public SinglePanelView() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        panelNamePanelHashMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        currentPanel \u003d new PlaceholderPanel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        currentPanelName \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Switches the in-view Panel to the Panel mapped to the specified Panel Name, if there is a Panel"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * mapped to that name."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param panelName The Panel Name used to request a change of the in-view Panel."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void viewPanel(PanelName panelName) throws UnmappedPanelException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(panelName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        PanelName toView \u003d panelName.equals(PanelName.CURRENT) ? currentPanelName : panelName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!hasPanel(toView)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new UnmappedPanelException(toView);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // hide all panels"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        for (Panel p : panelNamePanelHashMap.values()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            p.hide();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        currentPanel \u003d getPanel(toView);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // check to ensure nonnull"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (currentPanel \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            currentPanel \u003d new PlaceholderPanel();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            setPanel(toView, currentPanel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // update property"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        currentPanelName \u003d toView;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // view"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        currentPanel.view();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Panel getCurrentPanel() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return panelNamePanelHashMap.get(currentPanelName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public PanelName getCurrentPanelName() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return currentPanelName;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // -------- PanelManager Method Implementations ------------------"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean setPanel(PanelName panelName, Panel panel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(panelName);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(panel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(panel.getRoot());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // if contains the same panel name"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // 1. hide the original panel"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // 2. remove the panel from the stackpane"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (panelNamePanelHashMap.containsKey(panelName)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            Panel toOverwrite \u003d panelNamePanelHashMap.get(panelName);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            toOverwrite.hide();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            panelPlaceholder.getChildren().remove(toOverwrite.getRoot());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // map the panel to the panel name"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        panelNamePanelHashMap.put(panelName, panel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // put the panel in the stackpane"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        panelPlaceholder.getChildren().add(panel.getRoot());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // prevent new panel from being shown unless requested to be viewed."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        panel.hide();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return panelPlaceholder.getChildren().contains(panel.getRoot());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean hasPanel(PanelName panelName) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(panelName);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // hashmap has panel name"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return panelNamePanelHashMap.containsKey(panelName)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                // not mapped to null object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u0026\u0026 panelNamePanelHashMap.get(panelName) !\u003d null"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                // mapped panel is child of stackPane"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u0026\u0026 panelPlaceholder.getChildren().contains(panelNamePanelHashMap.get(panelName).getRoot());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Panel getPanel(PanelName panelName) throws UnmappedPanelException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(panelName);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!hasPanel(panelName)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new UnmappedPanelException(panelName);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return panelNamePanelHashMap.get(panelName);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Panel removePanel(PanelName panelName) throws UnmappedPanelException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!panelNamePanelHashMap.containsKey(panelName)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new UnmappedPanelException(panelName);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Panel p \u003d panelNamePanelHashMap.get(panelName);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (p.equals(getCurrentPanel())) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            currentPanel \u003d new PlaceholderPanel();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        p.hide();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        panelNamePanelHashMap.remove(panelName);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        panelPlaceholder.getChildren().remove(p.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return p;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return panelNamePanelHashMap"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .keySet().stream().map(PanelName::toString)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .collect(Collectors.joining(\"\\n\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 141
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panel/exceptions/UnmappedPanelException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.ui.panel.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.panel.PanelName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Exception to be thrown when an error is caused by a PanelName in PanelManager not being assigned to a Panel."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class UnmappedPanelException extends Exception {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public UnmappedPanelException(PanelName panelName) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super(formatMessage(panelName));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static String formatMessage(PanelName panelName) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requireNonNull(panelName);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return String.format(\"%s is not assigned to any panel.\", panelName.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/textfield/AutofillSuggestionMenu.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.ui.textfield;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.ui.textfield.SyntaxHighlightingSupportedInput.PLACEHOLDER_REGEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.geometry.Side;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.control.ContextMenu;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.control.SeparatorMenuItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.stage.Window;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Context Menu to show suggestions to replace text in a Text Area. Cycle through suggestions using TAB key and press"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * ENTER to finalize choice."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class AutofillSuggestionMenu extends ContextMenu {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final Color MATCHING_TEXT_COLOUR \u003d Color.ORANGE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final Color COMPLETION_TEXT_COLOUR \u003d Color.WHITE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final Color OPTIONAL_LABEL_BACKGROUND_COLOUR \u003d Color.LIGHTGRAY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final Color REQUIRED_LABEL_BACKGROUND_COLOUR \u003d Color.FIREBRICK;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final Color OPTIONAL_TEXT_COLOUR \u003d Color.BLACK;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final Color REQUIRED_TEXT_COLOUR \u003d Color.WHITE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private StringProperty currentCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private FilteredList\u003cAutofillSupportedCommand\u003e autofillSupportedCommands;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private FilteredList\u003cString\u003e commandSuggestions;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private ObservableList\u003cAutofillSupportedCommand\u003e autofillSupportedCommandList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private ObservableList\u003cString\u003e supportedCommandWords;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private TextInputControl textInputControl;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private SimpleStringProperty currentMatchingText;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Constructor for the {@code AutofillSuggestionMenu}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param textInputControl                 The textInputControl which this autofill menu is bound to."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param currentCommandWordStringProperty The \u0027current matching command word\u0027 of the {@code textInputControl}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public AutofillSuggestionMenu(TextInputControl textInputControl, StringProperty currentCommandWordStringProperty) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.textInputControl \u003d textInputControl;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        currentCommand \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        currentCommandWordStringProperty.addListener((observableValue, s, t1) -\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            currentCommand.setValue(t1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        });"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        currentMatchingText \u003d new SimpleStringProperty();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        supportedCommandWords \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        autofillSupportedCommandList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        autofillSupportedCommands \u003d new FilteredList\u003c\u003e(autofillSupportedCommandList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandSuggestions \u003d new FilteredList\u003c\u003e(supportedCommandWords);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        textInputControl.textProperty().addListener((a, b, text) -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            currentMatchingText.setValue(text.trim());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            autofillSupportedCommands.setPredicate(supportedInput -\u003e {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                Supplier\u003cBoolean\u003e bool \u003d () -\u003e supportedInput.getCommand().equals(currentCommand.get());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                return bool.get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            });"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            String tail \u003d text.stripLeading();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            commandSuggestions.setPredicate(x -\u003e x.startsWith(tail));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (currentMatchingText.get().length() \u003e 0) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                showSuggestions();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                textInputControl.requestFocus();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                hide();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        });"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        addEventFilter(KeyEvent.ANY, keyEvent -\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (keyEvent.getCode().isArrowKey()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                hide();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        });"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        setOnAction(this::appendChosenCompletion);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Add support for a command with prefixes to be autocompleted and highlighted."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param command The command word"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param requiredPrefixes The required prefixes"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param optionalPrefixes The optional prefixes"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void addCommand(String command, List\u003cPrefix\u003e requiredPrefixes, List\u003cPrefix\u003e optionalPrefixes) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        supportedCommandWords.removeIf(commandName -\u003e commandName.equals(command));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        supportedCommandWords.add(command);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        autofillSupportedCommandList"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .removeIf(commandName -\u003e commandName.getCommand().equals(command));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        autofillSupportedCommandList.add(new AutofillSupportedCommand(command, requiredPrefixes, optionalPrefixes));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void removeCommand(String command) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        supportedCommandWords.removeIf(commandName -\u003e commandName.equals(command));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        autofillSupportedCommandList.removeIf(supportedInput -\u003e supportedInput.getCommand().equals(command));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Show the context menu."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private void showSuggestions() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (autofillSupportedCommands.size() \u003e 0 || commandSuggestions.size() \u003e 0) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            this.show(textInputControl, Side.LEFT, 0, 20);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            hide();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Replaces the text of the text area with the targeted suggestion."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param event The event which targets the menu item containing the suggestion."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private void appendChosenCompletion(ActionEvent event) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        MenuItem menuItem \u003d (MenuItem) event.getTarget();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String completion \u003d menuItem.getId();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        for (Character c : completion.toCharArray()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            textInputControl.insertText(textInputControl.getLength(), c.toString());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void show(Node anchor, Side side, double dx, double dy) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (currentMatchingText.get().isEmpty()) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        populateList(this, autofillSupportedCommands, commandSuggestions, currentMatchingText.get());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super.show(anchor, side, dx, dy);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // disable other show methods"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    protected void show() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (currentMatchingText.get().isEmpty()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        populateList(this, autofillSupportedCommands, commandSuggestions, currentMatchingText.get());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super.show();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void show(Window owner) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (currentMatchingText.get().isEmpty()) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        populateList(this, autofillSupportedCommands, commandSuggestions, currentMatchingText.get());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super.show(owner);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void show(Window ownerWindow, double anchorX, double anchorY) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (currentMatchingText.get().isEmpty()) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        populateList(this, autofillSupportedCommands, commandSuggestions, currentMatchingText.get());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super.show(ownerWindow, anchorX, anchorY);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Populates the context menu with suggestions."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param m                   The context menu."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param matchingSuggestions The list of suggestions."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param match               The matching text."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void populateList(ContextMenu m, FilteredList\u003cAutofillSupportedCommand\u003e matchingSuggestions,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                             FilteredList\u003cString\u003e commandSuggestion, String match) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        m.getItems().clear();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (currentCommand.length().get() \u003e 0) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            AutofillSupportedCommand c \u003d matchingSuggestions.get(0);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            List\u003cPrefix\u003e[] missing \u003d c.getMissingPrefixes(match);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            for (Prefix p : missing[0]) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                TextFlow graphic \u003d requiredPrefixGraphic(p);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                MenuItem item \u003d new MenuItem();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                // if ends with space can add prefix"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                if (match.replaceAll(PLACEHOLDER_REGEX, \"\").stripTrailing().length() \u003c match.length()) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    item.setId(p.getPrefix());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    // else add a white space in order for it to be properly parsed as a prefix"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    item.setId(\" \" + p.getPrefix());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                item.setGraphic(graphic);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                m.getItems().add(item);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (missing[0].size() \u003e 0 \u0026\u0026 missing[1].size() \u003e 0) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                m.getItems().add(new SeparatorMenuItem());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            for (Prefix p : missing[1]) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                TextFlow graphic \u003d optionalPrefixGraphic(p);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                MenuItem item \u003d new MenuItem();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                // if ends with space can add prefix"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                if (match.replaceAll(PLACEHOLDER_REGEX, \"\").stripTrailing().length() \u003c match.length()) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    item.setId(p.getPrefix());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    // else add a white space in order for it to be properly parsed as a prefix"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    item.setId(\" \" + p.getPrefix());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                item.setGraphic(graphic);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                m.getItems().add(item);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            for (String suggestion : commandSuggestion.sorted((s1, s2) -\u003e s1.length() - s2.length())) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                String completion \u003d suggestion.replaceFirst(match, \"\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                TextFlow graphic \u003d commandWordGraphic(\"\", match, completion);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                MenuItem item \u003d new MenuItem();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                item.setId(completion.replaceAll(PLACEHOLDER_REGEX, \"\"));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                item.setGraphic(graphic);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                m.getItems().add(item);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Creates a TextFlow to represent the menu item being displayed with the matching text in the suggestion"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * highlighted."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param start The text before the match."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param match The matching text."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param after The text after the match."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return The TextFlow used for the menu item\u0027s graphic."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public TextFlow commandWordGraphic(String start, String match, String after) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Text completionTextBeforeMatch \u003d new Text(start);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        completionTextBeforeMatch.setFill(COMPLETION_TEXT_COLOUR);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Text matchingText \u003d new Text(match);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        matchingText.setFill(MATCHING_TEXT_COLOUR);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Text completionTextAfterMatch \u003d new Text(after);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        completionTextAfterMatch.setFill(COMPLETION_TEXT_COLOUR);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        TextFlow graphic \u003d new TextFlow(completionTextBeforeMatch, matchingText, completionTextAfterMatch);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return graphic;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Creates TextFlow used for AutoFillMenu graphics for required prefixs."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param p The prefix to generate a graphic for."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return The graphic {@code TextFlow}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private TextFlow requiredPrefixGraphic(Prefix p) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        TextFlow graphic \u003d new TextFlow();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        graphic.setPadding(Insets.EMPTY);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Label req \u003d new Label(\"Missing:\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        req.setTextFill(REQUIRED_TEXT_COLOUR);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        req.setPadding(Insets.EMPTY);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        req.setBackground(new Background("
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new BackgroundFill(REQUIRED_LABEL_BACKGROUND_COLOUR, CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Text prefix \u003d new Text(\" \" + p.getPrefix() + \"\u003c\" + p.getDescriptionOfArgument() + \"\u003e\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        prefix.setFill(REQUIRED_TEXT_COLOUR);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        graphic.getChildren().addAll(req, prefix);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return graphic;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Creates graphic for optional prefixes in the drop down menu."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param p The optional prefix"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return The graphic {@code TextFlow}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private TextFlow optionalPrefixGraphic(Prefix p) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        TextFlow graphic \u003d new TextFlow();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        graphic.setPadding(Insets.EMPTY);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Label req \u003d new Label(\"Optional:\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        req.setPadding(Insets.EMPTY);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        req.setBackground(new Background("
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new BackgroundFill(MATCHING_TEXT_COLOUR, CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Text prefix \u003d new Text(\" \" + p.getPrefix() + \"\u003c\" + p.getDescriptionOfArgument() + \"\u003e\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        prefix.setFill(REQUIRED_TEXT_COLOUR);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        graphic.getChildren().addAll(req, prefix);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return graphic;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 298
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/textfield/AutofillSupportedCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.ui.textfield;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A supported command input for autofill."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class AutofillSupportedCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Map\u003cPrefix, Boolean\u003e requiredPrefixToIsPresentMapping;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Map\u003cPrefix, Boolean\u003e optionalPrefixToIsPresentMapping;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    AutofillSupportedCommand(String commandWord, List\u003cPrefix\u003e requiredPrefixes, List\u003cPrefix\u003e optionalPrefixes) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.command \u003d commandWord;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requiredPrefixToIsPresentMapping \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        for (Prefix p : requiredPrefixes) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            requiredPrefixToIsPresentMapping.put(p, false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        optionalPrefixToIsPresentMapping \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        for (Prefix p : optionalPrefixes) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            optionalPrefixToIsPresentMapping.put(p, false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public boolean isRequired(Prefix p) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return requiredPrefixToIsPresentMapping.keySet().contains(p);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns a list of missing prefixes to add to the auto completion suggestions."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param input The string to check for prefixes."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public List\u003cPrefix\u003e[] getMissingPrefixes(String input) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        ArrayList\u003cPrefix\u003e prefixes \u003d new ArrayList\u003c\u003e(requiredPrefixToIsPresentMapping.keySet());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        prefixes.addAll(optionalPrefixToIsPresentMapping.keySet());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Prefix[] prefixArray \u003d prefixes.toArray(new Prefix[]{});"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // tokenize to find prefixes"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(input, prefixArray);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        ArrayList\u003cPrefix\u003e missingReq \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        ArrayList\u003cPrefix\u003e missingOpt \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // find missing required prefixes"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        requiredPrefixToIsPresentMapping.forEach((p, v) -\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (argumentMultimap.getValue(p).isEmpty()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                missingReq.add(p);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // find missing optional prefixes"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        optionalPrefixToIsPresentMapping.forEach((p, v) -\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (argumentMultimap.getValue(p).isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                missingOpt.add(p);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        });"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return (List\u003cPrefix\u003e[]) new List[]{missingReq, missingOpt};"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/textfield/CommandTextField.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.ui.textfield;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static javafx.scene.input.KeyCode.C;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static javafx.scene.input.KeyCode.DOWN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static javafx.scene.input.KeyCode.ENTER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static javafx.scene.input.KeyCode.TAB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static javafx.scene.input.KeyCode.UP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static javafx.scene.input.KeyCode.V;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static javafx.scene.input.KeyCode.Y;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static javafx.scene.input.KeyCombination.SHIFT_ANY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static javafx.scene.input.KeyCombination.SHORTCUT_ANY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static javafx.scene.input.KeyCombination.SHORTCUT_DOWN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.fxmisc.wellbehaved.event.EventPattern.eventType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.fxmisc.wellbehaved.event.EventPattern.keyPressed;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.fxmisc.wellbehaved.event.EventPattern.keyReleased;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.fxmisc.wellbehaved.event.EventPattern.mousePressed;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.ui.textfield.SyntaxHighlightingSupportedInput.PLACEHOLDER_REGEX;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import org.fxmisc.richtext.Caret;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import org.fxmisc.richtext.StyleClassedTextArea;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import org.fxmisc.richtext.model.StyleSpans;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import org.fxmisc.richtext.model.StyleSpansBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import org.fxmisc.wellbehaved.event.EventPattern;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import org.fxmisc.wellbehaved.event.InputMap;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import org.fxmisc.wellbehaved.event.Nodes;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import org.reactfx.Subscription;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.beans.property.ReadOnlyStringProperty;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.control.TextFormatter;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A single line text area utilising RichTextFX to support syntax highlighting of user input. This has some code which"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * is adapted from OverrideBehaviorDemo and JavaKeywordsDemo in RichTextFX."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class CommandTextField extends Region {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String PREFIX_STYLE_PREFIX \u003d \"prefix\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String ARGUMENT_STYLE_PREFIX \u003d \"arg\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String COMMAND_WORD_STYLE \u003d \"command-word\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String PLACEHOLDER_STYLE \u003d \"placeholder\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String STRING_STYLE \u003d \"string\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String CSS_FILE_PATH \u003d \"/view/syntax-highlighting.css\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static InputMap\u003cEvent\u003e consumeCopyPasteEvent \u003d InputMap.consume(EventPattern.anyOf("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            keyPressed(C, SHIFT_ANY, SHORTCUT_DOWN),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            keyPressed(V, SHIFT_ANY, SHORTCUT_DOWN),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            keyReleased(C, SHIFT_ANY, SHORTCUT_DOWN),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            keyReleased(V, SHIFT_ANY, SHORTCUT_DOWN)));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static InputMap\u003cEvent\u003e consumeTabKey \u003d InputMap.consume(EventPattern.anyOf("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            keyPressed(TAB, SHIFT_ANY, SHORTCUT_ANY)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static InputMap\u003cEvent\u003e consumeEnterKeyEvent \u003d InputMap.consume(EventPattern.anyOf("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            keyPressed(ENTER, SHIFT_ANY, SHORTCUT_ANY),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            keyReleased(ENTER, SHIFT_ANY, SHORTCUT_ANY)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static InputMap\u003cEvent\u003e consumeUndoRedoEvent \u003d InputMap.consume(EventPattern.anyOf("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            keyPressed(Y, SHIFT_ANY, SHORTCUT_DOWN),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            keyPressed(KeyCode.Z, SHIFT_ANY, SHORTCUT_DOWN),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            keyReleased(Y, SHIFT_ANY, SHORTCUT_DOWN),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            keyReleased(KeyCode.Z, SHIFT_ANY, SHORTCUT_DOWN)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static InputMap\u003cEvent\u003e consumeMouseDragEvent \u003d InputMap.consume(EventPattern.anyOf("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            eventType(MouseEvent.MOUSE_DRAGGED),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            eventType(MouseEvent.DRAG_DETECTED),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            mousePressed().unless(e -\u003e e.getClickCount() \u003d\u003d 1 \u0026\u0026 !e.isShiftDown())));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private TextField functionalTextField;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private StyleClassedTextArea visibleTextArea;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private InputHistory inputHistory;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Map\u003cString, SyntaxHighlightingSupportedInput\u003e stringToSupportedCommands;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private AutofillSuggestionMenu autofillMenu;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private StringProperty currentCommand;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Subscription syntaxHighlightSubscription;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public CommandTextField() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // to store patterns/syntax"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        stringToSupportedCommands \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        currentCommand \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        //--------------- actual text field with auto fill menu --------------"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        functionalTextField \u003d new TextField();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        autofillMenu \u003d new AutofillSuggestionMenu(functionalTextField, currentCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        functionalTextField.setContextMenu(autofillMenu);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        functionalTextField.setTextFormatter(new TextFormatter\u003cString\u003e(this::placeholderReplacement));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        //------------ visible text area ---------------"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        visibleTextArea \u003d new StyleClassedTextArea();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        visibleTextArea.setId(\"styled\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        visibleTextArea.setDisable(true);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        functionalTextField.focusedProperty().addListener((observableValue, aBoolean, t1) -\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (t1) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                visibleTextArea.setShowCaret(Caret.CaretVisibility.ON);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                visibleTextArea.setShowCaret(Caret.CaretVisibility.OFF);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        });"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        visibleTextArea.setShowCaret(Caret.CaretVisibility.ON);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        functionalTextField.caretPositionProperty().addListener((unused1, unused2, position) -\u003e {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            visibleTextArea.displaceCaret((int) position);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            visibleTextArea.requestFollowCaret();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        });"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // --------- input history -------"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        inputHistory \u003d new InputHistory();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        functionalTextField.addEventFilter(KeyEvent.KEY_PRESSED, keyEvent -\u003e {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (keyEvent.getCode().equals(UP)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    replaceWithPreviousInput();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                } catch (NoSuchElementException ignore) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    // ignore"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            } else if (keyEvent.getCode().equals(DOWN)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    replaceWithNextInput();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                } catch (NoSuchElementException ignore) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    // ignore"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        });"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // to overlay elements"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        functionalTextField.setBackground(Background.EMPTY);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        functionalTextField.setOpacity(0.0);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        StackPane stackPane \u003d new StackPane();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        stackPane.setId(\"SyntaxBox\"); // for css styling css"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        stackPane.getChildren().addAll(visibleTextArea, functionalTextField);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        getChildren().add(stackPane);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        //------------ for alignment of actual and visible text area ---------------"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        functionalTextField.setPadding(Insets.EMPTY);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        functionalTextField.setBackground(Background.EMPTY);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // ----- sizing ------"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        functionalTextField.fontProperty().addListener((unused1, unused2, font) -\u003e {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            double h \u003d font.getSize() + 5;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            visibleTextArea.setPrefHeight(h);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            visibleTextArea.setMaxHeight(h);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            visibleTextArea.setMinHeight(h);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            functionalTextField.setPrefHeight(h);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            functionalTextField.setMaxHeight(h);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            functionalTextField.setMinHeight(h);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        });"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        widthProperty().addListener((unused1, unused2, width) -\u003e {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            functionalTextField.setPrefWidth(width.doubleValue());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            functionalTextField.setMinWidth(width.doubleValue());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            functionalTextField.setMaxWidth(width.doubleValue());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            visibleTextArea.setPrefWidth(width.doubleValue());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            visibleTextArea.setMinWidth(width.doubleValue());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            visibleTextArea.setMaxWidth(width.doubleValue());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        });"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Nodes.addInputMap(functionalTextField, consumeCopyPasteEvent);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Nodes.addInputMap(functionalTextField, consumeUndoRedoEvent);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Nodes.addInputMap(functionalTextField, consumeTabKey);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Nodes.addInputMap(functionalTextField, consumeMouseDragEvent);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Nodes.addInputMap(visibleTextArea, consumeUndoRedoEvent);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Nodes.addInputMap(visibleTextArea, consumeEnterKeyEvent);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Nodes.addInputMap(visibleTextArea, consumeTabKey);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Nodes.addInputMap(visibleTextArea, consumeMouseDragEvent);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Clears the text."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        functionalTextField.clear();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        visibleTextArea.clear();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Commits the text to history and clears the text field."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void commitAndFlush() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String input \u003d getText();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        inputHistory.push(input);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        clear();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Inserts the previous input in command history character by character."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @throws NoSuchElementException"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void replaceWithPreviousInput() throws NoSuchElementException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String previous \u003d inputHistory.getPreviousInput();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // if no exception thrown"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        clear();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        for (Character character : previous.toCharArray()) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            functionalTextField.insertText(functionalTextField.getLength(), character.toString());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Inserts the next input in input history character by character."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @throws NoSuchElementException"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void replaceWithNextInput() throws NoSuchElementException {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String next \u003d inputHistory.getNextInput();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // if no exception thrown"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        clear();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        for (Character character : next.toCharArray()) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            functionalTextField.insertText(functionalTextField.getLength(), character.toString());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Filters placeholders from input before returning value."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return The text property value of the text area with placeholders replaced with an empty String."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return functionalTextField.getText().replaceAll(PLACEHOLDER_REGEX, \"\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ReadOnlyStringProperty textProperty() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return functionalTextField.textProperty();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Enable syntax highlighting."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void enableSyntaxHighlighting() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        syntaxHighlightSubscription \u003d"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                visibleTextArea.multiPlainChanges()"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        .successionEnds(Duration.ofMillis(500))"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        .subscribe(ignore -\u003e {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                            visibleTextArea.setStyleSpans("
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                                    0, computeHighlighting(visibleTextArea.getText()));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        });"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Sets the style class of all the text to the style class provided."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param styleClass style class to apply to the text in the text area."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void overrideStyle(String styleClass) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        StyleSpansBuilder\u003cCollection\u003cString\u003e\u003e spansBuilder \u003d new StyleSpansBuilder\u003c\u003e();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        spansBuilder.add(Collections.singleton(styleClass), visibleTextArea.getLength());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        visibleTextArea.setStyleSpans(0, spansBuilder.create());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (syntaxHighlightSubscription !\u003d null) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            syntaxHighlightSubscription.unsubscribe();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Import the css stylesheet containing the different styles for the syntax highlighter."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void importStyleSheet(Scene parentSceneOfNode) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        parentSceneOfNode"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .getStylesheets()"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .add(CommandTextField.class.getResource(CSS_FILE_PATH).toExternalForm());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        enableSyntaxHighlighting();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Add support for syntax highlighting and auto fill for the specified command."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param command          The command word"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param prefixes         List of prefixes required in the command"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param optionalPrefixes"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void addSupportFor(String command, List\u003cPrefix\u003e prefixes, List\u003cPrefix\u003e optionalPrefixes) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        stringToSupportedCommands.put("
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                command,"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new SyntaxHighlightingSupportedInput(command, prefixes, optionalPrefixes));"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        autofillMenu.addCommand(command, prefixes, optionalPrefixes);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Remove support for syntax highlighting and auto fill for the specified command."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param command"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void removeSupportFor(String command) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (stringToSupportedCommands.containsKey(command)) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            stringToSupportedCommands.remove(command);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            autofillMenu.removeCommand(command);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns the StyleSpans to apply rich text formatting to the text area."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * This method decides which pattern to use to highlight syntax."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param text The text to be formatted."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return the StyleSpans to apply rich text formatting to the text area."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private StyleSpans\u003cCollection\u003cString\u003e\u003e computeHighlighting(String text) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        StyleSpansBuilder\u003cCollection\u003cString\u003e\u003e spansBuilder \u003d new StyleSpansBuilder\u003c\u003e();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (currentCommand.length().get() \u003e 0) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            Pattern p \u003d stringToSupportedCommands.get(currentCommand.get()).getPattern();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            int prefixCount \u003d stringToSupportedCommands.get(currentCommand.get()).getPrefixCount();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return computeHighlighting(text, p, prefixCount);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // if not a command"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        spansBuilder.add(Collections.emptyList(), text.length());"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return spansBuilder.create();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns the StyleSpans to apply rich text formatting to the text area, using a given pattern. (adapted from"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * RichTextFX\u0027s JavaKeywordsDemo.java)"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param text        The text to be formatted (guaranteed that the input\u0027s command word matches this pattern)."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param pattern     The pattern used to apply formatting."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param prefixcount The number of prefixes in the command."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return the StyleSpans to apply rich text formatting to the text area."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private StyleSpans\u003cCollection\u003cString\u003e\u003e computeHighlighting(String text, Pattern pattern, int prefixcount) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // pattern should match the command word"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(text);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        int lastKwEnd \u003d 0;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        StyleSpansBuilder\u003cCollection\u003cString\u003e\u003e spansBuilder \u003d new StyleSpansBuilder\u003c\u003e();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String lastPrefixStyle \u003d null;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // style command word"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (matcher.find()) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (currentCommand.length().get() \u003e 0) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                spansBuilder.add(Collections.emptyList(), matcher.start() - lastKwEnd);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                spansBuilder.add(Collections.singleton(COMMAND_WORD_STYLE), matcher.end() - matcher.start());"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                lastKwEnd \u003d matcher.end();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        while (matcher.find()) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // highlight command word"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            String styleClass \u003d null;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (matcher.group(PLACEHOLDER_STYLE) !\u003d null) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                styleClass \u003d PLACEHOLDER_STYLE;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (styleClass !\u003d null) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                spansBuilder.add(Collections.emptyList(), matcher.start() - lastKwEnd);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                spansBuilder.add(Collections.singleton(styleClass), matcher.end() - matcher.start());"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                lastKwEnd \u003d matcher.end();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // styleclass for prefix"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            for (int groupNum \u003d 1; groupNum \u003c\u003d prefixcount; groupNum++) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                if (matcher.group(PREFIX_STYLE_PREFIX + groupNum) !\u003d null) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    int styleNumber \u003d (groupNum % 4) + 1;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    lastPrefixStyle \u003d PREFIX_STYLE_PREFIX + styleNumber;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    styleClass \u003d lastPrefixStyle;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (styleClass !\u003d null) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                spansBuilder.add(Collections.emptyList(), matcher.start() - lastKwEnd);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                spansBuilder.add(Collections.singleton(styleClass), matcher.end() - matcher.start());"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                lastKwEnd \u003d matcher.end();"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // styleclass for arguments"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (matcher.group(ARGUMENT_STYLE_PREFIX) !\u003d null) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                if (lastPrefixStyle !\u003d null) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    styleClass \u003d lastPrefixStyle.replace(PREFIX_STYLE_PREFIX, ARGUMENT_STYLE_PREFIX);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    styleClass \u003d STRING_STYLE;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (styleClass !\u003d null) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                spansBuilder.add(Collections.emptyList(), matcher.start() - lastKwEnd);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                spansBuilder.add(Collections.singleton(styleClass), matcher.end() - matcher.start());"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                lastKwEnd \u003d matcher.end();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        spansBuilder.add(Collections.emptyList(), text.length() - lastKwEnd);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return spansBuilder.create();"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Take a {@code TextFormatter.Change} and returns a new {@code TextFormatter.Change} with appropriate modifcation"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * in order to handle auto fill and syntax suggestion."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     *"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param change The original non-formatted changes."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return The formatted changes."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private TextFormatter.Change placeholderReplacement(TextFormatter.Change change) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (change.isContentChange()) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // prevent insertion of newline and \u003c \u003e characters"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            change.setText(change.getText().replaceAll(PLACEHOLDER_REGEX, \"\"));"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            change.setText(change.getText().replaceAll(\"[\u003c\u003e\\\\n\\\\r]\", \"\"));"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            String commandWordRegex \u003d String.join(\"|\", stringToSupportedCommands.keySet());"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            Matcher command \u003d"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    Pattern.compile(\"^\\\\s*(?\u003cCOMMAND\u003e\" + commandWordRegex + \")\\\\s+\")"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                            .matcher(change.getControlNewText());"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // add placeholder if match prefix"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (command.find()) {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                String cmd \u003d command.group(\"COMMAND\");"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                currentCommand.setValue(cmd);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                currentCommand.setValue(\"\");"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // find prefixes"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // find arguments"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // if no args insert placeholder"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // if no prefix remove placeholder"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            if (!currentCommand.get().isBlank() \u0026\u0026 change.isAdded()) {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                String cmd \u003d currentCommand.get();"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                String beforecaret \u003d change.getControlNewText().substring(0, change.getRangeEnd() + 1);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                List\u003cString\u003e tokens \u003d List.of(beforecaret.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                String possiblePrefix \u003d tokens.get(tokens.size() - 1);"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                if (stringToSupportedCommands.get(cmd).getPrefix(possiblePrefix) !\u003d null) {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    String desc \u003d stringToSupportedCommands.get(cmd).getDescription(possiblePrefix);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    if (beforecaret.endsWith(\" \" + possiblePrefix)) {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        change.setText(change.getText() + \"\u003c\" + desc + \"\u003e\");"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                }"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            Pattern placeHolderPattern \u003d Pattern.compile(PLACEHOLDER_REGEX);"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            Matcher placeholder \u003d placeHolderPattern.matcher(change.getControlText());"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // replace the entire placeholder if change occurs within it"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            while (placeholder.find()) {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                // find group until caret lies inside"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                if ((change.isAdded()"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        \u0026\u0026 change.getControlCaretPosition() \u003c\u003d placeholder.end()"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        \u0026\u0026 change.getControlCaretPosition() \u003e\u003d placeholder.start())"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        || ((change.isDeleted()"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        \u0026\u0026 change.getControlCaretPosition() \u003c\u003d placeholder.end()"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        \u0026\u0026 change.getControlCaretPosition() \u003e\u003d placeholder.start()))) {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    String before \u003d change.getControlText().substring(0, placeholder.start());"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    String mid \u003d change.getText();"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    String after \u003d change.getControlText().substring(placeholder.end());"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    String replacement \u003d before + mid + after;"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    change.setRange(0, change.getControlText().length());"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    change.setText(replacement);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    change.setCaretPosition((before + mid).length());"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    change.setAnchor((before + mid).length());"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                }"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (change.isReplaced()) {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            visibleTextArea.replaceText(change.getRangeStart(), change.getRangeEnd(), change.getText());"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } else if (change.isDeleted()) {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            visibleTextArea.deleteText(change.getRangeStart(), change.getRangeEnd());"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } else if (change.isAdded()) {"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            visibleTextArea.insertText(change.getRangeStart(), change.getText());"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return change;"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 500
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/textfield/InputHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.ui.textfield;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * History of inputted commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class InputHistory {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Stack\u003cString\u003e commandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private ListIterator\u003cString\u003e iterator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public InputHistory() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandHistory \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        iterator \u003d commandHistory.listIterator();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Adds an input to the history and resets the iterator."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param string the input to push."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void push(String string) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        commandHistory.push(string);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // reset iterator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        iterator \u003d commandHistory.listIterator(commandHistory.size());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public String getPreviousInput() throws NoSuchElementException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return iterator.previous();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public String getNextInput() throws NoSuchElementException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return iterator.next();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/textfield/SyntaxHighlightingSupportedInput.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.ui.textfield;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Represents a supported input for syntax highlighting."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class SyntaxHighlightingSupportedInput {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    static final String PLACEHOLDER_REGEX \u003d \"(?\u003cplaceholder\u003e\u003c[^\u003e]+\u003e)\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // param1 commandword, param2 concat list of prefixes"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String INPUT_PATTERN_TEMPLATE \u003d \"(?\u003cCOMMAND\u003e%s)|\" + PLACEHOLDER_REGEX + \"|%s(?\u003carg\u003e\\\\S+)\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private List\u003cPrefix\u003e prefixes;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Pattern pattern;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public SyntaxHighlightingSupportedInput(String command, List\u003cPrefix\u003e requiredPrefixes,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                                            List\u003cPrefix\u003e optionalPrefixes) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.prefixes \u003d new ArrayList\u003c\u003e(requiredPrefixes);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.prefixes.addAll(optionalPrefixes);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.pattern \u003d compileCommandPattern(command, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public String getDescription(String pre) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Prefix pref \u003d getPrefix(pre);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (pref !\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return pref.getDescriptionOfArgument();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Pattern getPattern() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return pattern;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Prefix getPrefix(String pre) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return prefixes.stream().filter(x -\u003e x.toString().equals(pre)).findFirst().orElse(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public int getPrefixCount() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return prefixes.size();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public List\u003cPrefix\u003e getPrefixes() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new ArrayList\u003c\u003e(prefixes);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Compile pattern for a command input syntax used for matching during syntax highlighting."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param commandWord The command word of the command."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @param prefixes The list of prefixes of the command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * @return The compiled pattern."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Pattern compileCommandPattern(String commandWord, List\u003cPrefix\u003e prefixes) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        StringBuilder prefixesPatterns \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        for (Prefix prefix : prefixes) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            prefixesPatterns.append(String.format(\"(?\u003cprefix%s\u003e %s)|\", count, prefix.getPrefix()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return Pattern.compile(String.format(INPUT_PATTERN_TEMPLATE, commandWord, prefixesPatterns.toString()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 76
    }
  },
  {
    "path": "src/main/resources/view/BudgetCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.control.ProgressBar?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"budgetCardPane\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER\" maxHeight\u003d\"70.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u003cGridPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        \u003cColumnConstraints halignment\u003d\"LEFT\" hgrow\u003d\"ALWAYS\" percentWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        \u003cColumnConstraints halignment\u003d\"LEFT\" hgrow\u003d\"ALWAYS\" percentWidth\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"ALWAYS\" percentWidth\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        \u003cRowConstraints valignment\u003d\"CENTER\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        \u003cLabel fx:id\u003d\"budgetName\" text\u003d\"budget name\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                            \u003cfont\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                                \u003cFont size\u003d\"21.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                            \u003c/font\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        \u003cTextFlow textAlignment\u003d\"CENTER\" GridPane.columnIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                                \u003cLabel fx:id\u003d\"budgetStart\" text\u003d\"\\$start\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                                \u003cLabel fx:id\u003d\"separator\" text\u003d\" to \" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                                \u003cLabel fx:id\u003d\"budgetEnd\" text\u003d\"\\$end\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u003cStackPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                                \u003cProgressBar fx:id\u003d\"budgetProgressBar\" progress\u003d\"0.34\" styleClass\u003d\"budget-bar\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        \u003cTextFlow textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                                \u003cLabel fx:id\u003d\"budgetTotalAmount\" text\u003d\"\\$total\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                                \u003cLabel fx:id\u003d\"divider\" text\u003d\"/\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                                \u003cLabel fx:id\u003d\"budgetAllocatedAmount\" text\u003d\"\\$amount\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        \u003cLabel fx:id\u003d\"proportionUsed\" text\u003d\"[percentage]\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                           \u003cpadding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                              \u003cInsets left\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                           \u003c/padding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "briyanii": 58,
      "anqichen9856": 9
    }
  },
  {
    "path": "src/main/resources/view/BudgetPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003cBorderPane fx:id\u003d\"budgetPanel\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    \u003ctop\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        \u003cStackPane fx:id\u003d\"budgetCardPlaceholder\" BorderPane.alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    \u003c/top\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    \u003ccenter\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        \u003cStackPane fx:id\u003d\"expenseListPanelPlaceholder\" BorderPane.alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    \u003c/center\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "briyanii": 19
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003cStackPane fx:id\u003d\"commandInputAreaPlaceholder\" styleClass\u003d\"stack-pane\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "           xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"/\u003e"
      }
    ],
    "authorContributionMap": {
      "briyanii": 2,
      "-": 4
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "* {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -colour-light: #42b883;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -colour-medium: #347474;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -colour-medium2: #73969c;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -colour-dark: #35495e;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -colour-highlight: #ff7e67;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -moneyout: #cc2c29;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -black1: black;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -grey1: #aaaaaa;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /*-status-background-colour: derive(#1d1d1d, 30%);*/"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -status-background-colour: -colour-medium;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /*-status-border-colour: derive(#1d1d1d, 30%);*/"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -status-border-colour: transparent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -text-colour1: white;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -font-lightweight: \"Droid Sans Mono\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -font-dark: black;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -font-semibold: \"Droid Sans Mono\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -progress-bar-overbudget: #ac4e47;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    -progress-bar-nearbudget: #fda50f;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -progress-bar-inbudget: #42b883;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-font-family: \"Droid Sans Mono\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-font-family: -font-semibold;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-background-color: -colour-medium2;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-text-fill: -black1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-background-color: -colour-medium;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-background-color: -status-background-colour;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-font-family: -font-lightweight;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-font-size: 12px;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-text-fill: -font-dark;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-text-fill: -black1 !important;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-font-family: -font-lightweight;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-text-fill: -text-colour1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-background-color: -status-background-colour;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-border-color: -status-border-colour;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-text-fill: -text-colour1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-background-color: -status-background-colour;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-text-fill: -text-colour1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-font-size: 10px;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-background-color: -status-background-colour;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-font-family: -font-lightweight;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-text-fill: -text-colour1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": ".placeholder {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-background-color: -colour-medium2;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": ".placeholder .label{"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-font-family: -font-lightweight;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "briyanii"
        },
        "content": "#titlePlaceHolder {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-background-color: -colour-medium;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "briyanii"
        },
        "content": "#titlePlaceHolder .label {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-text-fill: -text-colour1;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-font-family: -font-semibold;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-padding: 10;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/*"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Author: Pedro 5Duque Vieira"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "briyanii"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-max-width: 0;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-pref-width: 0;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "briyanii"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-fill: transparent;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "briyanii"
        },
        "content": "#budgetCardPane {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-background-color: -colour-medium;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-padding: 10;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "briyanii"
        },
        "content": ".progress-bar \u003e .track {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-background-color: -colour-medium2;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "briyanii"
        },
        "content": ".progress-bar .bar {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-background-color: -progress-bar-colour;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "briyanii"
        },
        "content": ".command-box {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-background-color: -colour-medium;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "briyanii"
        },
        "content": "#expenseCardPane {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-background-color: #e6e6e6;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-background-radius: 10;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-effect: dropshadow(gaussian, rgba(31, 31, 31, 0.37), 10, .01, 1, 5)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "briyanii"
        },
        "content": "#expenseCardPane #clip {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-fill: -colour-highlight;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "briyanii"
        },
        "content": "#expenseCardPane .label {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-font-family: -font-semibold;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "briyanii"
        },
        "content": "#expenseCardPane #index {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-text-fill: -grey1;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "briyanii"
        },
        "content": "#expenseCardPane #price {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-font-family: -font-semibold;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-text-fill: -moneyout;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-padding: 0 5 0 0;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "czkay"
        },
        "content": "#eventCardPane {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "czkay"
        },
        "content": "    -fx-background-color: #e6e6e6;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "czkay"
        },
        "content": "    -fx-background-radius: 10;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "czkay"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "czkay"
        },
        "content": "    -fx-effect: dropshadow(gaussian, rgba(31, 31, 31, 0.37), 10, .01, 1, 5)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "czkay"
        },
        "content": "#eventCardPane #clip {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "czkay"
        },
        "content": "    -fx-fill: -colour-highlight;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "czkay"
        },
        "content": "#eventCardPane .label {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "czkay"
        },
        "content": "    -fx-font-family: -font-semibold;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "czkay"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "czkay"
        },
        "content": "#eventCardPane #index {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "czkay"
        },
        "content": "    -fx-text-fill: -grey1;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "czkay"
        },
        "content": "#eventCardPane #price {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "czkay"
        },
        "content": "    -fx-font-family: -font-semibold;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "czkay"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "czkay"
        },
        "content": "    -fx-text-fill: -moneyout;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "czkay"
        },
        "content": "    -fx-padding: 0 5 0 0;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-font-family: -font-lightweight;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-text-fill: -font-dark;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "czkay"
        },
        "content": "#filterField, #expenseListPanel, #eventListPanel, #expenseWebpage, #eventWebpage {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-background-color: -colour-medium2;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 95,
      "czkay": 18,
      "anqichen9856": 1,
      "-": 123
    }
  },
  {
    "path": "src/main/resources/view/EventListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003cBorderPane xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": "    \u003ccenter\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "        \u003cAnchorPane fx:id\u003d\"eventCardPane\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "                \u003cGridPane alignment\u003d\"CENTER_LEFT\" minWidth\u003d\"400.0\" AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "                          AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "                        \u003cColumnConstraints fillWidth\u003d\"false\" halignment\u003d\"CENTER\" hgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"ALWAYS\" maxWidth\u003d\"400.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "                        \u003cColumnConstraints /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    \u003cCircle fx:id\u003d\"clip\" fill\u003d\"#a1d1ff\" radius\u003d\"30.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "                            strokeWidth\u003d\"0.0\" translateX\u003d\"-20.0\" translateY\u003d\"-20.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    \u003cImageView fx:id\u003d\"icon\" fitHeight\u003d\"60.0\" fitWidth\u003d\"60.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": "                               translateX\u003d\"-20.0\" translateY\u003d\"-20.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    \u003cLabel fx:id\u003d\"description\" text\u003d\"Label\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    \u003cLabel fx:id\u003d\"price\" alignment\u003d\"CENTER_RIGHT\" minWidth\u003d\"-Infinity\" text\u003d\"\\$price\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": "                           textAlignment\u003d\"RIGHT\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"2\" GridPane.halignment\u003d\"RIGHT\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czkay"
        },
        "content": "                           GridPane.hgrow\u003d\"ALWAYS\" GridPane.rowSpan\u003d\"2147483647\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    \u003cLabel fx:id\u003d\"budgetName\" alignment\u003d\"CENTER_RIGHT\" minWidth\u003d\"-Infinity\" text\u003d\"\\$Under budget: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czkay"
        },
        "content": "                           textAlignment\u003d\"RIGHT\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"2\" GridPane.halignment\u003d\"RIGHT\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": "                           GridPane.hgrow\u003d\"ALWAYS\" GridPane.rowIndex\u003d\"2\" GridPane.rowSpan\u003d\"2147483647\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    \u003cFlowPane fx:id\u003d\"categories\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    \u003cHBox GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "czkay"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "czkay"
        },
        "content": "                            \u003cLabel fx:id\u003d\"date\" text\u003d\"placeholder\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "czkay"
        },
        "content": "                            \u003cLabel fx:id\u003d\"time\" text\u003d\"placeholder\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "czkay"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    \u003cLabel fx:id\u003d\"index\" text\u003d\"index\" GridPane.rowIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "czkay"
        },
        "content": "                        \u003cRowConstraints vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "czkay"
        },
        "content": "                        \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "czkay"
        },
        "content": "                        \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "czkay"
        },
        "content": "                \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "czkay"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "czkay"
        },
        "content": "        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "czkay"
        },
        "content": "    \u003c/center\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "czkay"
        },
        "content": "    \u003ctop\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "czkay"
        },
        "content": "        \u003cRegion prefHeight\u003d\"20.0\" prefWidth\u003d\"200.0\" BorderPane.alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "czkay"
        },
        "content": "    \u003c/top\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "czkay"
        },
        "content": "    \u003cleft\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "czkay"
        },
        "content": "        \u003cRegion prefWidth\u003d\"20.0\" BorderPane.alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "czkay"
        },
        "content": "    \u003c/left\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "czkay": 60
    }
  },
  {
    "path": "src/main/resources/view/EventPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003cBorderPane fx:id\u003d\"eventPanel\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "    \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "    \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": "    \u003ctop\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "        \u003cStackPane fx:id\u003d\"eventCardPlaceholder\" BorderPane.alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "    \u003c/top\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "    \u003ccenter\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": "        \u003cStackPane fx:id\u003d\"eventListPanelPlaceholder\" BorderPane.alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "    \u003c/center\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "czkay": 18
    }
  },
  {
    "path": "src/main/resources/view/ExpenseListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003cBorderPane xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    \u003ccenter\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        \u003cAnchorPane fx:id\u003d\"expenseCardPane\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u003cGridPane alignment\u003d\"CENTER_LEFT\" minWidth\u003d\"400.0\" AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                          AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        \u003cColumnConstraints fillWidth\u003d\"false\" halignment\u003d\"CENTER\" hgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"ALWAYS\" maxWidth\u003d\"400.0\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        \u003cColumnConstraints/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    \u003cCircle fx:id\u003d\"clip\" fill\u003d\"#a1d1ff\" radius\u003d\"30.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                            strokeWidth\u003d\"0.0\" translateX\u003d\"-20.0\" translateY\u003d\"-20.0\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    \u003cImageView fx:id\u003d\"icon\" fitHeight\u003d\"60.0\" fitWidth\u003d\"60.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                               translateX\u003d\"-20.0\" translateY\u003d\"-20.0\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    \u003cLabel fx:id\u003d\"description\" text\u003d\"Label\" GridPane.columnIndex\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    \u003cLabel fx:id\u003d\"price\" alignment\u003d\"CENTER_RIGHT\" minWidth\u003d\"-Infinity\" text\u003d\"\\$price\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                           textAlignment\u003d\"RIGHT\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"2\" GridPane.halignment\u003d\"RIGHT\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                           GridPane.hgrow\u003d\"ALWAYS\" GridPane.rowSpan\u003d\"2147483647\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    \u003cFlowPane fx:id\u003d\"categories\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    \u003cHBox GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                            \u003cLabel fx:id\u003d\"date\" text\u003d\"placeholder\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                            \u003cLabel fx:id\u003d\"time\" text\u003d\"placeholder\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    \u003cLabel fx:id\u003d\"index\" text\u003d\"index\" GridPane.rowIndex\u003d\"2\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        \u003cRowConstraints vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        \u003cRowConstraints/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        \u003cRowConstraints/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    \u003c/center\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    \u003ctop\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        \u003cRegion prefHeight\u003d\"20.0\" prefWidth\u003d\"200.0\" BorderPane.alignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    \u003c/top\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    \u003cleft\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        \u003cRegion prefWidth\u003d\"20.0\" BorderPane.alignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    \u003c/left\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "briyanii": 57
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-background: transparent"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- TODO: set a more appropriate initial size --\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003cfx:root maximized\u003d\"true\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets left\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "briyanii": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/resources/view/ListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003cBorderPane xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "   \u003ccenter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "      \u003cListView fx:id\u003d\"listView\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "   \u003c/center\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "   \u003ctop\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "      \u003cStackPane fx:id\u003d\"titlePlaceHolder\" BorderPane.alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "   \u003c/top\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "briyanii": 14
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"1000.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"MooLah\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        \u003cImage url\u003d\"@/images/moolah.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \u003cBorderPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u003ctop\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    \u003cMenuBar fx:id\u003d\"menuBar\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u003c/top\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u003cbottom\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    \u003cVBox prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100.0\" minHeight\u003d\"100.0\" prefHeight\u003d\"100.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                                    \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"command-box\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                                    \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u003c/bottom\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u003ccenter\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"panelPlaceholder\" styleClass\u003d\"placeholder\" BorderPane.alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \u003c/center\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "briyanii": 22,
      "anqichen9856": 1,
      "-": 37
    }
  },
  {
    "path": "src/main/resources/view/PanelView.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003cStackPane fx:id\u003d\"panelPlaceholder\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\" /\u003e"
      }
    ],
    "authorContributionMap": {
      "briyanii": 6
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "briyanii": 2,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/StatsWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c!-- TODO: set a more appropriate initial size --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003cfx:root maximized\u003d\"true\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003c/scene\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "briyanii": 5,
      "qweiping31415": 24
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cLabel fx:id\u003d\"saveLocationStatus\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "briyanii": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/resources/view/TranspiredEventsWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003c!-- TODO: set a more appropriate initial size --\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "\u003cfx:root maximized\u003d\"true\" title\u003d\"Transpired events\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    \u003cLabel fx:id\u003d\"message\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    \u003cButton fx:id\u003d\"yesButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#addExpenseFromEvent\" text\u003d\"Yes\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "                            \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    \u003cButton fx:id\u003d\"noButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#ignore\" text\u003d\"No\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czkay"
        },
        "content": "                            \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czkay"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "czkay"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "czkay"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "czkay"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "czkay"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "czkay"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "czkay"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czkay"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "czkay"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "czkay"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "czkay": 45,
      "briyanii": 1
    }
  },
  {
    "path": "src/main/resources/view/syntax-highlighting.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "#SyntaxBox {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-font-family: Monospaced;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "#SyntaxBox .text-field {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-opacity: .3;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-font-family: Monospaced;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-text-fill: none;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-fill: black !important;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -rtfx-background-color: rgba(255, 0, 0, 0.51);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": ".string {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-fill: black;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": ".command-word {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-fill: #710071;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": ".placeholder {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-fill: black;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -rtfx-background-color: lightgrey;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": ".prefix1 {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-fill: #004d71;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": ".arg1 {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-fill: #004d71;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": ".prefix2 {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-fill: #0c910b;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": ".arg2 {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-fill: #0c910b;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": ".prefix3 {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-fill: #a24400;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": ".arg3 {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-fill: #a24400;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": ".prefix4 {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-fill: #690700;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": ".arg4 {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    -fx-fill: #690700;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/AliasMappingsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.AliasTestUtil.ALIAS_ADD_WITH_ARGUMENTS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.AliasTestUtil.ALIAS_A_TO_B;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.AliasTestUtil.ALIAS_B_TO_C;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.AliasTestUtil.ALIAS_C_TO_A;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.AliasTestUtil.ALIAS_NAME_ADD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.AliasTestUtil.ALIAS_NAME_ALIAS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.AliasTestUtil.ALIAS_NAME_CLEAR;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.AliasTestUtil.ALIAS_NAME_DELETE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.AliasTestUtil.ALIAS_NAME_EDIT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.AliasTestUtil.ALIAS_NAME_EXIT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.AliasTestUtil.ALIAS_NAME_FIND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.AliasTestUtil.ALIAS_NAME_HELP;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.AliasTestUtil.ALIAS_NAME_LIST;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.exceptions.RecursiveAliasException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "class AliasMappingsTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void aliasExists() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        AliasMappings aliasMappings \u003d new AliasMappings();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            aliasMappings.addAlias(ALIAS_A_TO_B);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } catch (RecursiveAliasException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new AssertionError(\"RecursiveAliasException should not be thrown\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        aliasMappings.aliasWithNameExists(ALIAS_A_TO_B.getAliasName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void aliasUsesReservedName_aliasUsesReservedName_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        AliasMappings aliasMappings \u003d new AliasMappings();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(aliasMappings.aliasUsesReservedName(ALIAS_NAME_ADD));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(aliasMappings.aliasUsesReservedName(ALIAS_NAME_ALIAS));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(aliasMappings.aliasUsesReservedName(ALIAS_NAME_CLEAR));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(aliasMappings.aliasUsesReservedName(ALIAS_NAME_DELETE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(aliasMappings.aliasUsesReservedName(ALIAS_NAME_EDIT));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(aliasMappings.aliasUsesReservedName(ALIAS_NAME_EXIT));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(aliasMappings.aliasUsesReservedName(ALIAS_NAME_FIND));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(aliasMappings.aliasUsesReservedName(ALIAS_NAME_HELP));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(aliasMappings.aliasUsesReservedName(ALIAS_NAME_LIST));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void aliasUsesReservedName_aliasDoesNotUseReservedName_returnsFalse() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        AliasMappings aliasMappings \u003d new AliasMappings();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(aliasMappings.aliasUsesReservedName(new Alias(\"somethingelse\", \"ignored\")));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(aliasMappings.aliasUsesReservedName(new Alias(\"anotherNotCommand\", \"ignored\")));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void aliasCommandWordIsAlias_aliasCommandWordIsNotAliasNameOfExistingAlias_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // returns true after alias with that name is added, false before"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        AliasMappings aliasMappings \u003d new AliasMappings();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(aliasMappings.aliasCommandWordIsAlias(ALIAS_A_TO_B));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(aliasMappings.aliasCommandWordIsAlias(ALIAS_B_TO_C));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(aliasMappings.aliasCommandWordIsAlias(ALIAS_C_TO_A));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void aliasCommandWordIsAlias_aliasCommandWordIsAliasNameOfExistingAlias_returnsTrue() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // returns true after alias with that name is added, false before"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            AliasMappings aliasMappings \u003d new AliasMappings();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            aliasMappings \u003d aliasMappings.addAlias(ALIAS_A_TO_B);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            assertTrue(aliasMappings.aliasCommandWordIsAlias(ALIAS_C_TO_A));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } catch (RecursiveAliasException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new AssertionError(\"RecursiveAliasException should not be thrown\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            AliasMappings aliasMappings \u003d new AliasMappings();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            aliasMappings \u003d aliasMappings.addAlias(ALIAS_B_TO_C);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            assertTrue(aliasMappings.aliasCommandWordIsAlias(ALIAS_A_TO_B));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } catch (RecursiveAliasException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new AssertionError(\"RecursiveAliasException should not be thrown\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void addAlias_aliasCommandWordIsAlias_throwRecursiveAliasException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // right after"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(RecursiveAliasException.class, () -\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            new AliasMappings().addAlias(ALIAS_A_TO_B).addAlias(ALIAS_C_TO_A);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        });"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(RecursiveAliasException.class, () -\u003e {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            new AliasMappings().addAlias(ALIAS_C_TO_A).addAlias(ALIAS_B_TO_C);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        });"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(RecursiveAliasException.class, () -\u003e {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            new AliasMappings().addAlias(ALIAS_B_TO_C).addAlias(ALIAS_A_TO_B);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        });"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // with other aliases in between"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(RecursiveAliasException.class, () -\u003e {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            new AliasMappings().addAlias(ALIAS_A_TO_B).addAlias(ALIAS_B_TO_C).addAlias(ALIAS_C_TO_A);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            AliasMappings empty \u003d new AliasMappings();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            AliasMappings empty2 \u003d new AliasMappings();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            AliasMappings oneAlias \u003d empty.addAlias(ALIAS_A_TO_B);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            AliasMappings oneAlias2 \u003d empty2.addAlias(ALIAS_A_TO_B);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            AliasMappings oneAlias3 \u003d empty.addAlias(new Alias(\"a\", \"b\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            AliasMappings oneAlias4 \u003d new AliasMappings().addAlias(ALIAS_ADD_WITH_ARGUMENTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // different empty -\u003e true"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            assertEquals(empty, empty2);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // different empty add same -\u003e true"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            assertEquals(oneAlias, oneAlias2);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // same empty add similar -\u003e true"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            assertEquals(oneAlias, oneAlias3);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // different alias inside -\u003e false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            assertNotEquals(empty, oneAlias);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            assertNotEquals(oneAlias, oneAlias4);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } catch (RecursiveAliasException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new AssertionError(\"RecursiveAliasException should not be thrown\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 131
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/AliasTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.AliasTestUtil.ALIAS_A_TO_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "class AliasTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String VALID_ALIAS_NAME_1 \u003d \"name\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String VALID_ALIAS_NAME_2 \u003d \"nAm3\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String INVALID_ALIAS_NAME \u003d \"n@#é\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String VALID_INPUT \u003d \"7n1293jmj98(*@##*ybC (@*8 @9n wkdnqwdk   \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String WHITE_SPACE \u003d \"     \\n \\t  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        //same alias"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(ALIAS_A_TO_B, ALIAS_A_TO_B);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        //same inputs"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(new Alias(VALID_ALIAS_NAME_1, VALID_INPUT), new Alias(VALID_ALIAS_NAME_1, VALID_INPUT));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        //null false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertNotEquals(ALIAS_A_TO_B, null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        //not instance false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertNotEquals(ALIAS_A_TO_B, 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void isValidAliasName_validAliasName_returnsTrue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(Alias.isValidAliasName(VALID_ALIAS_NAME_1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(Alias.isValidAliasName(VALID_ALIAS_NAME_2));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void isValidAliasName_invalidAliasName_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Alias.isValidAliasName(INVALID_ALIAS_NAME));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Alias.isValidAliasName(WHITE_SPACE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void isValidInput_validInput_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(Alias.isValidInput(VALID_INPUT));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void isValidInput_invalidInput_returnFalse() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Alias.isValidInput(WHITE_SPACE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        final Index fifthExpenseIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(fifthExpenseIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(fifthExpenseIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(fifthExpenseIndex.equals(fifthExpenseIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(fifthExpenseIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(fifthExpenseIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(fifthExpenseIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 7,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/moolah_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.ListExpenseCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.ReadOnlyMooLah;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.Timekeeper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.storage.JsonMooLahStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        JsonMooLahStorage mooLahStorage \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                new JsonMooLahStorage(temporaryFolder.resolve(\"moolah.json\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        StorageManager storage \u003d new StorageManager(mooLahStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Timekeeper timekeeper \u003d new Timekeeper(logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String deleteCommand \u003d \"deleteexpense 9\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String listCommand \u003d ListExpenseCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertCommandSuccess(listCommand, ListExpenseCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    //        // Setup LogicManager with JsonMooLahIoExceptionThrowingStub"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    //        JsonMooLahStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    //                new JsonMooLahIoExceptionThrowingStub("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //                        temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        Timekeeper timekeeper \u003d new Timekeeper(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        logic \u003d new LogicManager(model, storage, timekeeper);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    // Execute add command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        String addCommand \u003d AddExpenseCommand.COMMAND_WORD + DESCRIPTION_DESC_CHICKEN + PRICE_DESC_CHICKEN;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        Expense expectedExpense \u003d new ExpenseBuilder(CHICKEN).withTags().build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        expectedModel.addExpense(expectedExpense);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void getFilteredExpenseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredExpenseList().remove(0));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand, \"\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getMooLah(), new UserPrefs(), model.getModelHistory());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand, \"\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static class JsonMooLahIoExceptionThrowingStub extends JsonMooLahStorage {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        private JsonMooLahIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void saveMooLah(ReadOnlyMooLah mooLah, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 10,
      "czkay": 17,
      "anqichen9856": 12,
      "-": 118
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.panel.PanelName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                false, false, PanelName.CURRENT)));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", null,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                true, false, PanelName.CURRENT)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", null,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                false, true, PanelName.CURRENT)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", null,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                true, false, PanelName.CURRENT).hashCode());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", null,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                false, true, PanelName.CURRENT).hashCode());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 7,
      "qweiping31415": 6,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERIOD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.EditExpenseCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.MooLah;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String VALID_DESCRIPTION_CHICKEN \u003d \"Chicken Rice\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String VALID_DESCRIPTION_TRANSPORT \u003d \"Taxi to work\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String VALID_PRICE_CHICKEN \u003d \"11111.11\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String VALID_PRICE_TRANSPORT \u003d \"222,22222\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static final String VALID_CATEGORY_FOOD \u003d \"FoOd\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static final String VALID_CATEGORY_TRANSPORT \u003d \"transport\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String VALID_UNIQUE_IDENTIFIER \u003d \"Expense@12341234-1234-1234-1234-123412341234\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String VALID_DESCRIPTION_SCHOOL \u003d \"school related expenses\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String VALID_AMOUNT_SCHOOL \u003d \"300\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String VALID_START_DATE_SCHOOL \u003d \"01-10-2019\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String VALID_PERIOD_SCHOOL \u003d \"month\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String DESCRIPTION_DESC_CHICKEN \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_CHICKEN;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String DESCRIPTION_DESC_TRANSPORT \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_TRANSPORT;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String PRICE_DESC_CHICKEN \u003d \" \" + PREFIX_PRICE + VALID_PRICE_CHICKEN;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String PRICE_DESC_TRANSPORT \u003d \" \" + PREFIX_PRICE + VALID_PRICE_TRANSPORT;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static final String TAG_DESC_CLAIMABLE \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_FOOD;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static final String TAG_DESC_DISCOUNTED \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_TRANSPORT;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String DESCRIPTION_DESC_SCHOOL \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_SCHOOL;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String AMOUNT_DESC_SCHOOL \u003d \" \" + PREFIX_PRICE + VALID_AMOUNT_SCHOOL;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String START_DATE_DESC_SCHOOL \u003d \" \" + PREFIX_START_DATE + VALID_START_DATE_SCHOOL;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String PERIOD_DESC_SCHOOL \u003d \" \" + PREFIX_PERIOD + VALID_PERIOD_SCHOOL;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // \u0027\u0026\u0027 not allowed in descriptions"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String INVALID_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION + \"James\u0026\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // \u0027a\u0027 not allowed in prices"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String INVALID_PRICE_DESC \u003d \" \" + PREFIX_PRICE + \"911a\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_CATEGORY + \"hubby*\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final EditExpenseCommand.EditExpenseDescriptor DESC_CHICKEN;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static final String STATS_WITHOUT_TAG \u003d \" 5\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static final String STATS_PREFIX_WITHOUT_INPUT \u003d String.format(\" %s \", PREFIX_START_DATE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static final String STATS_INVALID_PREFIX \u003d String.format(\" %s \", PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static final String STATS_HIGHER_END_DATE \u003d String.format(\" %s31-10-2019 %s01-10-2019\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            PREFIX_START_DATE, PREFIX_END_DATE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static final String STATS_DUPLICATE_TAG \u003d String.format(\"%s31-10-2019 %s01-10-2019\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            PREFIX_START_DATE, PREFIX_START_DATE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static final Timestamp OCTOBER_FIRST \u003d Timestamp.createTimestampIfValid(\"01-10-2019\").get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static final Timestamp OCTOBER_LAST \u003d Timestamp.createTimestampIfValid(\"31-10-2019\").get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DESC_CHICKEN \u003d new EditExpenseDescriptorBuilder().withDescription(VALID_DESCRIPTION_CHICKEN)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withPrice(VALID_PRICE_CHICKEN)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                .withCategory(VALID_CATEGORY_TRANSPORT).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            CommandResult result \u003d command.run(actualModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * - the MooLah, filtered expense list and selected expense in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        MooLah expectedMooLah \u003d new MooLah(actualModel.getMooLah());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        List\u003cExpense\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredExpenseList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.run(actualModel));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertEquals(expectedMooLah, actualModel.getMooLah());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredExpenseList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the expense at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * {@code model}\u0027s MooLah."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static void showExpenseAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense expense \u003d model.getFilteredExpenseList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        final String[] splitDescription \u003d expense.getDescription().fullDescription.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        model.updateFilteredExpenseList(new DescriptionContainsKeywordsPredicate(Arrays.asList(splitDescription[0])));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(1, model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 32,
      "qweiping31415": 21,
      "anqichen9856": 16,
      "-": 70,
      "ryoarmanda": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        expectedModel \u003d new ModelManager(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void run_noFutureModels_throwsCommandException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, RedoCommand.MESSAGE_NO_MODEL);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void run_hasFutureModels_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        Model other \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        model.addToFutureHistory(other);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        expectedModel.addToPastHistory(other);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        expectedModel \u003d new ModelManager(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void run_noPastModels_throwsCommandException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, UndoCommand.MESSAGE_NO_MODEL);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void run_hasPastModels_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        Model other \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        model.addToPastHistory(other);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        expectedModel.addToFutureHistory(other);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/alias/AddAliasCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.commands.alias;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.AliasTestUtil.ALIAS_A_TO_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.AliasTestUtil.ALIAS_B_TO_C;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalMooLah;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import seedu.address.model.ModelHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.testutil.AliasTestUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class AddAliasCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMooLah(), new UserPrefs(), new ModelHistory());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalMooLah(), new UserPrefs(), new ModelHistory());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        AddAliasCommand validAliasCommandOne \u003d new AddAliasCommand(ALIAS_A_TO_B);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        AddAliasCommand validAddAliasCommandTwo \u003d new AddAliasCommand(ALIAS_B_TO_C);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(validAliasCommandOne.equals(validAliasCommandOne));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // same alias -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        AddAliasCommand validAliasCommandOneCopy \u003d new AddAliasCommand(ALIAS_A_TO_B);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(validAliasCommandOne.equals(validAliasCommandOneCopy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(validAliasCommandOne.equals(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(validAliasCommandOne.equals(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different alias -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(validAliasCommandOne.equals(validAddAliasCommandTwo));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void run_aliasNameIsReservedCommandWord_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        AddAliasCommand command \u003d new AddAliasCommand(AliasTestUtil.ALIAS_NAME_ADD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e command.run(model));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // removed test, alias mapping to alias creation does not result in unwanted behaviour"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void run_aliasCommandIsValid_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        expectedModel.addToHistory();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expectedModel.addUserAlias(ALIAS_A_TO_B);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new AddAliasCommand(ALIAS_A_TO_B), model,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                String.format(AddAliasCommand.MESSAGE_SUCCESS, ALIAS_A_TO_B.getAliasName()), expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 59,
      "anqichen9856": 3,
      "ryoarmanda": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/budget/AddBudgetCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.logic.commands.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.testutil.TypicalBudgets.OUTSIDE_SCHOOL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.testutil.TypicalBudgets.SCHOOL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.commons.core.Alias;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.commons.core.AliasMappings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.MooLah;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.ReadOnlyModelHistory;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.ReadOnlyMooLah;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Event;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class AddBudgetCommandTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void constructor_nullBudget_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddBudgetCommand(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void run_budgetAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        ModelStubAcceptingBudgetAdded modelStub \u003d new ModelStubAcceptingBudgetAdded();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Budget validBudget \u003d SCHOOL;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        List\u003cBudget\u003e expectedBudgetsAdded \u003d Arrays.asList(validBudget);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Stack\u003cModelStub\u003e expectedPastModels \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        expectedPastModels.push(new ModelStubAcceptingBudgetAdded(modelStub));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        CommandResult commandResult \u003d new AddBudgetCommand(validBudget).run(modelStub);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertEquals(String.format(AddBudgetCommand.MESSAGE_SUCCESS, validBudget), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertEquals(expectedBudgetsAdded, modelStub.budgetsAdded);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertEquals(expectedPastModels, modelStub.pastModels);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void run_duplicateBudget_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Budget validBudget \u003d SCHOOL;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        AddBudgetCommand addBudgetCommand \u003d new AddBudgetCommand(validBudget);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithBudget(validBudget);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(CommandException.class, AddBudgetCommand.MESSAGE_DUPLICATE_BUDGET, () -\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                addBudgetCommand.run(modelStub));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        AddBudgetCommand addSchoolBudgetCommand \u003d new AddBudgetCommand(SCHOOL);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        AddBudgetCommand addOutsideSchoolBudgetCommand \u003d new AddBudgetCommand(OUTSIDE_SCHOOL);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertTrue(addSchoolBudgetCommand.equals(addSchoolBudgetCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        AddBudgetCommand addSchoolBudgetCommandCopy \u003d new AddBudgetCommand(SCHOOL);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertTrue(addSchoolBudgetCommand.equals(addSchoolBudgetCommandCopy));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertFalse(addSchoolBudgetCommand.equals(1));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertFalse(addSchoolBudgetCommand.equals(null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // different budget -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertFalse(addSchoolBudgetCommand.equals(addOutsideSchoolBudgetCommand));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void setBudget(Budget target, Budget editedBudget) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void changePrimaryBudgetWindow(Timestamp pastDate) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void updateFilteredBudgetList(Predicate\u003c? super Budget\u003e budget) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public Predicate\u003c? super Budget\u003e getFilteredBudgetPredicate() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void deleteBudget(Budget budget) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "czkay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "czkay"
        },
        "content": "        public void notifyAboutTranspiredEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void resetData(Model model) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public ReadOnlyModelHistory getModelHistory() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void setModelHistory(ReadOnlyModelHistory history) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public boolean canRollback() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public Optional\u003cModel\u003e rollbackModel() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public boolean canMigrate() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public Optional\u003cModel\u003e migrateModel() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void addToHistory() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void addToPastHistory(Model model) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void addToFutureHistory(Model model) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void setAliasMappings(AliasMappings aliasMappings) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public AliasMappings getAliasMappings() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void addUserAlias(Alias alias) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public boolean removeAliasWithName(String aliasName) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public boolean aliasWithNameExists(String aliasName) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public Path getMooLahFilePath() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void setMooLahFilePath(Path mooLahFilePath) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void setMooLah(ReadOnlyMooLah newData) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public ReadOnlyMooLah getMooLah() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void deleteExpense(Expense target) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public boolean hasBudget(Budget budget) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void addBudget(Budget budget) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        //public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        //  throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public boolean hasBudgetWithName(Description targetDescription) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public Budget getPrimaryBudget() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void switchBudgetTo(Description targetDescription) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public Predicate\u003c? super Expense\u003e getFilteredExpensePredicate() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void updateFilteredExpenseList(Predicate\u003c? super Expense\u003e predicate) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void deleteEvent(Event target) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "czkay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "czkay"
        },
        "content": "        public void setEvent(Event eventToEdit, Event editedEvent) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public Predicate\u003c? super Event\u003e getFilteredEventPredicate() {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void updateFilteredEventList(Predicate\u003c? super Event\u003e predicate) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        public Statistics calculateStatistics(String command, Timestamp date1, Timestamp date2, Period period) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public boolean hasStatistic() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public StringBuilder getStatistic() {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * A Model stub that contains a single budget."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private class ModelStubWithBudget extends ModelStub {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        private final Budget budget;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        ModelStubWithBudget(Budget budget) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            requireNonNull(budget);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            this.budget \u003d budget;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public boolean hasBudget(Budget budget) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            requireNonNull(budget);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return this.budget.isSameBudget(budget);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * A Model stub that always accept the budget being added."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private class ModelStubAcceptingBudgetAdded extends ModelStub {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        final ArrayList\u003cBudget\u003e budgetsAdded;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        final Stack\u003cModelStub\u003e pastModels;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public ModelStubAcceptingBudgetAdded() {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            budgetsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            pastModels \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public ModelStubAcceptingBudgetAdded(ModelStubAcceptingBudgetAdded model) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            budgetsAdded \u003d new ArrayList\u003c\u003e(model.budgetsAdded);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            pastModels \u003d (Stack\u003cModelStub\u003e) model.pastModels.clone();"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public boolean hasBudget(Budget budget) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            requireNonNull(budget);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return budgetsAdded.stream().anyMatch(budget::isSameBudget);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void addBudget(Budget budget) {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            requireNonNull(budget);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            budgetsAdded.add(budget);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void addToHistory() {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            pastModels.push(new ModelStubAcceptingBudgetAdded(this));"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public ReadOnlyMooLah getMooLah() {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return new MooLah();"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            if (!(obj instanceof ModelStubAcceptingBudgetAdded)) {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            ModelStubAcceptingBudgetAdded other \u003d (ModelStubAcceptingBudgetAdded) obj;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return budgetsAdded.equals(other.budgetsAdded)"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    \u0026\u0026 pastModels.equals(other.pastModels);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "czkay": 10,
      "briyanii": 11,
      "qweiping31415": 3,
      "anqichen9856": 421
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/budget/SwitchBudgetCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.logic.commands.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.budget.SwitchBudgetCommand.MESSAGE_BUDGET_ALREADY_PRIMARY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.budget.SwitchBudgetCommand.MESSAGE_BUDGET_NOT_FOUND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.testutil.TypicalBudgets.OUTSIDE_SCHOOL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.testutil.TypicalBudgets.SCHOOL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class SwitchBudgetCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void constructor_nullTargetDescription_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SwitchBudgetCommand(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void run_validInput_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        model.addBudget(SCHOOL);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        model.addBudget(OUTSIDE_SCHOOL);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertTrue(model.getPrimaryBudget().isSameBudget(OUTSIDE_SCHOOL)); // primary budget is OUTSIDE_SCHOOL"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            Description validInput \u003d SCHOOL.getDescription();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            SwitchBudgetCommand command \u003d new SwitchBudgetCommand(validInput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            CommandResult commandResult \u003d command.run(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            assertEquals(model.getPrimaryBudget(), SCHOOL);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            assertEquals(String.format(SwitchBudgetCommand.MESSAGE_SUCCESS, validInput),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", e);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void run_budgetAlreadyPrimary_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        model.addBudget(SCHOOL);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        model.addBudget(OUTSIDE_SCHOOL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertTrue(model.getPrimaryBudget().isSameBudget(OUTSIDE_SCHOOL)); // primary budget is OUTSIDE_SCHOOL"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            SwitchBudgetCommand command \u003d new SwitchBudgetCommand(OUTSIDE_SCHOOL.getDescription());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            command.run(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            assertEquals(MESSAGE_BUDGET_ALREADY_PRIMARY, e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void run_budgetNotFound_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        model.addBudget(SCHOOL);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        model.addBudget(OUTSIDE_SCHOOL);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertTrue(model.getPrimaryBudget().isSameBudget(OUTSIDE_SCHOOL)); // primary budget is OUTSIDE_SCHOOL"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            SwitchBudgetCommand command \u003d new SwitchBudgetCommand(new Description(\"nonExistingBudgetName\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            command.run(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            assertEquals(MESSAGE_BUDGET_NOT_FOUND, e.getMessage());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        SwitchBudgetCommand switchToSchoolBudgetCommand \u003d new SwitchBudgetCommand(SCHOOL.getDescription());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        SwitchBudgetCommand switchToOutsideSchoolBudgetCommand \u003d new SwitchBudgetCommand("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                OUTSIDE_SCHOOL.getDescription());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertTrue(switchToSchoolBudgetCommand.equals(switchToSchoolBudgetCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        SwitchBudgetCommand switchToSchoolBudgetCommandCopy \u003d new SwitchBudgetCommand(SCHOOL.getDescription());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertTrue(switchToSchoolBudgetCommand.equals(switchToSchoolBudgetCommandCopy));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertFalse(switchToSchoolBudgetCommand.equals(1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertFalse(switchToSchoolBudgetCommand.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // different budget -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertFalse(switchToSchoolBudgetCommand.equals(switchToOutsideSchoolBudgetCommand));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 2,
      "anqichen9856": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/expense/AddExpenseCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.logic.commands.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalMooLah;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import seedu.address.model.ModelHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddExpenseCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class AddExpenseCommandIntegrationTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        model \u003d new ModelManager(getTypicalMooLah(), new UserPrefs(), new ModelHistory());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // No addCommand should not be the same as another addCommand, odds are unlikely because of use of UUID"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void run_duplicateExpense_throwsCommandException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Expense expenseInList \u003d model.getMooLah().getExpenseList().get(0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": "        assertCommandFailure(new AddExpenseCommand(expenseInList), model, AddExpenseCommand.MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 2,
      "czkay": 3,
      "anqichen9856": 4,
      "-": 24,
      "ryoarmanda": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/expense/AddExpenseCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.logic.commands.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.Alias;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.AliasMappings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.MooLah;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import seedu.address.model.ReadOnlyModelHistory;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.ReadOnlyMooLah;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Event;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class AddExpenseCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void constructor_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "czkay"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddExpenseCommand(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void run_expenseAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        ModelStubAcceptingExpenseAdded modelStub \u003d new ModelStubAcceptingExpenseAdded();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        List\u003cExpense\u003e expectedExpensesAdded \u003d Arrays.asList(validExpense);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        Stack\u003cModelStub\u003e expectedPastModels \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        expectedPastModels.push(new ModelStubAcceptingExpenseAdded(modelStub));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "czkay"
        },
        "content": "        CommandResult commandResult \u003d new AddExpenseCommand(validExpense).run(modelStub);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "czkay"
        },
        "content": "        assertEquals(String.format(AddExpenseCommand.MESSAGE_SUCCESS, validExpense), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertEquals(expectedExpensesAdded, modelStub.expensesAdded);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertEquals(expectedPastModels, modelStub.pastModels);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void run_duplicateExpense_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "czkay"
        },
        "content": "        AddExpenseCommand addExpenseCommand \u003d new AddExpenseCommand(validExpense);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithExpense(validExpense);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "czkay"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "czkay"
        },
        "content": "                AddExpenseCommand.MESSAGE_DUPLICATE_EXPENSE, () -\u003e addExpenseCommand.run(modelStub));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense alice \u003d new ExpenseBuilder().withDescription(\"Alice\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense bob \u003d new ExpenseBuilder().withDescription(\"Bob\").build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "czkay"
        },
        "content": "        AddExpenseCommand addAliceCommand \u003d new AddExpenseCommand(alice);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "czkay"
        },
        "content": "        AddExpenseCommand addBobCommand \u003d new AddExpenseCommand(bob);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "czkay"
        },
        "content": "        AddExpenseCommand addAliceCommandCopy \u003d new AddExpenseCommand(alice);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void setBudget(Budget target, Budget editedBudget) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void changePrimaryBudgetWindow(Timestamp pastDate) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void updateFilteredBudgetList(Predicate\u003c? super Budget\u003e budget) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public Predicate\u003c? super Budget\u003e getFilteredBudgetPredicate() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        public void resetData(Model model) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        public ReadOnlyModelHistory getModelHistory() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        public void setModelHistory(ReadOnlyModelHistory history) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        public boolean canRollback() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        public Optional\u003cModel\u003e rollbackModel() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        public boolean canMigrate() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        public Optional\u003cModel\u003e migrateModel() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        public void addToHistory() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        public void addToPastHistory(Model model) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        public void addToFutureHistory(Model model) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public void setAliasMappings(AliasMappings aliasMappings) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public AliasMappings getAliasMappings() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public void addUserAlias(Alias alias) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public boolean removeAliasWithName(String aliasName) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public boolean aliasWithNameExists(String aliasName) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public Path getMooLahFilePath() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void setMooLahFilePath(Path mooLahFilePath) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "czkay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "czkay"
        },
        "content": "        public void notifyAboutTranspiredEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void setMooLah(ReadOnlyMooLah newData) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public ReadOnlyMooLah getMooLah() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public void deleteExpense(Expense target) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public boolean hasBudget(Budget budget) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void addBudget(Budget budget) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public boolean hasBudgetWithName(Description targetDescription) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public Budget getPrimaryBudget() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void switchBudgetTo(Description targetDescription) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public void deleteBudget(Budget budget) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        public Predicate\u003c? super Expense\u003e getFilteredExpensePredicate() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        public void updateFilteredExpenseList(Predicate\u003c? super Expense\u003e predicate) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "czkay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "czkay"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "czkay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "czkay"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "czkay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "czkay"
        },
        "content": "        public void deleteEvent(Event target) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "czkay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "czkay"
        },
        "content": "        public void setEvent(Event eventToEdit, Event editedEvent) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "czkay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "czkay"
        },
        "content": "        public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "czkay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        public Predicate\u003c? super Event\u003e getFilteredEventPredicate() {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        public void updateFilteredEventList(Predicate\u003c? super Event\u003e predicate) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "czkay"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "czkay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        public Statistics calculateStatistics(String command, Timestamp date1, Timestamp date2, Period period) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        public boolean hasStatistic() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        public StringBuilder getStatistic() {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * A Model stub that contains a single expense."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private class ModelStubWithExpense extends ModelStub {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        private final Expense expense;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        ModelStubWithExpense(Expense expense) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            this.expense \u003d expense;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return this.expense.isSameExpense(expense);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * A Model stub that always accept the expense being added."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private class ModelStubAcceptingExpenseAdded extends ModelStub {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        final ArrayList\u003cExpense\u003e expensesAdded;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        final Stack\u003cModelStub\u003e pastModels;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        public ModelStubAcceptingExpenseAdded() {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            expensesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            pastModels \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        public ModelStubAcceptingExpenseAdded(ModelStubAcceptingExpenseAdded model) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            expensesAdded \u003d new ArrayList\u003c\u003e(model.expensesAdded);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            pastModels \u003d (Stack\u003cModelStub\u003e) model.pastModels.clone();"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return expensesAdded.stream().anyMatch(expense::isSameExpense);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            expensesAdded.add(expense);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        public void addToHistory() {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            pastModels.push(new ModelStubAcceptingExpenseAdded(this));"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public ReadOnlyMooLah getMooLah() {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return new MooLah();"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            if (!(obj instanceof ModelStubAcceptingExpenseAdded)) {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            ModelStubAcceptingExpenseAdded other \u003d (ModelStubAcceptingExpenseAdded) obj;"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            return expensesAdded.equals(other.expensesAdded)"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                    \u0026\u0026 pastModels.equals(other.pastModels);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 59,
      "czkay": 47,
      "qweiping31415": 19,
      "anqichen9856": 67,
      "-": 139,
      "ryoarmanda": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/expense/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.commands.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalMooLah;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import seedu.address.model.ModelHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.MooLah;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void run_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        expectedModel.addToHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void run_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalMooLah(), new UserPrefs(), new ModelHistory());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalMooLah(), new UserPrefs(), new ModelHistory());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        expectedModel.addToHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        expectedModel.setMooLah(new MooLah());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 1,
      "anqichen9856": 5,
      "-": 24,
      "ryoarmanda": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/expense/DeleteExpenseCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.commands.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showExpenseAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import static seedu.address.testutil.TestUtil.makeModelStack;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalMooLah;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import seedu.address.model.ModelHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class DeleteExpenseCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMooLah(), new UserPrefs(), new ModelHistory());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void run_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense expenseToDelete \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DeleteExpenseCommand deleteExpenseCommand \u003d new DeleteExpenseCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteExpenseCommand.MESSAGE_DELETE_EXPENSE_SUCCESS, expenseToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getMooLah(), new UserPrefs(), new ModelHistory());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        expectedModel.addToHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expectedModel.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertCommandSuccess(deleteExpenseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void run_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenseList().size() + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DeleteExpenseCommand deleteExpenseCommand \u003d new DeleteExpenseCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertCommandFailure(deleteExpenseCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void run_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense expenseToDelete \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DeleteExpenseCommand deleteExpenseCommand \u003d new DeleteExpenseCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteExpenseCommand.MESSAGE_DELETE_EXPENSE_SUCCESS, expenseToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getMooLah(), new UserPrefs(), new ModelHistory());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expectedModel.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        expectedModel.setModelHistory(new ModelHistory(makeModelStack(model), makeModelStack()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        showNoExpense(expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertCommandSuccess(deleteExpenseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void run_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                outOfBoundIndex.getZeroBased()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                \u003c model.getMooLah().getExpenseList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DeleteExpenseCommand deleteExpenseCommand \u003d new DeleteExpenseCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertCommandFailure(deleteExpenseCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DeleteExpenseCommand deleteFirstCommand \u003d new DeleteExpenseCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DeleteExpenseCommand deleteSecondCommand \u003d new DeleteExpenseCommand(INDEX_SECOND_EXPENSE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DeleteExpenseCommand deleteFirstCommandCopy \u003d new DeleteExpenseCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private void showNoExpense(Model model) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        model.updateFilteredExpenseList(p -\u003e false);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(model.getFilteredExpenseList().isEmpty());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 34,
      "anqichen9856": 5,
      "-": 68,
      "ryoarmanda": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/expense/EditExpenseCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.commands.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CHICKEN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_FOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TRANSPORT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_TRANSPORT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showExpenseAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import static seedu.address.testutil.TestUtil.makeModelStack;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalMooLah;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.EditExpenseCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import seedu.address.model.ModelHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.MooLah;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class EditExpenseCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMooLah(), new UserPrefs(), new ModelHistory());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void run_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder(editedExpense).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseCommand editExpenseCommand \u003d new EditExpenseCommand(INDEX_FIRST_EXPENSE, descriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String expectedMessage \u003d String.format(EditExpenseCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new MooLah(model.getMooLah()),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                new UserPrefs(), new ModelHistory());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expectedModel.setExpense(model.getFilteredExpenseList().get(0), editedExpense);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        expectedModel.setModelHistory(new ModelHistory(makeModelStack(model), makeModelStack()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertCommandSuccess(editExpenseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void run_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Index indexLastExpense \u003d Index.fromOneBased(model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense lastExpense \u003d model.getFilteredExpenseList().get(indexLastExpense.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        ExpenseBuilder expenseInList \u003d new ExpenseBuilder(lastExpense);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense editedExpense \u003d expenseInList"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_TRANSPORT)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withPrice(VALID_PRICE_TRANSPORT)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                .withCategory(VALID_CATEGORY_FOOD).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_TRANSPORT)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withPrice(VALID_PRICE_TRANSPORT)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                .withCategory(VALID_CATEGORY_FOOD).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseCommand editExpenseCommand \u003d new EditExpenseCommand(indexLastExpense, descriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String expectedMessage \u003d String.format(EditExpenseCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new MooLah(model.getMooLah()),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                new UserPrefs(), new ModelHistory());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expectedModel.setExpense(lastExpense, editedExpense);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        expectedModel.setModelHistory(new ModelHistory(makeModelStack(model), makeModelStack()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertCommandSuccess(editExpenseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void run_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseCommand editExpenseCommand \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new EditExpenseCommand(INDEX_FIRST_EXPENSE, new EditExpenseDescriptor());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense editedExpense \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String expectedMessage \u003d String.format(EditExpenseCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new MooLah(model.getMooLah()),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                new UserPrefs(), new ModelHistory());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        expectedModel.addToHistory();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertCommandSuccess(editExpenseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void run_filteredList_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense expenseInFilteredList \u003d model"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .getFilteredExpenseList()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder(expenseInFilteredList)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_TRANSPORT).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseCommand editExpenseCommand \u003d new EditExpenseCommand(INDEX_FIRST_EXPENSE,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new EditExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_TRANSPORT).build());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String expectedMessage \u003d String.format(EditExpenseCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new MooLah(model.getMooLah()),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "                new UserPrefs(), new ModelHistory());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expectedModel.setExpense(model.getFilteredExpenseList().get(0), editedExpense);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        expectedModel.setModelHistory(new ModelHistory(makeModelStack(model), makeModelStack()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertCommandSuccess(editExpenseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // Editing an expense to have the same details as another should not result in failure"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void run_invalidExpenseIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenseList().size() + 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_TRANSPORT).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseCommand editExpenseCommand \u003d new EditExpenseCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertCommandFailure(editExpenseCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void run_invalidExpenseIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMooLah().getExpenseList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseCommand editExpenseCommand \u003d new EditExpenseCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new EditExpenseDescriptorBuilder().withDescription(VALID_DESCRIPTION_TRANSPORT).build());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertCommandFailure(editExpenseCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        final EditExpenseCommand standardCommand \u003d new EditExpenseCommand(INDEX_FIRST_EXPENSE, DESC_CHICKEN);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseDescriptor copyDescriptor \u003d new EditExpenseDescriptor(DESC_CHICKEN);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseCommand commandWithSameValues \u003d new EditExpenseCommand(INDEX_FIRST_EXPENSE, copyDescriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(standardCommand.equals(new EditExpenseCommand(INDEX_SECOND_EXPENSE, DESC_CHICKEN)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 65,
      "qweiping31415": 4,
      "anqichen9856": 8,
      "-": 78,
      "ryoarmanda": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/expense/EditExpenseDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.commands.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CHICKEN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_FOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TRANSPORT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_TRANSPORT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.EditExpenseCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class EditExpenseDescriptorTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseDescriptor descriptorWithSameValues \u003d new EditExpenseDescriptor(DESC_CHICKEN);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(DESC_CHICKEN.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(DESC_CHICKEN.equals(DESC_CHICKEN));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(DESC_CHICKEN.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(DESC_CHICKEN.equals(5));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseDescriptor editedAmy \u003d new EditExpenseDescriptorBuilder(DESC_CHICKEN)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_TRANSPORT).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(DESC_CHICKEN.equals(editedAmy));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different price -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        editedAmy \u003d new EditExpenseDescriptorBuilder(DESC_CHICKEN).withPrice(VALID_PRICE_TRANSPORT).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(DESC_CHICKEN.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        editedAmy \u003d new EditExpenseDescriptorBuilder(DESC_CHICKEN).withCategory(VALID_CATEGORY_FOOD).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(DESC_CHICKEN.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 43,
      "qweiping31415": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/expense/FindExpenseCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.commands.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EXPENSES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.CHICKEN_RICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.ENTERTAINMENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.FASHION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalMooLah;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import seedu.address.model.ModelHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class FindExpenseCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMooLah(), new UserPrefs(), new ModelHistory());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalMooLah(), new UserPrefs(), new ModelHistory());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DescriptionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        FindExpenseCommand findFirstCommand \u003d new FindExpenseCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        FindExpenseCommand findSecondCommand \u003d new FindExpenseCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        FindExpenseCommand findFirstCommandCopy \u003d new FindExpenseCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void run_zeroKeywords_noExpenseFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENSES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        FindExpenseCommand command \u003d new FindExpenseCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        expectedModel.addToHistory();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expectedModel.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void run_multipleKeywords_multipleExpensesFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENSES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\"the Chicken Movie\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        FindExpenseCommand command \u003d new FindExpenseCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        expectedModel.addToHistory();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expectedModel.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(Arrays.asList(CHICKEN_RICE, ENTERTAINMENT, FASHION), model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Parses {@code userInput} into a {@code DescriptionContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private DescriptionContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new DescriptionContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 28,
      "anqichen9856": 3,
      "-": 50,
      "ryoarmanda": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/expense/ListExpenseCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.logic.commands.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showExpenseAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import static seedu.address.testutil.TestUtil.makeModelStack;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalMooLah;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import seedu.address.model.ModelHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class ListExpenseCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        model \u003d new ModelManager(getTypicalMooLah(), new UserPrefs(), new ModelHistory());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getMooLah(), new UserPrefs(), new ModelHistory());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void run_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        expectedModel.addToHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertCommandSuccess(new ListExpenseCommand(), model, ListExpenseCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void run_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        expectedModel.setModelHistory(new ModelHistory(makeModelStack(model), makeModelStack()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertCommandSuccess(new ListExpenseCommand(), model, ListExpenseCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 6,
      "anqichen9856": 4,
      "-": 27,
      "ryoarmanda": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/general/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.logic.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.general.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.panel.PanelName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void run_exit_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                null, false, true, PanelName.CURRENT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 4,
      "anqichen9856": 2,
      "-": 16,
      "ryoarmanda": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/general/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.logic.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.general.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.panel.PanelName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void run_help_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, null,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                true, false, PanelName.CURRENT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 3,
      "qweiping31415": 1,
      "anqichen9856": 2,
      "-": 16,
      "ryoarmanda": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddAddAliasCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALIAS_ALIAS_INPUT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALIAS_ALIAS_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.Alias;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.alias.AddAliasCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class AddAddAliasCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private AddAliasCommandParser parser \u003d new AddAliasCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAliasCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // missing alias name and input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                String.format(\" %s %s\", PREFIX_ALIAS_ALIAS_NAME, PREFIX_ALIAS_ALIAS_INPUT),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // missing input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                String.format(\" %s aliasName %s\", PREFIX_ALIAS_ALIAS_NAME, PREFIX_ALIAS_ALIAS_INPUT),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // missing alias name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                String.format(\" %s %s input here\", PREFIX_ALIAS_ALIAS_NAME, PREFIX_ALIAS_ALIAS_INPUT),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // invalid aliasname"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                String.format(\" %s #asd@## %s input here\", PREFIX_ALIAS_ALIAS_NAME, PREFIX_ALIAS_ALIAS_INPUT),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                Alias.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // multiple words which would be individually valid"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                String.format(\" %s multiple words %s input here\", PREFIX_ALIAS_ALIAS_NAME, PREFIX_ALIAS_ALIAS_INPUT),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                Alias.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // valid alias name and input"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                String.format(\" %s name %s input\", PREFIX_ALIAS_ALIAS_NAME, PREFIX_ALIAS_ALIAS_INPUT),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new AddAliasCommand(new Alias(\"name\", \"input\")));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // valid alias name and multiple word input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                String.format(\" %s name %s input input\", PREFIX_ALIAS_ALIAS_NAME, PREFIX_ALIAS_ALIAS_INPUT),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new AddAliasCommand(new Alias(\"name\", \"input input\")));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddBudgetCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_SCHOOL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_SCHOOL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PERIOD_DESC_SCHOOL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_DATE_DESC_SCHOOL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_SCHOOL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_SCHOOL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERIOD_SCHOOL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_SCHOOL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.budget.AddBudgetCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class AddBudgetCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private AddBudgetCommandParser parser \u003d new AddBudgetCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddBudgetCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // missing description prefix"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertParseFailure(parser, VALID_DESCRIPTION_SCHOOL + AMOUNT_DESC_SCHOOL + START_DATE_DESC_SCHOOL"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        + PERIOD_DESC_SCHOOL,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // missing amount prefix"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_SCHOOL + VALID_AMOUNT_SCHOOL + START_DATE_DESC_SCHOOL"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        + PERIOD_DESC_SCHOOL,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // missing start date prefix"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_SCHOOL + AMOUNT_DESC_SCHOOL + VALID_START_DATE_SCHOOL"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        + PERIOD_DESC_SCHOOL,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // missing period prefix"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_SCHOOL + AMOUNT_DESC_SCHOOL + START_DATE_DESC_SCHOOL"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        + VALID_PERIOD_SCHOOL,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertParseFailure(parser, VALID_DESCRIPTION_SCHOOL + VALID_AMOUNT_SCHOOL + VALID_START_DATE_SCHOOL"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        + VALID_PERIOD_SCHOOL,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 1,
      "anqichen9856": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddExpenseCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_REPEATED_PREFIX_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_TRANSPORT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_TRANSPORT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CLAIMABLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_DISCOUNTED;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TRANSPORT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_TRANSPORT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.logic.commands.expense.AddExpenseCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Price;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class AddExpenseCommandParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private AddExpenseCommandParser parser \u003d new AddExpenseCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // addCommand should never return a same command as another, so cannot check if the command is same as expected"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddExpenseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // missing description prefix"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure(parser, VALID_DESCRIPTION_TRANSPORT + PRICE_DESC_TRANSPORT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // missing price prefix"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_TRANSPORT + VALID_PRICE_TRANSPORT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure(parser, VALID_DESCRIPTION_TRANSPORT + VALID_PRICE_TRANSPORT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                INVALID_DESCRIPTION_DESC + PRICE_DESC_TRANSPORT"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                        + TAG_DESC_DISCOUNTED,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // invalid price"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                DESCRIPTION_DESC_TRANSPORT + INVALID_PRICE_DESC"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                        + TAG_DESC_DISCOUNTED,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        // invalid category"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_TRANSPORT + PRICE_DESC_TRANSPORT"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                + INVALID_TAG_DESC, Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertParseFailure(parser, INVALID_DESCRIPTION_DESC + PRICE_DESC_TRANSPORT + TAG_DESC_DISCOUNTED,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                PREAMBLE_NON_EMPTY + DESCRIPTION_DESC_TRANSPORT + PRICE_DESC_TRANSPORT"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                        + TAG_DESC_DISCOUNTED,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "czkay"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public void parse_repeatedPrefix_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        // multiple categories - not accepted"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_TRANSPORT + PRICE_DESC_TRANSPORT + TAG_DESC_CLAIMABLE"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                + TAG_DESC_CLAIMABLE, MESSAGE_REPEATED_PREFIX_COMMAND);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        // multiple names - not accepted"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_TRANSPORT + DESCRIPTION_DESC_TRANSPORT"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                + PRICE_DESC_TRANSPORT + TAG_DESC_CLAIMABLE + TAG_DESC_CLAIMABLE, MESSAGE_REPEATED_PREFIX_COMMAND);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 30,
      "czkay": 3,
      "qweiping31415": 21,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\", \"no argument description\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\", \"no argument description\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\", \"no argument description\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\", \"no argument description\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        String argsString \u003d \"  some random string /t category with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\", \"no argument description\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\", \"no argument description\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\", \"no argument description\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 7,
      "qweiping31415": 1,
      "-": 142
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteExpenseCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.DeleteExpenseCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class DeleteExpenseCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteExpenseCommand(INDEX_FIRST_EXPENSE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 6,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditExpenseCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_CHICKEN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_CHICKEN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_TRANSPORT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CLAIMABLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_DISCOUNTED;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_FOOD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CHICKEN;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_CHICKEN;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_TRANSPORT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_EXPENSE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.EditExpenseCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Price;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class EditExpenseCommandParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditExpenseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure(parser, VALID_DESCRIPTION_CHICKEN, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure(parser, \"1\", EditExpenseCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure(parser, \"-5\" + DESCRIPTION_DESC_CHICKEN, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure(parser, \"0\" + DESCRIPTION_DESC_CHICKEN, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \"1\" + INVALID_DESCRIPTION_DESC, Description.MESSAGE_CONSTRAINTS); // invalid description"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PRICE_DESC, Price.MESSAGE_CONSTRAINTS); // invalid price"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Category.MESSAGE_CONSTRAINTS); // invalid category"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // invalid price followed by valid email"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                parser, \"1\" + INVALID_PRICE_DESC + VALID_DESCRIPTION_CHICKEN, Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // valid price followed by invalid price. The test case for invalid price followed by valid price"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \"1\" + PRICE_DESC_TRANSPORT + INVALID_PRICE_DESC, Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Expense} being edited,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        // parsing it together with a valid category results in error"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \"1\" + TAG_DESC_CLAIMABLE + TAG_DESC_DISCOUNTED + TAG_EMPTY, Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \"1\" + INVALID_DESCRIPTION_DESC + INVALID_PRICE_DESC"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        + INVALID_DESCRIPTION_DESC + VALID_PRICE_CHICKEN,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PRICE_DESC_TRANSPORT"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                + DESCRIPTION_DESC_CHICKEN + TAG_DESC_CLAIMABLE;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseCommand.EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_CHICKEN)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withPrice(VALID_PRICE_TRANSPORT)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                .withCategory(VALID_CATEGORY_FOOD).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseCommand expectedCommand \u003d new EditExpenseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PRICE_DESC_TRANSPORT;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseCommand.EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withPrice(VALID_PRICE_TRANSPORT).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseCommand expectedCommand \u003d new EditExpenseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // description"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_EXPENSE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_CHICKEN;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseCommand.EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_CHICKEN).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseCommand expectedCommand \u003d new EditExpenseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // price"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PRICE_DESC_CHICKEN;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptorBuilder().withPrice(VALID_PRICE_CHICKEN).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expectedCommand \u003d new EditExpenseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_CLAIMABLE;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptorBuilder().withCategory(VALID_CATEGORY_FOOD).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expectedCommand \u003d new EditExpenseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PRICE_DESC + PRICE_DESC_TRANSPORT;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseCommand.EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withPrice(VALID_PRICE_TRANSPORT).build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseCommand expectedCommand \u003d new EditExpenseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_PRICE_DESC + PRICE_DESC_TRANSPORT;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptorBuilder().withPrice(VALID_PRICE_TRANSPORT).build();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expectedCommand \u003d new EditExpenseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 74,
      "qweiping31415": 10,
      "-": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindExpenseCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.FindExpenseCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class FindExpenseCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                parser, \"     \","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        FindExpenseCommand expectedFindExpenseCommand \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new FindExpenseCommand(new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindExpenseCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindExpenseCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 10,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/MooLahParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALIAS_ALIAS_INPUT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALIAS_ALIAS_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.CommandGroup;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.alias.AddAliasCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.ClearCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.DeleteExpenseCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.EditExpenseCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.EditExpenseCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.FindExpenseCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.ListExpenseCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.general.ExitCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.statistics.StatsCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.testutil.AliasTestUtil;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.testutil.ExpenseUtil;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class MooLahParserTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final MooLahParser parser;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final ReadOnlyUserPrefs readOnlyUserPrefs;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public MooLahParserTest() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        parser \u003d new MooLahParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        userPrefs.setAliasMappings(AliasTestUtil.VALID_ALIAS_MAPPINGS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        readOnlyUserPrefs \u003d userPrefs;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void parseCommand_alias() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        AddAliasCommand aliasCommand \u003d (AddAliasCommand) parser.parseCommand("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                String.format(\"%s %s a %s b\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        AddAliasCommand.COMMAND_WORD, PREFIX_ALIAS_ALIAS_NAME, PREFIX_ALIAS_ALIAS_INPUT),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \"\", readOnlyUserPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(aliasCommand, new AddAliasCommand(AliasTestUtil.ALIAS_A_TO_B));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                ClearCommand.COMMAND_WORD, \"\", readOnlyUserPrefs) instanceof ClearCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                parser.parseCommand("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        ClearCommand.COMMAND_WORD + \" 3\", \"\", readOnlyUserPrefs) instanceof ClearCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DeleteExpenseCommand command \u003d (DeleteExpenseCommand) parser.parseCommand("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                DeleteExpenseCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EXPENSE.getOneBased(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \"\", readOnlyUserPrefs);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(new DeleteExpenseCommand(INDEX_FIRST_EXPENSE), command);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense expense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder(expense).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        EditExpenseCommand command \u003d (EditExpenseCommand) parser.parseCommand(EditExpenseCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                        + INDEX_FIRST_EXPENSE.getOneBased() + \" \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                        + ExpenseUtil.getEditExpenseDescriptorDetails(descriptor),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \"\", readOnlyUserPrefs);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(new EditExpenseCommand(INDEX_FIRST_EXPENSE, descriptor), command);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                ExitCommand.COMMAND_WORD, \"\", readOnlyUserPrefs) instanceof ExitCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                ExitCommand.COMMAND_WORD + \" 3\", \"\", readOnlyUserPrefs) instanceof ExitCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        FindExpenseCommand command \u003d (FindExpenseCommand) parser.parseCommand("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                FindExpenseCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        + keywords.stream().collect(Collectors.joining(\" \")),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                readOnlyUserPrefs);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(new FindExpenseCommand(new DescriptionContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                HelpCommand.COMMAND_WORD, \"\", readOnlyUserPrefs) instanceof HelpCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                HelpCommand.COMMAND_WORD + \" 3\", \"\", readOnlyUserPrefs) instanceof HelpCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                ListExpenseCommand.COMMAND_WORD, \"\", readOnlyUserPrefs) instanceof ListExpenseCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                ListExpenseCommand.COMMAND_WORD + \" 3\", \"\","
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                readOnlyUserPrefs) instanceof ListExpenseCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            -\u003e parser.parseCommand(\"\", \"\", readOnlyUserPrefs));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, ()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            -\u003e parser.parseCommand(\"unknownCommand\", \"\", readOnlyUserPrefs));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    void parseCommand_stats() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        StatsCommand command \u003d (StatsCommand) parser.parseCommand("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                String.format(\"%s %s01-10-2019 %s31-10-2019\","
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                        StatsCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                        PREFIX_START_DATE,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                        PREFIX_END_DATE),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                CommandGroup.STATISTIC, readOnlyUserPrefs);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertEquals(command, new StatsCommand("
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                CommandTestUtil.OCTOBER_FIRST,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                CommandTestUtil.OCTOBER_LAST));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 75,
      "qweiping31415": 22,
      "anqichen9856": 4,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.Alias;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Price;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \"J4()\\\\|\\\\\\\\|nyVV@1k3r\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String INVALID_PRICE \u003d \",1234\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"Johnny Walker\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String VALID_PRICE \u003d \"12.3456\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private static final String VALID_CATEGORY_1 \u003d \"utilities\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String VALID_ALIAS_NAME_1 \u003d \"name\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String VALID_ALIAS_INPUT_1 \u003d \"input\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String INVALID_ALIAS_NAME_1 \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String INVALID_ALIAS_NAME_2 \u003d \"@#*j\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(INDEX_FIRST_EXPENSE, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(INDEX_FIRST_EXPENSE, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void parseDescription_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDescription(INVALID_DESCRIPTION));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void parseDescription_validValueWithoutWhitespace_returnsDescription() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(VALID_DESCRIPTION));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescription() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String descriptionWithWhitespace \u003d WHITESPACE + VALID_DESCRIPTION + WHITESPACE;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(descriptionWithWhitespace));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void parsePrice_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePrice((String) null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void parsePrice_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePrice(INVALID_PRICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void parsePrice_validValueWithoutWhitespace_returnsPrice() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Price expectedPrice \u003d new Price(VALID_PRICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(expectedPrice, ParserUtil.parsePrice(VALID_PRICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void parsePrice_validValueWithWhitespace_returnsTrimmedPrice() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String priceWithWhitespace \u003d WHITESPACE + VALID_PRICE + WHITESPACE;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Price expectedPrice \u003d new Price(VALID_PRICE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(expectedPrice, ParserUtil.parsePrice(priceWithWhitespace));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public void parseCategory_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCategory(null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public void parseCategory_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCategory(INVALID_TAG));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public void parseCategory_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        Category expectedCategory \u003d new Category(VALID_CATEGORY_1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertEquals(expectedCategory, ParserUtil.parseCategory(VALID_CATEGORY_1));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public void parseCategory_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_CATEGORY_1 + WHITESPACE;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        Category expectedCategory \u003d new Category(VALID_CATEGORY_1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertEquals(expectedCategory, ParserUtil.parseCategory(tagWithWhitespace));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void parseAlias_validInput_returnsAlias() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Alias expectedAlias \u003d new Alias(VALID_ALIAS_NAME_1, VALID_ALIAS_INPUT_1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(ParserUtil.parseAlias(VALID_ALIAS_NAME_1, VALID_ALIAS_INPUT_1), expectedAlias);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void parseAlias_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // non alphanumeric name"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAlias(INVALID_ALIAS_NAME_1, VALID_ALIAS_INPUT_1));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // space in name"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAlias("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                VALID_ALIAS_NAME_1 + WHITESPACE + VALID_ALIAS_NAME_1,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                VALID_ALIAS_INPUT_1));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // empty name"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAlias("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                WHITESPACE,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                VALID_ALIAS_INPUT_1));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // white space input"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAlias("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                VALID_ALIAS_NAME_1,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                WHITESPACE));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // both invalid"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAlias("
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                INVALID_ALIAS_NAME_2,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                WHITESPACE));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 59,
      "qweiping31415": 13,
      "-": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/StatsCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.statistics.StatsCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "class StatsCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private StatsCommandParser parser \u003d new StatsCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    void parse_optionalFields_success() throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        //correct order"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertNotNull(parser.parse(String.format(\" %s01-10-2019 %s31-10-2019\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                PREFIX_START_DATE,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                PREFIX_END_DATE)));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        //flipped"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertNotNull(parser.parse(String.format(\" %s31-10-2019 %s01-10-2019\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                PREFIX_END_DATE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                PREFIX_START_DATE)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        //start date with white space"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertNotNull(parser.parse(String.format(\" %s01-10-2019      \","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                PREFIX_START_DATE)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        //start date"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertNotNull(parser.parse(String.format(\" %s01-10-2019\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                PREFIX_START_DATE)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        //end date"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertNotNull(parser.parse(String.format(\" %s31-10-2019 \","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                PREFIX_END_DATE)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.STATS_WITHOUT_TAG,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.STATS_PREFIX_WITHOUT_INPUT, Timestamp.MESSAGE_CONSTRAINTS_DATE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.STATS_INVALID_PREFIX,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.STATS_HIGHER_END_DATE, Statistics.MESSAGE_CONSTRAINTS_END_DATE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertParseFailure(parser, CommandTestUtil.STATS_DUPLICATE_TAG,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 1,
      "qweiping31415": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/StatsCompareCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FIRST_START_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERIOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SECOND_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public class StatsCompareCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private StatsCompareCommandParser parser \u003d new StatsCompareCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    void parse_optionalFields_success() throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertNotNull(parser.parse(String.format(\" %s01-10-2019 %s31-10-2019 %smonth\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                PREFIX_FIRST_START_DATE,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                PREFIX_SECOND_START_DATE,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                PREFIX_PERIOD)));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SwitchBudgetCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_SCHOOL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.budget.SwitchBudgetCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class SwitchBudgetCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private SwitchBudgetCommandParser parser \u003d new SwitchBudgetCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchBudgetCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // missing description prefix"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertParseFailure(parser, VALID_DESCRIPTION_SCHOOL,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 1,
      "anqichen9856": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ViewPanelCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.ui.ViewPanelCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.panel.PanelName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "class ViewPanelCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private ViewPanelCommandParser parser \u003d new ViewPanelCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void parse_invalid_throwsException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\"##$$\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" \"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void parse_valid() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseSuccess(parser, \" panel\", new ViewPanelCommand(new PanelName(\"panel\")));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseSuccess(parser, \" panel123\", new ViewPanelCommand(new PanelName(\"panel123\")));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        //ignore trailing and leading spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseSuccess(parser, \"    panel    \", new ViewPanelCommand(new PanelName(\"panel\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertParseSuccess(parser, \" pan   el123\", new ViewPanelCommand(new PanelName(\"pan   el123\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelHistoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import static seedu.address.testutil.TestUtil.makeModelStack;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": " * Hybrid (Unit and Integration) tests for ModelHistory."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "public class ModelHistoryTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private ModelHistory history;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        history \u003d new ModelHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void emptyConstructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertTrue(history.isPastModelsEmpty());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertTrue(history.isFutureModelsEmpty());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void copyConstructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertEquals(history, new ModelHistory(history));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void resetData_nullArgument_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e history.resetData(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void resetData_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        ModelHistory other \u003d new ModelHistory(makeModelStack(new ModelManager()), makeModelStack(new ModelManager()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        history.resetData(other);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertEquals(other, history);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void setPastModels_nullArgument_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e history.setPastModels(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void setPastModels_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        Stack\u003cModel\u003e pastModels \u003d makeModelStack(new ModelManager());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        history.setPastModels(pastModels);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertEquals(pastModels, history.getPastModels());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void setFutureModels_nullArgument_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e history.setFutureModels(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void setFutureModels_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        Stack\u003cModel\u003e futureModels \u003d makeModelStack(new ModelManager());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        history.setFutureModels(futureModels);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertEquals(futureModels, history.getFutureModels());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void addToPastModels_nullArgument_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e history.addToPastModels(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void addToPastModels_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        history.addToPastModels(model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertEquals(makeModelStack(model), history.getPastModels());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void addToFutureModels_nullArgument_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e history.addToPastModels(null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void addToFutureModels_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        history.addToFutureModels(new ModelManager(model));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertEquals(makeModelStack(model), history.getFutureModels());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void clearFutureModels_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        history.clearFutureModels();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertTrue(history.isFutureModelsEmpty());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void getPrevModel_noModel_returnsEmptyOptional() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertTrue(history.getPrevModel().isEmpty());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void getPrevModel_hasModel_returnsModel() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        history.setPastModels(makeModelStack(model));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        Optional\u003cModel\u003e prevModel \u003d history.getPrevModel();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertTrue(prevModel.isPresent());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertEquals(model, prevModel.get());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void getNextModel_noModel_returnsEmptyOptional() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertTrue(history.getNextModel().isEmpty());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void getNextModel_hasModel_returnsModel() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        history.setFutureModels(makeModelStack(model));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        Optional\u003cModel\u003e nextModel \u003d history.getNextModel();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertTrue(nextModel.isPresent());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertEquals(model, nextModel.get());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        Stack\u003cModel\u003e oneModelInStack \u003d makeModelStack(new ModelManager());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        // To same object"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertEquals(history, history);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        // To null"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertNotEquals(history, null);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        // To objects from other classes"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertNotEquals(history, 1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        // To ModelHistory objects but different in past models"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertNotEquals(history, new ModelHistory(oneModelInStack, history.getFutureModels()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        // To ModelHistory objects but different in future models"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertNotEquals(history, new ModelHistory(history.getPastModels(), oneModelInStack));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        // To ModelHistory objects but different in past and future models"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertNotEquals(history, new ModelHistory(oneModelInStack, oneModelInStack));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        // To ModelHistory objects and equal in both models"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertEquals(history, new ModelHistory(history.getPastModels(), history.getFutureModels()));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryoarmanda": 151
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import static seedu.address.testutil.TestUtil.makeModelStack;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.ANNIVERSARY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.BUSAN_TRIP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.testutil.MooLahBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private ModelManager modelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    private ModelManager expectedModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        expectedModelManager \u003d new ModelManager(modelManager);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertEquals(new MooLah(), new MooLah(modelManager.getMooLah()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertEquals(new ModelHistory(), modelManager.getModelHistory());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void resetData_nullArgument_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.resetData(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void resetData_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Model other \u003d new ModelManager(modelManager.getMooLah(), modelManager.getUserPrefs(), new ModelHistory());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        modelManager.resetData(other);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertEquals(modelManager, other);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void rollbackModel_noModel_returnsEmptyOptional() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        ModelHistory before \u003d new ModelHistory(modelManager.getModelHistory());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        Optional\u003cModel\u003e model \u003d modelManager.rollbackModel();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertEquals(before, modelManager.getModelHistory());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertTrue(model.isEmpty());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void rollbackModel_hasModel_returnsModelOptional() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        Model other \u003d new ModelManager();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        modelManager.addToPastHistory(other);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        expectedModelManager.addToFutureHistory(other);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        Optional\u003cModel\u003e model \u003d modelManager.rollbackModel();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertTrue(model.isPresent());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertEquals(model.get().getModelHistory(), expectedModelManager.getModelHistory());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void migrateModel_noModel_returnsEmptyOptional() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        ModelHistory before \u003d new ModelHistory(modelManager.getModelHistory());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        Optional\u003cModel\u003e model \u003d modelManager.migrateModel();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertEquals(before, modelManager.getModelHistory());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertTrue(model.isEmpty());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public void migrateModel_hasModel_returnsModelOptional() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        Model other \u003d new ModelManager();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        modelManager.addToFutureHistory(other);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        expectedModelManager.addToPastHistory(other);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        Optional\u003cModel\u003e model \u003d modelManager.migrateModel();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertTrue(model.isPresent());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertEquals(model.get().getModelHistory(), expectedModelManager.getModelHistory());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        //userPrefs.setMooLahFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        userPrefs.setMooLahFilePath(Paths.get(\"moolah/file/path\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        //userPrefs.setMooLahFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        userPrefs.setMooLahFilePath(Paths.get(\"new/moolah/file/path\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void setMooLahFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setMooLahFilePath(null));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void setMooLahFilePath_validPath_setsMooLahFilePath() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        //Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Path path \u003d Paths.get(\"moolah/file/path\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        modelManager.setMooLahFilePath(path);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertEquals(path, modelManager.getMooLahFilePath());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void hasExpense_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasExpense(null));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void hasExpense_expenseNotInMooLah_returnsFalse() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(modelManager.hasExpense(ANNIVERSARY));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void hasExpense_expenseInMooLah_returnsTrue() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        modelManager.addExpense(ANNIVERSARY);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(modelManager.hasExpense(ANNIVERSARY));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void getFilteredExpenseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredExpenseList().remove(0));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        MooLah mooLah \u003d new MooLahBuilder().withExpense(ANNIVERSARY).withExpense(BUSAN_TRIP).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        MooLah differentMooLah \u003d new MooLah();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        ModelHistory modelHistory \u003d new ModelHistory();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        modelManager \u003d new ModelManager(mooLah, userPrefs, modelHistory);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(mooLah, userPrefs, modelHistory);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // different mooLah -\u003e returns false"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentMooLah, userPrefs, modelHistory)));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String[] keywords \u003d ANNIVERSARY.getDescription().fullDescription.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        modelManager.updateFilteredExpenseList(new DescriptionContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(mooLah, userPrefs, modelHistory)));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        modelManager.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        differentUserPrefs.setMooLahFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(mooLah, differentUserPrefs, modelHistory)));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        // different history -\u003e returns false"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        ModelHistory differentHistory \u003d new ModelHistory(makeModelStack(modelManager), makeModelStack());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        modelManagerCopy.setModelHistory(differentHistory);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        assertFalse(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 14,
      "anqichen9856": 25,
      "-": 96,
      "ryoarmanda": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/model/MooLahTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_FOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.ANNIVERSARY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalMooLah;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Event;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.exceptions.DuplicateExpenseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class MooLahTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final MooLah mooLah \u003d new MooLah();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertEquals(Collections.emptyList(), mooLah.getExpenseList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e mooLah.resetData(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void resetData_withValidReadOnlyMooLah_replacesData() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        MooLah newData \u003d getTypicalMooLah();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        mooLah.resetData(newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertEquals(newData, mooLah);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void resetData_withDuplicateExpenses_throwsDuplicateExpenseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // Two expenses with the same identity fields"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        Expense editedAlice \u003d new ExpenseBuilder(ANNIVERSARY).withCategory(VALID_CATEGORY_FOOD).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        List\u003cExpense\u003e newExpenses \u003d Arrays.asList(ANNIVERSARY, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        MooLahStub newData \u003d new MooLahStub(newExpenses);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(DuplicateExpenseException.class, () -\u003e mooLah.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void hasExpense_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e mooLah.hasExpense(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void hasExpense_expenseNotInMooLah_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertFalse(mooLah.hasExpense(ANNIVERSARY));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void hasExpense_expenseInMooLah_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        mooLah.addExpense(ANNIVERSARY);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertTrue(mooLah.hasExpense(ANNIVERSARY));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void getExpenseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e mooLah.getExpenseList().remove(0));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * A stub ReadOnlyMooLah whose expenses list can violate interface constraints."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static class MooLahStub implements ReadOnlyMooLah {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        private final ObservableList\u003cExpense\u003e expenses \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        private final ObservableList\u003cBudget\u003e budgets \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "czkay"
        },
        "content": "        private final ObservableList\u003cEvent\u003e events \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        MooLahStub(Collection\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            this.expenses.setAll(expenses);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public ObservableList\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return expenses;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        public ObservableList\u003cBudget\u003e getBudgetList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            return budgets;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "czkay"
        },
        "content": "        public ObservableList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "czkay"
        },
        "content": "            return events;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 13,
      "czkay": 4,
      "qweiping31415": 2,
      "anqichen9856": 30,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void setMooLahFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setMooLahFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setAliasMappings_nullAliasMappings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAliasMappings(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 5,
      "anqichen9856": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/budget/BudgetTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.testutil.TypicalBudgets.OUTSIDE_SCHOOL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.testutil.TypicalBudgets.SCHOOL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.ANNIVERSARY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.CHICKEN_RICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.testutil.BudgetBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class BudgetTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void testAddExpenses() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Budget schoolCopy \u003d new BudgetBuilder(SCHOOL).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        schoolCopy.addExpense(ANNIVERSARY);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertTrue(schoolCopy.getExpenses().contains(ANNIVERSARY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /* to fix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void testGetExpenseSum() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        ObservableList\u003cExpense\u003e expenses \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        expenses.add(ANNIVERSARY);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        expenses.add(CHICKEN_RICE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Budget editedSchool \u003d new BudgetBuilder(SCHOOL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .withExpenses(expenses).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertEquals(23.50, editedSchool.getExpenseSum());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void testNormalize() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Timestamp refreshDate \u003d Timestamp.createTimestampIfValid(\"17-12-2019\").get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Budget schoolCopy \u003d new BudgetBuilder(SCHOOL).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        schoolCopy.normalize(refreshDate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertEquals(Timestamp.createTimestampIfValid(\"15-12-2019 noon\").get().getDate(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                schoolCopy.getStartDate().getDate());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertEquals(Timestamp.createTimestampIfValid(\"14-01-2020 noon\").get().getDate(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                schoolCopy.getEndDate().getDate());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void testRemoveIdentical() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        ObservableList\u003cExpense\u003e expenses \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        expenses.add(ANNIVERSARY);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Budget editedSchool \u003d new BudgetBuilder(SCHOOL)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .withExpenses(expenses).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        editedSchool.removeExpense(ANNIVERSARY);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertFalse(editedSchool.getExpenses().contains(ANNIVERSARY));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void testSetExpense() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        ObservableList\u003cExpense\u003e expenses \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        expenses.add(ANNIVERSARY);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Budget editedSchool \u003d new BudgetBuilder(SCHOOL)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .withExpenses(expenses).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        editedSchool.setExpense(ANNIVERSARY, CHICKEN_RICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertTrue(editedSchool.getExpenses().contains(CHICKEN_RICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertFalse(editedSchool.getExpenses().contains(ANNIVERSARY));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void testIsSameBudget() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertTrue(SCHOOL.isSameBudget(SCHOOL));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertFalse(SCHOOL.isSameBudget(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // different amount -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Budget editedSchool \u003d new BudgetBuilder(SCHOOL)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .withAmount(\"400\").build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertTrue(SCHOOL.isSameBudget(editedSchool));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        editedSchool \u003d new BudgetBuilder(SCHOOL)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .withDescription(\"outside school\").build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertFalse(SCHOOL.isSameBudget(editedSchool));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // different start date -\u003e return true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        editedSchool \u003d new BudgetBuilder(SCHOOL)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .withStartDate(\"15-10-2019\").build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertTrue(SCHOOL.isSameBudget(editedSchool));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // different end date -\u003e return true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        editedSchool \u003d new BudgetBuilder(SCHOOL)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .withEndDate(\"15-10-2020\").build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertTrue(SCHOOL.isSameBudget(editedSchool));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // different primary status -\u003e return true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        editedSchool \u003d new BudgetBuilder(SCHOOL)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .withIsPrimary(false).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertTrue(SCHOOL.isSameBudget(editedSchool));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // different period -\u003e return true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        editedSchool \u003d new BudgetBuilder(SCHOOL)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .withPeriod(\"year\").build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertTrue(SCHOOL.isSameBudget(editedSchool));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // different proportion used -\u003e return true"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        editedSchool \u003d new BudgetBuilder(SCHOOL)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .withProportionUsed(new Percentage(90)).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertTrue(SCHOOL.isSameBudget(editedSchool));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // different expense list -\u003e return true"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        ObservableList\u003cExpense\u003e expenses \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        expenses.add(ANNIVERSARY);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        editedSchool \u003d new BudgetBuilder(SCHOOL)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .withExpenses(expenses).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertTrue(SCHOOL.isSameBudget(editedSchool));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        //different amount, start date, end date, period, primary status, proportion used, expense list"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // -\u003e returns true"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        editedSchool \u003d new BudgetBuilder(SCHOOL)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .withAmount(\"400\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .withStartDate(\"15-10-2019\")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .withEndDate(\"15-10-2020\")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .withPeriod(\"year\")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .withIsPrimary(false)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .withProportionUsed(new Percentage(90))"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .withExpenses(expenses).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertTrue(SCHOOL.isSameBudget(editedSchool));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Budget schoolCopy \u003d new BudgetBuilder(SCHOOL).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertTrue(SCHOOL.equals(schoolCopy));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertTrue(SCHOOL.equals(SCHOOL));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertFalse(SCHOOL.equals(null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertFalse(SCHOOL.equals(6));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // different budget -\u003e returns false"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertFalse(SCHOOL.equals(OUTSIDE_SCHOOL));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Budget editedSchool \u003d new BudgetBuilder(SCHOOL)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .withDescription(\"outside school\").build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertFalse(SCHOOL.equals(editedSchool));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // different amount -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        editedSchool \u003d new BudgetBuilder(SCHOOL)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .withAmount(\"400\").build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertFalse(SCHOOL.equals(editedSchool));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // different start date -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        editedSchool \u003d new BudgetBuilder(SCHOOL)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .withStartDate(\"18-10-2019\").build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertFalse(SCHOOL.equals(editedSchool));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // different end date -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        editedSchool \u003d new BudgetBuilder(SCHOOL)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .withEndDate(\"17-10-2020\").build();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertFalse(SCHOOL.equals(editedSchool));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "         */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // different primary status -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        editedSchool \u003d new BudgetBuilder(SCHOOL)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .withIsPrimary(false).build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertFalse(SCHOOL.equals(editedSchool));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // different proportion used -\u003e returns false"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        editedSchool \u003d new BudgetBuilder(SCHOOL)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .withProportionUsed(new Percentage(90)).build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertFalse(SCHOOL.equals(editedSchool));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // different expense list -\u003e returns false"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        ObservableList\u003cExpense\u003e expenses \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        expenses.add(ANNIVERSARY);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        editedSchool \u003d new BudgetBuilder(SCHOOL)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                .withExpenses(expenses).build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertFalse(SCHOOL.equals(editedSchool));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /* to fix"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "czkay"
        },
        "content": "        assertTrue(SCHOOL.toString().equals(SCHOOL_BUDGET_STRING_ONE)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "czkay"
        },
        "content": "                || SCHOOL.toString().equals(SCHOOL_BUDGET_STRING_TWO));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 7,
      "czkay": 2,
      "anqichen9856": 193
    }
  },
  {
    "path": "src/test/java/seedu/address/model/budget/PercentageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class PercentageTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static final Percentage SAMPLE_PERCENTAGE \u003d new Percentage(33);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static final Percentage SAMPLE_THRESHOLD \u003d new Percentage(50);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void constructor_lowerInvalidInput_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        int lowerInvalidInput \u003d -1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Percentage(lowerInvalidInput));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void isValidPercentage() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // invalid percentage"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertFalse(Percentage.isValidPercentage(-1)); // negative"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // valid percentage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertTrue(Percentage.isValidPercentage(0)); // smallest non-negative number"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertTrue(Percentage.isValidPercentage(100)); // largest percentage"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertTrue(Percentage.isValidPercentage(33)); // normal percentage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void calculate_validInput_successful() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Percentage percentage \u003d Percentage.calculate(57.50, 200);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertEquals(new Percentage(29), percentage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void calculate_differentSign_exceptionThrown() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            Percentage percentage \u003d Percentage.calculate(-50, 200);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            assertEquals(\"Numerator and denominator must have same sign\", e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void testReach() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // smaller than threshold"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertFalse(new Percentage(30).reach(SAMPLE_THRESHOLD));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        // larger than threshold"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertTrue(new Percentage(70).reach(SAMPLE_THRESHOLD));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertEquals(\"30%\", new Percentage(30).toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        //Not a Percentage object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertFalse(SAMPLE_PERCENTAGE.equals(\"\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        //Same as this object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertTrue(SAMPLE_PERCENTAGE.equals(SAMPLE_PERCENTAGE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        //Percentage with different value"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertFalse(SAMPLE_PERCENTAGE.equals(new Percentage(40)));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        //Percentage with same value"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertTrue(SAMPLE_PERCENTAGE.equals(new Percentage(33)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/model/budget/UniqueBudgetListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.testutil.TypicalBudgets.OUTSIDE_SCHOOL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.testutil.TypicalBudgets.SCHOOL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.exceptions.DuplicateBudgetException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class UniqueBudgetListTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private final UniqueBudgetList uniqueBudgetList \u003d new UniqueBudgetList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void contains_nullBudget_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBudgetList.contains(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void contains_budgetNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertFalse(uniqueBudgetList.contains(SCHOOL));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void contains_budgetInList_returnsTrue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        uniqueBudgetList.add(SCHOOL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertTrue(uniqueBudgetList.contains(SCHOOL));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void add_nullBudget_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBudgetList.add(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void add_duplicateBudget_throwsDuplicateBudgetException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        uniqueBudgetList.add(SCHOOL);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(DuplicateBudgetException.class, () -\u003e uniqueBudgetList.add(SCHOOL));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void setBudgets_nullUniqueBudgetList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBudgetList.setBudgets((UniqueBudgetList) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void setBudgets_uniqueBudgetList_replacesOwnListWithProvidedUniqueBudgetList() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        uniqueBudgetList.add(SCHOOL);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        UniqueBudgetList expectedUniqueBudgetList \u003d new UniqueBudgetList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        expectedUniqueBudgetList.add(OUTSIDE_SCHOOL);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        uniqueBudgetList.setBudgets(expectedUniqueBudgetList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertEquals(expectedUniqueBudgetList, uniqueBudgetList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void setBudgets_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBudgetList.setBudgets((List\u003cBudget\u003e) null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void setBudgets_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        uniqueBudgetList.add(SCHOOL);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        List\u003cBudget\u003e budgetList \u003d Collections.singletonList(OUTSIDE_SCHOOL);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        uniqueBudgetList.setBudgets(budgetList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        //UniqueBudgetList expectedUniqueBudgetList \u003d new UniqueBudgetList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        //expectedUniqueBudgetList.add(OUTSIDE_SCHOOL);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertTrue(uniqueBudgetList.hasBudgetWithName(OUTSIDE_SCHOOL.getDescription()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertFalse(uniqueBudgetList.hasBudgetWithName(SCHOOL.getDescription()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void setBudgets_listWithDuplicateBudgets_throwsDuplicateBudgetException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        List\u003cBudget\u003e listWithDuplicateBudgets \u003d Arrays.asList(SCHOOL, SCHOOL);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(DuplicateBudgetException.class, () -\u003e uniqueBudgetList.setBudgets(listWithDuplicateBudgets));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            uniqueBudgetList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 89
    }
  },
  {
    "path": "src/test/java/seedu/address/model/category/CategoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package seedu.address.model.category;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public class CategoryTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Category(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Category(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        // null category name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Category.isValidCategoryName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 6,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/DescriptionContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class DescriptionContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DescriptionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void test_descriptionContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withDescription(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void test_descriptionDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withDescription(\"Alice\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // Keywords match price, but does not match description"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"12345\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withDescription(\"Alice\").withPrice(\"12345\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/DescriptionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Description.isValidDescription(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Description.isValidDescription(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // valid description"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(Description.isValidDescription(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(Description.isValidDescription(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(Description.isValidDescription(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(Description.isValidDescription(\"David Roger Jackson Ray Jr 2nd\")); // long descriptions"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/ExpenseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_FOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_TRANSPORT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CHICKEN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TRANSPORT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_CHICKEN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_TRANSPORT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_UNIQUE_IDENTIFIER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.ANNIVERSARY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.TRANSPORT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class ExpenseTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                new Expense(null, new Price(\"1\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                        new Category(\"FOOD\"), null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                new Expense(new Description(\"meat\"), null,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                        new Category(\"FOOD\"), null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                new Expense(new Description(\"meat\"), new Price(\"1\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                        null, null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void isSameExpense() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(ANNIVERSARY.isSameExpense(ANNIVERSARY));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(ANNIVERSARY.isSameExpense(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different price -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense editedAlice \u003d new ExpenseBuilder(ANNIVERSARY)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withPrice(VALID_PRICE_TRANSPORT).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(ANNIVERSARY.isSameExpense(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different description -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        editedAlice \u003d new ExpenseBuilder(ANNIVERSARY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_TRANSPORT).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(ANNIVERSARY.isSameExpense(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        // different category -\u003e return true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        editedAlice \u003d new ExpenseBuilder(ANNIVERSARY)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                .withCategory(VALID_CATEGORY_FOOD).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(ANNIVERSARY.isSameExpense(editedAlice));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        //different price, category, and description -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        editedAlice \u003d new ExpenseBuilder(ANNIVERSARY)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withPrice(VALID_PRICE_CHICKEN)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_CHICKEN)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                .withCategory(VALID_CATEGORY_TRANSPORT).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(ANNIVERSARY.isSameExpense(editedAlice));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // same everything except different unique identifier -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        editedAlice \u003d new ExpenseBuilder(ANNIVERSARY)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .withUniqueIdentifier(VALID_UNIQUE_IDENTIFIER).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(ANNIVERSARY.isSameExpense(editedAlice));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense aliceCopy \u003d new ExpenseBuilder(ANNIVERSARY).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(ANNIVERSARY.equals(aliceCopy));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(ANNIVERSARY.equals(ANNIVERSARY));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(ANNIVERSARY.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(ANNIVERSARY.equals(5));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(ANNIVERSARY.equals(TRANSPORT));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        Expense editedAlice \u003d new ExpenseBuilder(ANNIVERSARY).withDescription(VALID_DESCRIPTION_TRANSPORT).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(ANNIVERSARY.equals(editedAlice));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // different price -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        editedAlice \u003d new ExpenseBuilder(ANNIVERSARY).withPrice(VALID_PRICE_TRANSPORT).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(ANNIVERSARY.equals(editedAlice));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        editedAlice \u003d new ExpenseBuilder(ANNIVERSARY).withCategory(VALID_CATEGORY_FOOD).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(ANNIVERSARY.equals(editedAlice));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 46,
      "qweiping31415": 20,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/PriceTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class PriceTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Price(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void constructor_invalidPrice_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String invalidPrice \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Price(invalidPrice));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void isValidPrice() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // null price"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Price.isValidPrice(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // invalid prices"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Price.isValidPrice(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Price.isValidPrice(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Price.isValidPrice(\"price\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Price.isValidPrice(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Price.isValidPrice(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Price.isValidPrice(\"9312,\")); // end with comma"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Price.isValidPrice(\"9312.\")); // end with period"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Price.isValidPrice(\".9312\")); // begin with period"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Price.isValidPrice(\",9312\")); // begin with comma"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Price.isValidPrice(\"9,3.12\")); // multiple commas"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Price.isValidPrice(\"9.31.2\")); // multiple periods"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Price.isValidPrice(\"9,.312\")); // period and comma"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(Price.isValidPrice(\"-9123\")); // negative"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // valid prices"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(Price.isValidPrice(\"0\")); // price is 0"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(Price.isValidPrice(\"91\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(Price.isValidPrice(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(Price.isValidPrice(\"93121534\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(Price.isValidPrice(\"931,21534\")); // comma"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(Price.isValidPrice(\"931.21534\")); // period"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(Price.isValidPrice(\"93121534\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(Price.isValidPrice(\"124293842033123\")); // long prices"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/TimestampTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "czkay"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "czkay"
        },
        "content": "public class TimestampTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Timestamp(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //    public void constructor_invalidTimestamp_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        String invalidTimestamp \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //        assertThrows(IllegalArgumentException.class, () -\u003e Timestamp.createTimestampIfValid(invalidTimestamp));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void createTimestampIfValid() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "czkay"
        },
        "content": "        // null timestamp"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Timestamp.createTimestampIfValid(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Optional\u003cTimestamp\u003e invalidTimestampOne \u003d Timestamp.createTimestampIfValid(\"\"); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Optional\u003cTimestamp\u003e invalidTimestampTwo \u003d Timestamp.createTimestampIfValid(\"zshfkbsuhf\"); // gibberish"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "czkay"
        },
        "content": "        assertTrue(invalidTimestampOne.isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "czkay"
        },
        "content": "        assertTrue(invalidTimestampTwo.isEmpty());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czkay"
        },
        "content": "        // valid description"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Optional\u003cTimestamp\u003e validTimestampOne \u003d Timestamp.createTimestampIfValid(\"20-10\"); // without year"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": "        Optional\u003cTimestamp\u003e validTimestampTwo \u003d Timestamp.createTimestampIfValid(\"12-01-2019\"); // with year"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "czkay"
        },
        "content": "        assertTrue(validTimestampOne.isPresent());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "czkay"
        },
        "content": "        assertTrue(validTimestampTwo.isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "czkay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/UniqueExpenseListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.ANNIVERSARY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.TRANSPORT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.exceptions.DuplicateExpenseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.exceptions.ExpenseNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class UniqueExpenseListTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private final UniqueExpenseList uniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void contains_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenseList.contains(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void contains_expenseNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(uniqueExpenseList.contains(ANNIVERSARY));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void contains_expenseInList_returnsTrue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        uniqueExpenseList.add(ANNIVERSARY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(uniqueExpenseList.contains(ANNIVERSARY));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void add_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenseList.add(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void add_duplicateExpense_throwsDuplicateExpenseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        uniqueExpenseList.add(ANNIVERSARY);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(DuplicateExpenseException.class, () -\u003e uniqueExpenseList.add(ANNIVERSARY));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setExpense_nullTargetExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenseList.setExpense(null, ANNIVERSARY));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setExpense_nullEditedExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenseList.setExpense(ANNIVERSARY, null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setExpense_targetExpenseNotInList_throwsExpenseNotFoundException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(ExpenseNotFoundException.class, () -\u003e uniqueExpenseList.setExpense(ANNIVERSARY, ANNIVERSARY));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setExpense_editedExpenseIsSameExpense_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        uniqueExpenseList.add(ANNIVERSARY);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        uniqueExpenseList.setExpense(ANNIVERSARY, ANNIVERSARY);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        UniqueExpenseList expectedUniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expectedUniqueExpenseList.add(ANNIVERSARY);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(expectedUniqueExpenseList, uniqueExpenseList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //TODO: include some sort of expense ID for expense equality"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //public void setExpense_editedExpenseHasSameIdentity_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //    uniqueExpenseList.add(ANNIVERSARY);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //    Expense editedAlice \u003d new ExpenseBuilder(ANNIVERSARY)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //            .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_CLAIMABLE)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //            .build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //    uniqueExpenseList.setExpense(ANNIVERSARY, editedAlice);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //    UniqueExpenseList expectedUniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //    expectedUniqueExpenseList.add(editedAlice);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //    assertEquals(expectedUniqueExpenseList, uniqueExpenseList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setExpense_editedExpenseHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        uniqueExpenseList.add(ANNIVERSARY);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        uniqueExpenseList.setExpense(ANNIVERSARY, TRANSPORT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        UniqueExpenseList expectedUniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expectedUniqueExpenseList.add(TRANSPORT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(expectedUniqueExpenseList, uniqueExpenseList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setExpense_editedExpenseHasNonUniqueIdentity_throwsDuplicateExpenseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        uniqueExpenseList.add(ANNIVERSARY);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        uniqueExpenseList.add(TRANSPORT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(DuplicateExpenseException.class, () -\u003e uniqueExpenseList.setExpense(ANNIVERSARY, TRANSPORT));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void remove_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenseList.remove(null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void remove_expenseDoesNotExist_throwsExpenseNotFoundException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(ExpenseNotFoundException.class, () -\u003e uniqueExpenseList.remove(ANNIVERSARY));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void remove_existingExpense_removesExpense() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        uniqueExpenseList.add(ANNIVERSARY);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        uniqueExpenseList.remove(ANNIVERSARY);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        UniqueExpenseList expectedUniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(expectedUniqueExpenseList, uniqueExpenseList);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setExpenses_nullUniqueExpenseList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenseList.setExpenses((UniqueExpenseList) null));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setExpenses_uniqueExpenseList_replacesOwnListWithProvidedUniqueExpenseList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        uniqueExpenseList.add(ANNIVERSARY);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        UniqueExpenseList expectedUniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expectedUniqueExpenseList.add(TRANSPORT);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        uniqueExpenseList.setExpenses(expectedUniqueExpenseList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(expectedUniqueExpenseList, uniqueExpenseList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setExpenses_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenseList.setExpenses((List\u003cExpense\u003e) null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setExpenses_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        uniqueExpenseList.add(ANNIVERSARY);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        List\u003cExpense\u003e expenseList \u003d Collections.singletonList(TRANSPORT);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        uniqueExpenseList.setExpenses(expenseList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        UniqueExpenseList expectedUniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expectedUniqueExpenseList.add(TRANSPORT);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(expectedUniqueExpenseList, uniqueExpenseList);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void setExpenses_listWithDuplicateExpenses_throwsDuplicateExpenseException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        List\u003cExpense\u003e listWithDuplicateExpenses \u003d Arrays.asList(ANNIVERSARY, ANNIVERSARY);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(DuplicateExpenseException.class, () -\u003e uniqueExpenseList.setExpenses(listWithDuplicateExpenses));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            -\u003e uniqueExpenseList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 160
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedBudgetTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.storage.JsonAdaptedBudget.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.testutil.TypicalBudgets.SCHOOL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.Percentage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Price;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class JsonAdaptedBudgetTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String VALID_DESCRIPTION \u003d \"school related expenses\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String VALID_AMOUNT \u003d \"300\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String VALID_START_DATE \u003d \"01-10-2019\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String VALID_END_DATE \u003d \"01-11-2019\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String VALID_PERIOD \u003d \"month\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final List\u003cJsonAdaptedExpense\u003e VALID_EXPENSES \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final boolean VALID_IS_PRIMARY \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String VALID_PROPORTION_USED \u003d \"60%\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \"sch@@l related expenses\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static final String INVALID_AMOUNT \u003d \"-200\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private static final String INVALID_START_DATE \u003d \"blah\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private static final String INVALID_END_DATE \u003d \"bleh\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static final String INVALID_PERIOD \u003d \"dfa\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static final String INVALID_PROPORTION_USED \u003d \"-2%\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void toModelType_validBudgetDetails_returnsBudget() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        JsonAdaptedBudget budget \u003d new JsonAdaptedBudget(SCHOOL);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertEquals(SCHOOL, budget.toModelType());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void toModelType_invalidDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        JsonAdaptedBudget budget \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                new JsonAdaptedBudget(INVALID_DESCRIPTION, VALID_AMOUNT, VALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        VALID_PERIOD, VALID_EXPENSES, VALID_IS_PRIMARY, VALID_PROPORTION_USED);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, budget::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        JsonAdaptedBudget budget \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                new JsonAdaptedBudget(null, VALID_AMOUNT, VALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        VALID_PERIOD, VALID_EXPENSES, VALID_IS_PRIMARY, VALID_PROPORTION_USED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, budget::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void toModelType_invalidAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        JsonAdaptedBudget budget \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                new JsonAdaptedBudget(VALID_DESCRIPTION, INVALID_AMOUNT, VALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        VALID_PERIOD, VALID_EXPENSES, VALID_IS_PRIMARY, VALID_PROPORTION_USED);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        String expectedMessage \u003d Price.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, budget::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void toModelType_nullAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        JsonAdaptedBudget budget \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                new JsonAdaptedBudget(VALID_DESCRIPTION, null, VALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        VALID_PERIOD, VALID_EXPENSES, VALID_IS_PRIMARY, VALID_PROPORTION_USED);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, budget::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void toModelType_invalidStartDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        JsonAdaptedBudget budget \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                new JsonAdaptedBudget(VALID_DESCRIPTION, VALID_AMOUNT, INVALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        VALID_PERIOD, VALID_EXPENSES, VALID_IS_PRIMARY, VALID_PROPORTION_USED);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        String expectedMessage \u003d Timestamp.MESSAGE_CONSTRAINTS_DATE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, budget::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void toModelType_nullStartDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        JsonAdaptedBudget budget \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                new JsonAdaptedBudget(VALID_DESCRIPTION, VALID_AMOUNT, null, VALID_END_DATE,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        VALID_PERIOD, VALID_EXPENSES, VALID_IS_PRIMARY, VALID_PROPORTION_USED);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Timestamp.class.getSimpleName());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, budget::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void toModelType_invalidEndDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        JsonAdaptedBudget budget \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                new JsonAdaptedBudget(VALID_DESCRIPTION, VALID_AMOUNT, VALID_START_DATE, INVALID_END_DATE,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        VALID_PERIOD, VALID_EXPENSES, VALID_IS_PRIMARY, VALID_PROPORTION_USED);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        String expectedMessage \u003d Timestamp.MESSAGE_CONSTRAINTS_DATE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, budget::toModelType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void toModelType_nullEndDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        JsonAdaptedBudget budget \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                new JsonAdaptedBudget(VALID_DESCRIPTION, VALID_AMOUNT, VALID_START_DATE, null,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        VALID_PERIOD, VALID_EXPENSES, VALID_IS_PRIMARY, VALID_PROPORTION_USED);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Timestamp.class.getSimpleName());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, budget::toModelType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void toModelType_invalidPeriod_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        JsonAdaptedBudget budget \u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                new JsonAdaptedBudget(VALID_DESCRIPTION, VALID_AMOUNT, VALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        INVALID_PERIOD, VALID_EXPENSES, VALID_IS_PRIMARY, VALID_PROPORTION_USED);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        String expectedMessage \u003d Timestamp.MESSAGE_CONSTRAINTS_PERIOD;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, budget::toModelType);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void toModelType_nullPeriod_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        JsonAdaptedBudget budget \u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                new JsonAdaptedBudget(VALID_DESCRIPTION, VALID_AMOUNT, VALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        null, VALID_EXPENSES, VALID_IS_PRIMARY, VALID_PROPORTION_USED);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Period.class.getSimpleName());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, budget::toModelType);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void toModelType_invalidProportionUsed_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        JsonAdaptedBudget budget \u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                new JsonAdaptedBudget(VALID_DESCRIPTION, VALID_AMOUNT, VALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        VALID_PERIOD, VALID_EXPENSES, VALID_IS_PRIMARY, INVALID_PROPORTION_USED);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        String expectedMessage \u003d Percentage.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, budget::toModelType);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void toModelType_nullProportionUsed_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        JsonAdaptedBudget budget \u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                new JsonAdaptedBudget(VALID_DESCRIPTION, VALID_AMOUNT, VALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        VALID_PERIOD, VALID_EXPENSES, VALID_IS_PRIMARY, null);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Percentage.class.getSimpleName());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, budget::toModelType);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 2,
      "anqichen9856": 149
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedExpenseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.storage.JsonAdaptedExpense.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.BUSAN_TRIP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Price;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.UniqueIdentifier;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class JsonAdaptedExpenseTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \"R@chel\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String INVALID_PRICE \u003d \"+651234\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static final String INVALID_CATEGORY \u003d \"#friend\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String INVALID_UNIQUE_IDENTIFIER \u003d \"Expense1245\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private static final String INVALID_TIMESTAMP \u003d \"blah\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static final String INVALID_BUDGET_NAME \u003d \"sch@@l\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d BUSAN_TRIP.getDescription().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String VALID_PRICE \u003d BUSAN_TRIP.getPrice().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private static final String VALID_CATEGORY \u003d BUSAN_TRIP.getCategory().getCategoryName();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String VALID_UNIQUE_IDENTIFIER \u003d BUSAN_TRIP.getUniqueIdentifier().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private static final String VALID_TIMESTAMP \u003d BUSAN_TRIP.getTimestamp().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static final String VALID_BUDGET_NAME \u003d \"school\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void toModelType_validExpenseDetails_returnsExpense() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        JsonAdaptedExpense expense \u003d new JsonAdaptedExpense(BUSAN_TRIP);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(BUSAN_TRIP, expense.toModelType());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void toModelType_invalidDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                new JsonAdaptedExpense(INVALID_DESCRIPTION, VALID_PRICE, VALID_CATEGORY,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        VALID_TIMESTAMP, VALID_BUDGET_NAME, VALID_UNIQUE_IDENTIFIER);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                new JsonAdaptedExpense(null, VALID_PRICE, VALID_CATEGORY, VALID_TIMESTAMP,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        VALID_BUDGET_NAME, VALID_UNIQUE_IDENTIFIER);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void toModelType_invalidPrice_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "czkay"
        },
        "content": "                new JsonAdaptedExpense(VALID_DESCRIPTION, INVALID_PRICE,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        VALID_CATEGORY, VALID_TIMESTAMP, VALID_BUDGET_NAME, VALID_UNIQUE_IDENTIFIER);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String expectedMessage \u003d Price.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void toModelType_nullPrice_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "czkay"
        },
        "content": "                new JsonAdaptedExpense(VALID_DESCRIPTION, null,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        VALID_CATEGORY, VALID_TIMESTAMP, VALID_BUDGET_NAME, VALID_UNIQUE_IDENTIFIER);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void toModelType_invalidCategory_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                new JsonAdaptedExpense(VALID_DESCRIPTION, VALID_PRICE,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        INVALID_CATEGORY, VALID_TIMESTAMP, VALID_BUDGET_NAME, VALID_UNIQUE_IDENTIFIER);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(IllegalValueException.class, expense::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void toModelType_invalidUniqueIdentifier_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "czkay"
        },
        "content": "                new JsonAdaptedExpense(VALID_DESCRIPTION, VALID_PRICE,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        VALID_CATEGORY, VALID_TIMESTAMP, VALID_BUDGET_NAME, INVALID_UNIQUE_IDENTIFIER);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String expectedMessage \u003d UniqueIdentifier.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void toModelType_nullUniqueIdentifier_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "czkay"
        },
        "content": "                new JsonAdaptedExpense(VALID_DESCRIPTION, VALID_PRICE,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        VALID_CATEGORY, VALID_TIMESTAMP, VALID_BUDGET_NAME, null);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, UniqueIdentifier.class.getSimpleName());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "czkay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public void toModelType_invalidTimestamp_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "czkay"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "czkay"
        },
        "content": "                new JsonAdaptedExpense(VALID_DESCRIPTION, VALID_PRICE,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        VALID_CATEGORY, INVALID_TIMESTAMP, VALID_BUDGET_NAME, VALID_UNIQUE_IDENTIFIER);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "czkay"
        },
        "content": "        String expectedMessage \u003d Timestamp.MESSAGE_CONSTRAINTS_DATE;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "czkay"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void toModelType_nullTimestamp_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                new JsonAdaptedExpense(VALID_DESCRIPTION, VALID_PRICE,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        VALID_CATEGORY, null, VALID_BUDGET_NAME, VALID_UNIQUE_IDENTIFIER);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Timestamp.class.getSimpleName());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void toModelType_invalidBudgetName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                new JsonAdaptedExpense(VALID_DESCRIPTION, VALID_PRICE,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        VALID_CATEGORY, VALID_TIMESTAMP, INVALID_BUDGET_NAME, VALID_UNIQUE_IDENTIFIER);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void toModelType_nullBudgetName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                new JsonAdaptedExpense(VALID_DESCRIPTION, VALID_PRICE,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                        VALID_CATEGORY, VALID_TIMESTAMP, null, VALID_UNIQUE_IDENTIFIER);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Budget Name\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 45,
      "czkay": 14,
      "qweiping31415": 1,
      "anqichen9856": 46,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonMooLahStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.ANNIVERSARY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.HALLOWEEN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.INVESTMENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalMooLah;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.MooLah;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.ReadOnlyMooLah;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class JsonMooLahStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonMooLahStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void readMooLah_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readMooLah(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private java.util.Optional\u003cReadOnlyMooLah\u003e readMooLah(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return new JsonMooLahStorage(Paths.get(filePath)).readMooLah(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertFalse(readMooLah(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readMooLah(\"notJsonFormatMooLah.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void readMooLah_invalidExpenseMooLah_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readMooLah(\"invalidExpenseMooLah.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void readMooLah_invalidAndValidExpenseMooLah_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readMooLah(\"invalidAndValidExpenseMooLah.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void readAndSaveMooLah_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempMooLah.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        MooLah original \u003d getTypicalMooLah();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        JsonMooLahStorage jsonMooLahStorage \u003d new JsonMooLahStorage(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        jsonMooLahStorage.saveMooLah(original, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        ReadOnlyMooLah readBack \u003d jsonMooLahStorage.readMooLah(filePath).get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertEquals(original, new MooLah(readBack));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        original.addExpense(HALLOWEEN);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        original.removeExpense(ANNIVERSARY);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        jsonMooLahStorage.saveMooLah(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        readBack \u003d jsonMooLahStorage.readMooLah(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertEquals(original, new MooLah(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        original.addExpense(INVESTMENT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        jsonMooLahStorage.saveMooLah(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        readBack \u003d jsonMooLahStorage.readMooLah().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertEquals(original, new MooLah(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void saveBookMooLah_nullMooLah_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveMooLah(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Saves {@code mooLah} at the specified {@code filePath}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private void saveMooLah(ReadOnlyMooLah mooLah, String filePath) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            new JsonMooLahStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                    .saveMooLah(mooLah, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void saveMooLah_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveMooLah(new MooLah(), null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 6,
      "qweiping31415": 2,
      "anqichen9856": 36,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableMooLahTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.MooLah;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.testutil.TypicalExpenses;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class JsonSerializableMooLahTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableMooLahTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static final Path TYPICAL_EXPENSES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalExpensesMooLah.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static final Path INVALID_EXPENSE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidExpenseMooLah.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private static final Path DUPLICATE_EXPENSE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateExpenseMooLah.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void toModelType_typicalExpensesFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        JsonSerializableMooLah dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_EXPENSES_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                JsonSerializableMooLah.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        MooLah mooLahFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        MooLah typicalExpensesMooLah \u003d TypicalExpenses.getTypicalMooLah();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertEquals(mooLahFromFile, typicalExpensesMooLah);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void toModelType_invalidExpenseFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        JsonSerializableMooLah dataFromFile \u003d JsonUtil.readJsonFile(INVALID_EXPENSE_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                JsonSerializableMooLah.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public void toModelType_duplicateExpenses_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        JsonSerializableMooLah dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_EXPENSE_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "                JsonSerializableMooLah.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableMooLah.MESSAGE_DUPLICATE_EXPENSE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "briyanii": 4,
      "anqichen9856": 18,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        userPrefs.setMooLahFilePath(Paths.get(\"moolah.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalMooLah;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.MooLah;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.ReadOnlyMooLah;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        JsonMooLahStorage mooLahStorage \u003d new JsonMooLahStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        storageManager \u003d new StorageManager(mooLahStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void mooLahReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "         * {@link JsonMooLahStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonMooLahStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        MooLah original \u003d getTypicalMooLah();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        storageManager.saveMooLah(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        ReadOnlyMooLah retrieved \u003d storageManager.readMooLah().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertEquals(original, new MooLah(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public void getMooLahFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        assertNotNull(storageManager.getMooLahFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqichen9856": 14,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AliasTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_CHICKEN;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_CHICKEN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.Alias;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.core.AliasMappings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.commons.exceptions.RecursiveAliasException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.alias.AddAliasCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.event.AddEventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.DeleteExpenseCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.EditExpenseCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.FindExpenseCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.ListExpenseCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.general.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A utility class representing {@code AliasMappings} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class AliasTestUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Alias ALIAS_LIST_SHORTCUT \u003d new Alias(\"ls\", ListExpenseCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Alias ALIAS_ADD_WITH_ARGUMENTS \u003d new Alias("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            \"addchicken\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            FindExpenseCommand.COMMAND_WORD + DESCRIPTION_DESC_CHICKEN + PRICE_DESC_CHICKEN);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Alias ALIAS_FIND_SHORTCUT_INCOMPLETE \u003d new Alias (\"f\", FindExpenseCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // for recursive"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Alias ALIAS_A_TO_B \u003d new Alias(\"a\", \"b\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Alias ALIAS_B_TO_C \u003d new Alias(\"b\", \"c\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Alias ALIAS_C_TO_A \u003d new Alias(\"c\", \"a\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    //An alias mappings object with valid aliases stored."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final AliasMappings VALID_ALIAS_MAPPINGS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static final String IGNORED_VALUE \u003d \"ignored value\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // for alias is reserved"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Alias ALIAS_NAME_ADD \u003d new Alias(AddEventCommand.COMMAND_WORD, IGNORED_VALUE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Alias ALIAS_NAME_ALIAS \u003d new Alias(AddAliasCommand.COMMAND_WORD, IGNORED_VALUE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Alias ALIAS_NAME_CLEAR \u003d new Alias(ClearCommand.COMMAND_WORD, IGNORED_VALUE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Alias ALIAS_NAME_DELETE \u003d new Alias(DeleteExpenseCommand.COMMAND_WORD, IGNORED_VALUE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Alias ALIAS_NAME_EDIT \u003d new Alias(EditExpenseCommand.COMMAND_WORD, IGNORED_VALUE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Alias ALIAS_NAME_EXIT \u003d new Alias(ExitCommand.COMMAND_WORD, IGNORED_VALUE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Alias ALIAS_NAME_FIND \u003d new Alias(FindExpenseCommand.COMMAND_WORD, IGNORED_VALUE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Alias ALIAS_NAME_HELP \u003d new Alias(HelpCommand.COMMAND_WORD, IGNORED_VALUE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Alias ALIAS_NAME_LIST \u003d new Alias(ListExpenseCommand.COMMAND_WORD, IGNORED_VALUE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        AliasMappings tempValidAliasMappings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            tempValidAliasMappings \u003d new AliasMappings()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        .addAlias(ALIAS_LIST_SHORTCUT)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        .addAlias(ALIAS_ADD_WITH_ARGUMENTS)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        .addAlias(ALIAS_FIND_SHORTCUT_INCOMPLETE)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        .addAlias(ALIAS_A_TO_B)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                        .addAlias(ALIAS_B_TO_C);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } catch (RecursiveAliasException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            tempValidAliasMappings \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        VALID_ALIAS_MAPPINGS \u003d tempValidAliasMappings;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BudgetBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.BudgetPeriod;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.Percentage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Price;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * A utility class to help with building Budget objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class BudgetBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"default budget\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String DEFAULT_AMOUNT \u003d \"9999\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String DEFAULT_START_DATE \u003d \"01-01-2000\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String DEFAULT_PERIOD \u003d \"infinity\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private Price amount;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private Timestamp startDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private Timestamp endDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private BudgetPeriod period;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private ObservableList\u003cExpense\u003e expenses;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private boolean isPrimary;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private Percentage proportionUsed;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public BudgetBuilder() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            amount \u003d new Price(DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            expenses \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            startDate \u003d Timestamp.createTimestampIfValid(DEFAULT_START_DATE).get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            period \u003d ParserUtil.parsePeriod(DEFAULT_PERIOD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            endDate \u003d startDate.plus(period.getPeriod());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            isPrimary \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            proportionUsed \u003d new Percentage(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            //shouldn\u0027t have an exception"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Initializes the BudgetBuilder with the data of {@code budgetToCopy}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public BudgetBuilder(Budget budgetToCopy) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        description \u003d budgetToCopy.getDescription();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        amount \u003d budgetToCopy.getAmount();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        expenses \u003d FXCollections.observableArrayList(budgetToCopy.getExpenses());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        startDate \u003d budgetToCopy.getStartDate();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        endDate \u003d budgetToCopy.getEndDate();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        period \u003d budgetToCopy.getPeriod();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        isPrimary \u003d budgetToCopy.isPrimary();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        proportionUsed \u003d budgetToCopy.getProportionUsed();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Sets the {@code Description} of the {@code Budget} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public BudgetBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Set {@code List\u003cExpense\u003e} to the {@code Budget} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public BudgetBuilder withExpenses(ObservableList\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.expenses \u003d expenses;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Sets the {@code Amount} of the {@code Budget} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public BudgetBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.amount \u003d new Price(amount);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Sets the {@code StartDate} of the {@code Budget} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public BudgetBuilder withStartDate(String startDate) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.startDate \u003d Timestamp.createTimestampIfValid(startDate).get();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Sets the {@code EndDate} of the {@code Budget} that we are building."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public BudgetBuilder withEndDate(String endDate) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.endDate \u003d Timestamp.createTimestampIfValid(endDate).get();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Sets the {@code Period} of the {@code Budget} that we are building."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public BudgetBuilder withPeriod(String period) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            this.period \u003d ParserUtil.parsePeriod(period);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            //shouldn\u0027t have an exception"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Sets the {@code PercentageUsed} of the {@code Budget} that we are building."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public BudgetBuilder withProportionUsed(Percentage proportionUsed) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.proportionUsed \u003d proportionUsed;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Sets the {@code IsPrimary Flag} of the {@code Budget} that we are building."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public BudgetBuilder withIsPrimary(boolean isPrimary) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.isPrimary \u003d isPrimary;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public Budget build() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return new Budget(description, amount, startDate, endDate, period, expenses, isPrimary, proportionUsed);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 6,
      "anqichen9856": 131
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditExpenseDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.EditExpenseCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Price;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A utility class to help with building EditExpenseDescriptor objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class EditExpenseDescriptorBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private EditExpenseCommand.EditExpenseDescriptor descriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public EditExpenseDescriptorBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        descriptor \u003d new EditExpenseCommand.EditExpenseDescriptor();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public EditExpenseDescriptorBuilder(EditExpenseCommand.EditExpenseDescriptor descriptor) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.descriptor \u003d new EditExpenseCommand.EditExpenseDescriptor(descriptor);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns an {@code EditExpenseDescriptor} with fields containing {@code expense}\u0027s details"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public EditExpenseDescriptorBuilder(Expense expense) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        descriptor \u003d new EditExpenseCommand.EditExpenseDescriptor();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        descriptor.setDescription(expense.getDescription());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        descriptor.setPrice(expense.getPrice());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        descriptor.setCategory(expense.getCategory());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czkay"
        },
        "content": "        descriptor.setTimestamp(expense.getTimestamp());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Sets the {@code Description} of the {@code EditExpenseDescriptor} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public EditExpenseDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Sets the {@code Price} of the {@code EditExpenseDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public EditExpenseDescriptorBuilder withPrice(String price) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        descriptor.setPrice(new Price(price));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Sets the {@code Category} of the {@code EditExpenseDescriptor} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public EditExpenseDescriptorBuilder withCategory(String category) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        descriptor.setCategory(new Category(category));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Sets the {@code Timestamp} of the {@code EditExpenseDescriptor} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public EditExpenseDescriptorBuilder withTimestamp(String rawTimestamp) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "czkay"
        },
        "content": "        descriptor.setTimestamp(Timestamp.createTimestampIfValid(rawTimestamp).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public EditExpenseCommand.EditExpenseDescriptor build() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 56,
      "czkay": 10,
      "qweiping31415": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExpenseBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import seedu.address.model.category.Category;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Price;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "czkay"
        },
        "content": "import seedu.address.model.expense.Timestamp;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.UniqueIdentifier;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A utility class to help with building Expense objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class ExpenseBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Alices Birthday\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String DEFAULT_PRICE \u003d \"20\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String DEFAULT_UNIQUE_IDENTIFIER \u003d \"Expense@00000000-0000-0000-0000-000000000001\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final String DEFAULT_CATEGORY \u003d \"Healthcare\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final String DEFAULT_TIMESTAMP \u003d \"2019-12-01T12:00\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final String DEFAULT_BUDGET \u003d \"Default Budget\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Price price;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private Category category;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private UniqueIdentifier uniqueIdentifier;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "czkay"
        },
        "content": "    private Timestamp timestamp;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private Description budgetName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ExpenseBuilder() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        price \u003d new Price(DEFAULT_PRICE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        category \u003d new Category(DEFAULT_CATEGORY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        uniqueIdentifier \u003d new UniqueIdentifier(DEFAULT_UNIQUE_IDENTIFIER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        timestamp \u003d Timestamp.createTimestampIfValid(DEFAULT_TIMESTAMP).get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        budgetName \u003d new Description(DEFAULT_BUDGET);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Initializes the ExpenseBuilder with the data of {@code expenseToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ExpenseBuilder(Expense expenseToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        description \u003d expenseToCopy.getDescription();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        price \u003d expenseToCopy.getPrice();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        category \u003d expenseToCopy.getCategory();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        uniqueIdentifier \u003d expenseToCopy.getUniqueIdentifier();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        timestamp \u003d expenseToCopy.getTimestamp();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        budgetName \u003d expenseToCopy.getBudgetName();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Sets the {@code Description} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ExpenseBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Sets the {@code Category} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public ExpenseBuilder withCategory(String category) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.category \u003d new Category(category);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Sets the {@code Price} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ExpenseBuilder withPrice(String price) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.price \u003d new Price(price);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Sets the {@code UniqueIdentifier} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public ExpenseBuilder withUniqueIdentifier(String uniqueIdentifier) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        this.uniqueIdentifier \u003d new UniqueIdentifier(uniqueIdentifier);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "czkay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "czkay"
        },
        "content": "     * Sets the {@code Timestamp} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "czkay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public ExpenseBuilder withTimestamp(String rawTimestamp) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "czkay"
        },
        "content": "        this.timestamp \u003d Timestamp.createTimestampIfValid(rawTimestamp).get();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "czkay"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "czkay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Sets the {@code Timestamp} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public ExpenseBuilder withBudgetName(String budgetName) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.budgetName \u003d new Description(budgetName);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public Expense build() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return new Expense(description, price, category, timestamp, budgetName, uniqueIdentifier);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 62,
      "czkay": 12,
      "qweiping31415": 6,
      "anqichen9856": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExpenseUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "czkay"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESTAMP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.AddExpenseCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.logic.commands.expense.EditExpenseCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A utility class for Expense."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class ExpenseUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns an add command string for adding the {@code expense}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static String getAddCommand(Expense expense) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return AddExpenseCommand.COMMAND_WORD + \" \" + getExpenseDetails(expense);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns the part of command string for the given {@code expense}\u0027s details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static String getExpenseDetails(Expense expense) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + expense.getDescription().fullDescription + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        sb.append(PREFIX_PRICE + expense.getPrice().value + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        sb.append(PREFIX_CATEGORY + expense.getCategory().getCategoryName() + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "czkay"
        },
        "content": "        sb.append(PREFIX_TIMESTAMP + expense.getTimestamp().toString() + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns the part of command string for the given {@code EditExpenseDescriptor}\u0027s details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static String getEditExpenseDescriptorDetails(EditExpenseCommand.EditExpenseDescriptor descriptor) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        descriptor.getDescription().ifPresent(description -\u003e sb"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                .append(PREFIX_DESCRIPTION).append(description.fullDescription).append(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        descriptor.getPrice().ifPresent(price -\u003e sb.append(PREFIX_PRICE).append(price.value).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        descriptor.getCategory().ifPresent(category -\u003e sb.append(PREFIX_CATEGORY).append("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                category.getCategoryName()).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "czkay"
        },
        "content": "        descriptor.getTimestamp()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "czkay"
        },
        "content": "                .ifPresent(timestamp -\u003e sb.append(PREFIX_TIMESTAMP).append(timestamp.toString()).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 42,
      "czkay": 4,
      "qweiping31415": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/MooLahBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.MooLah;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * A utility class to help with building MooLah objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " *     {@code MooLah ab \u003d new MooLahBuilder().withExpense(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class MooLahBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private MooLah mooLah;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public MooLahBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        mooLah \u003d new MooLah();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public MooLahBuilder(MooLah mooLah) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        this.mooLah \u003d mooLah;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Adds a new {@code Expense} to the {@code MooLah} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public MooLahBuilder withExpense(Expense expense) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        mooLah.addExpense(expense);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public MooLah build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        return mooLah;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 1,
      "anqichen9856": 14,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns the middle index of the expense in the {@code model}\u0027s expense list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return Index.fromOneBased(model.getFilteredExpenseList().size() / 2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns the last index of the expense in the {@code model}\u0027s expense list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return Index.fromOneBased(model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Returns the expense in the {@code model}\u0027s expense list at {@code index}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static Expense getExpense(Model model, Index index) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return model.getFilteredExpenseList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     * Creates a {@code Model} stack populated by the copies of the {@code models} provided."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "    public static Stack\u003cModel\u003e makeModelStack(Model... models) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        Stack\u003cModel\u003e stack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        for (Model model : models) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "            stack.push(new ModelManager(model));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryoarmanda"
        },
        "content": "        return stack;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 8,
      "-": 48,
      "ryoarmanda": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalBudgets.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.budget.Percentage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " * A utility class containing a list of {@code Budget} objects to be used in tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "public class TypicalBudgets {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final String SCHOOL_BUDGET_STRING_ONE \u003d \"|| Description: School related expenses \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \"Amount: 300 Period: month Start date: 15 Nov 2019, 12:00:00 PM End date: 14 Dec 2019, 12:00:00 PM ||\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "czkay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "czkay"
        },
        "content": "    public static final String SCHOOL_BUDGET_STRING_TWO \u003d \"|| Description: School related expenses \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            + \"Amount: 300 Period: month Start date: Nov 15, 2019, 12:00:00 PM End date: Dec 14, 2019, 12:00:00 PM ||\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final Budget SCHOOL \u003d new BudgetBuilder()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            .withDescription(\"School related expenses\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            .withAmount(\"300\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            .withStartDate(\"15-11-2019 noon\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            .withPeriod(\"month\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            .withEndDate(\"14-12-2019 noon\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            .withIsPrimary(true)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            .withProportionUsed(new Percentage(35))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static final Budget OUTSIDE_SCHOOL \u003d new BudgetBuilder()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            .withDescription(\"Outside school expenses\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            .withAmount(\"200\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "czkay"
        },
        "content": "            .withStartDate(\"05-09-2019 noon\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            .withPeriod(\"month\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            .withEndDate(\"04-10-2019 noon\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            .withIsPrimary(false)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            .withProportionUsed(new Percentage(50))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    private TypicalBudgets() {}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "czkay": 4,
      "anqichen9856": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalExpenses.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_FOOD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_TRANSPORT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CHICKEN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TRANSPORT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_CHICKEN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_TRANSPORT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "import seedu.address.model.MooLah;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": " * A utility class containing a list of {@code Expense} objects to be used in tests."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "public class TypicalExpenses {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Expense ANNIVERSARY \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withDescription(\"Alices Birthday\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withPrice(\"20\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            .withCategory(\"Entertainment\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            .withTimestamp(\"01-12-2019 noon\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            .withBudgetName(\"Default Budget\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "czkay"
        },
        "content": "            .withUniqueIdentifier(\"Expense@00000000-0000-0000-0000-000000000001\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Expense BUSAN_TRIP \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withDescription(\"Busan Trip\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withPrice(\"1300\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            .withCategory(\"Transport\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "czkay"
        },
        "content": "            .withTimestamp(\"02-12 noon\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            .withBudgetName(\"Default Budget\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "czkay"
        },
        "content": "            .withUniqueIdentifier(\"Expense@00000000-0000-0000-0000-000000000002\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Expense CHICKEN_RICE \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withDescription(\"Chicken Rice extra Chicken\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withPrice(\"3.50\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            .withCategory(\"Food\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            .withTimestamp(\"03-12-2019 noon\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            .withBudgetName(\"Default Budget\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "czkay"
        },
        "content": "            .withUniqueIdentifier(\"Expense@00000000-0000-0000-0000-000000000003\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Expense DRINKS \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withDescription(\"Whiskey and Coke\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withPrice(\"50\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            .withCategory(\"Food\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "czkay"
        },
        "content": "            .withTimestamp(\"04-12 noon\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            .withBudgetName(\"Default Budget\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "czkay"
        },
        "content": "            .withUniqueIdentifier(\"Expense@00000000-0000-0000-0000-000000000004\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Expense ENTERTAINMENT \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withDescription(\"Marvel Movie Marathon\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withPrice(\"75\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            .withCategory(\"Entertainment\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "czkay"
        },
        "content": "            .withTimestamp(\"05-12 noon\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            .withBudgetName(\"Default Budget\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "czkay"
        },
        "content": "            .withUniqueIdentifier(\"Expense@00000000-0000-0000-0000-000000000005\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Expense FASHION \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withDescription(\"Clothes for the New Year\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withPrice(\"88.88\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            .withCategory(\"Shopping\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "czkay"
        },
        "content": "            .withTimestamp(\"06-12 noon\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            .withBudgetName(\"Default Budget\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "czkay"
        },
        "content": "            .withUniqueIdentifier(\"Expense@00000000-0000-0000-0000-000000000006\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Expense GROCERIES \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withDescription(\"Groceries for September meal preps\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withPrice(\"125.35\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            .withCategory(\"Utilities\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "czkay"
        },
        "content": "            .withTimestamp(\"07-12 noon\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            .withBudgetName(\"Default Budget\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "czkay"
        },
        "content": "            .withUniqueIdentifier(\"Expense@00000000-0000-0000-0000-000000000007\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Expense HALLOWEEN \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withDescription(\"HalloweenHorrorNight\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withPrice(\"60\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            .withCategory(\"Entertainment\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withUniqueIdentifier(\"Expense@00000000-0000-0000-0000-000000000008\").build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Expense INVESTMENT \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withDescription(\"Property investment\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withPrice(\"1200000\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withUniqueIdentifier(\"Expense@00000000-0000-0000-0000-000000000009\").build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // Manually added - Expense\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Expense CHICKEN \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_CHICKEN)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withPrice(VALID_PRICE_CHICKEN)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            .withCategory(VALID_CATEGORY_TRANSPORT)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withUniqueIdentifier(\"Expense@00000000-0000-0000-0000-00000000000a\").build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Expense TRANSPORT \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_TRANSPORT)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withPrice(VALID_PRICE_TRANSPORT)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            .withCategory(VALID_CATEGORY_FOOD)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            .withUniqueIdentifier(\"Expense@00000000-0000-0000-0000-00000000000b\").build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private TypicalExpenses() {} // prevents instantiation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "     * Returns an {@code MooLah} with all the typical expenses."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "    public static MooLah getTypicalMooLah() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "anqichen9856"
        },
        "content": "        MooLah ab \u003d new MooLah();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        for (Expense expense : getTypicalExpenses()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            ab.addExpense(expense);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static List\u003cExpense\u003e getTypicalExpenses() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                ANNIVERSARY, BUSAN_TRIP, CHICKEN_RICE, DRINKS, ENTERTAINMENT, FASHION, GROCERIES));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 77,
      "czkay": 12,
      "qweiping31415": 11,
      "anqichen9856": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Index INDEX_FIRST_EXPENSE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Index INDEX_SECOND_EXPENSE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    public static final Index INDEX_THIRD_EXPENSE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/panel/PanelNameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.ui.panel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static seedu.address.ui.panel.PanelName.isValidPanelName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "class PanelNameTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void testEquals_alphanumericName_equal() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        PanelName panel2 \u003d new PanelName(\"panel2\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        PanelName panel1 \u003d new PanelName(\"abcd123\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        PanelName panel3 \u003d new PanelName(\"Panel3\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        PanelName panel2Copy \u003d new PanelName(\"panel2\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        PanelName panel1Copy \u003d new PanelName(\"abcd123\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        PanelName panel3Copy \u003d new PanelName(\"Panel3\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(panel1, panel1Copy);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(panel2, panel2Copy);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(panel3, panel3Copy);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void testEquals_nameWithLeadingAndTrailingWhiteSpace_equal() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        PanelName panel2 \u003d new PanelName(\"panel2\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        PanelName panel1 \u003d new PanelName(\"panel1\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        PanelName panel3 \u003d new PanelName(\"panel3\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        PanelName panel2WithWhiteSpace \u003d new PanelName(\" panel2  \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        PanelName panel1WithWhiteSpace \u003d new PanelName(\"\\n panel1 \\t\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        PanelName panel3WithWhiteSpace \u003d new PanelName(\" panel3  \\n \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(panel1, panel1WithWhiteSpace);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(panel2, panel2WithWhiteSpace);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertEquals(panel3, panel3WithWhiteSpace);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void testEquals_differentName_notEqual() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        PanelName panel2 \u003d new PanelName(\"panel2\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        PanelName panel1 \u003d new PanelName(\"panel1\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        PanelName panel3 \u003d new PanelName(\"panel3\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        PanelName panel2WithWhiteSpace \u003d new PanelName(\" panel2  \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        PanelName panel1WithWhiteSpace \u003d new PanelName(\"\\n panel1 \\t\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        PanelName panel3WithWhiteSpace \u003d new PanelName(\" panel3  \\n \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertNotEquals(panel1, panel2WithWhiteSpace);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertNotEquals(panel2, panel3WithWhiteSpace);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertNotEquals(panel3, panel1WithWhiteSpace);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void isValidPanelName_valid_true() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(isValidPanelName(\"nam3W1thAlph4num3r1cCharacters\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(isValidPanelName(\"name with spaces in between\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(isValidPanelName(\"12313\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void isValidPanelName_invalid_false() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(isValidPanelName(\"n/\\\\mW1th$pe\u003c!@|(¢$ctªrs\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(isValidPanelName(\" name with leading spaces \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(isValidPanelName(\"       \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(isValidPanelName(\"\\n\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(isValidPanelName(\"\\t\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/panel/SinglePanelViewTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "package seedu.address.ui.panel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "briyanii"
        },
        "content": "import seedu.address.ui.panel.exceptions.UnmappedPanelException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "briyanii"
        },
        "content": "class SinglePanelViewTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private PanelManager panelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private PanelName page1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private PanelName page2;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private PanelName page3;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Panel panel1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Panel panel2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private Panel panel3;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void setUpFreshPanelManager() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        panelManager \u003d new SinglePanelView();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        page1 \u003d new PanelName(\"page1\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        page2 \u003d new PanelName(\"page2\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        page3 \u003d new PanelName(\"page3\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        panel1 \u003d new PanelStub();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        panel2 \u003d new PanelStub();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        panel3 \u003d new PanelStub();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // ---------- Testing SinglePanelView as a PanelManager ------------------------"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void setPanel_validArguments_returnTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(panelManager.setPanel(page1, panel1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(panelManager.setPanel(page2, panel2));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(panelManager.setPanel(page3, panel3));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void setPanel_nullArgument_throwException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e panelManager.setPanel(null, null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e panelManager.setPanel(page1, null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e panelManager.setPanel(null, panel1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void hasPanel_beforeSettingPanel_returnFalse() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(panelManager.hasPanel(page1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(panelManager.hasPanel(page2));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertFalse(panelManager.hasPanel(page3));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void hasPanel_afterSettingPanel_returnTrue() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        if (!panelManager.setPanel(page1, panel1)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                || !panelManager.setPanel(page2, panel2)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "briyanii"
        },
        "content": "                || !panelManager.setPanel(page3, panel3)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(panelManager.hasPanel(page1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(panelManager.hasPanel(page2));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertTrue(panelManager.hasPanel(page3));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void getPanel() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            panelManager.setPanel(page1, panel1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            panelManager.setPanel(page2, panel2);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            assertEquals(panel1, panelManager.getPanel(page1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            assertEquals(panel2, panelManager.getPanel(page2));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // overwrite"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            panelManager.setPanel(page2, panel3);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            assertEquals(panel3, panelManager.getPanel(page2));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            assertNotEquals(panel2, panelManager.getPanel(page2));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } catch (UnmappedPanelException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void removePanel_panelManagerHasMappedPanelName_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            panelManager.setPanel(page1, panel1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            panelManager.setPanel(page2, panel2);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            // panelname mapped to panel success"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            assertEquals(panel1, panelManager.removePanel(page1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            assertEquals(panel2, panelManager.removePanel(page2));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } catch (UnmappedPanelException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void removePanel_panelManagerNeverHadPanel_throwsException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(UnmappedPanelException.class, () -\u003e System.out.println(panelManager.removePanel(page1)));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(UnmappedPanelException.class, () -\u003e panelManager.removePanel(page2));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void removePanel_panelWasRemovedAlready_throwsException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            panelManager.setPanel(page1, panel1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            panelManager.setPanel(page2, panel2);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            panelManager.removePanel(page1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            panelManager.removePanel(page2);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            assertThrows(UnmappedPanelException.class, () -\u003e panelManager.removePanel(page1));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            assertThrows(UnmappedPanelException.class, () -\u003e panelManager.removePanel(page2));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } catch (UnmappedPanelException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            fail(\"Should not throw exception until when trying to remove a Panel which exists\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    // ---------- Testing non-PanelManager methods ------------"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void viewPanel_hasPanelAndMultiplePanelsExist_onlyCalledPanelVisibleAtATime() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            panelManager.setPanel(page1, panel1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            panelManager.setPanel(page2, panel2);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            panelManager.setPanel(page3, panel3);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            SinglePanelView singlePanelView \u003d (SinglePanelView) panelManager;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            PanelStub panelStub1 \u003d (PanelStub) panel1;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            PanelStub panelStub2 \u003d (PanelStub) panel2;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            PanelStub panelStub3 \u003d (PanelStub) panel3;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            singlePanelView.viewPanel(page1);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            assertTrue(panelStub1.isVisible() \u0026\u0026 !panelStub2.isVisible() \u0026\u0026 !panelStub3.isVisible());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            singlePanelView.viewPanel(page2);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            assertTrue(!panelStub1.isVisible() \u0026\u0026 panelStub2.isVisible() \u0026\u0026 !panelStub3.isVisible());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            singlePanelView.viewPanel(page3);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            assertTrue(!panelStub1.isVisible() \u0026\u0026 !panelStub2.isVisible() \u0026\u0026 panelStub3.isVisible());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        } catch (UnmappedPanelException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void viewPanel_noPanels_throwsException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(UnmappedPanelException.class, () -\u003e ((SinglePanelView) panelManager).viewPanel(page1));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    void viewPanel_multiplePanelNotAssignedToName_throwsException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        panelManager.setPanel(page1, panel1);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        panelManager.setPanel(page2, panel2);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        assertThrows(UnmappedPanelException.class, () -\u003e ((SinglePanelView) panelManager).viewPanel(page3));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     * Panel Stub to allow testing of SinglePanelView without UI."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "briyanii"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    private static class PanelStub extends Panel {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        // uses UiPartTest\u0027s valid fxml."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        private Region r;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        private boolean visible;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public PanelStub() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            super(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            r \u003d new Region();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public boolean isVisible() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return visible;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public Region getRoot() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            return r;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public void view() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            visible \u003d true;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "briyanii"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        public void hide() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "briyanii"
        },
        "content": "            visible \u003d false;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "briyanii"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "briyanii"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "briyanii"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "briyanii": 192
    }
  },
  {
    "path": "test.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "briyanii"
        },
        "content": "test file"
      }
    ],
    "authorContributionMap": {
      "briyanii": 1
    }
  }
]
