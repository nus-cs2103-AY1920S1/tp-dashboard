[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d MYMorise - Manage Your Money"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103-T14-4/main[image:https://travis-ci.org/AY1920S1-CS2103-T14-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "https://ci.appveyor.com/project/Cary-Xx/main/branch/master[image:https://ci.appveyor.com/api/projects/status/lg8ga460l5xgq9ab/branch/master?svg\u003dtrue[Build Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103-T14-4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103-T14-4/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* This is a personal expense manager application called MYMorise - Manage Your Money."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* It is a Java sample application intended for students and young adults to manage their personal daily expenses."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "## Target Users"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Our target users are students and young adults."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "This group of people are usually too busy to remember every single expense in their daily life which makes it difficult for them to keep track of their spending."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "MYMorise hopes to resolve this issue by being their expense manager and helping them to keep their spendings in check."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "## Why use MYMorise?"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Have you experienced moments where your money seem to always be gone, then you remembered that you\u0027ve used it on something but you just can\u0027t recall exactly where/what you have spent your money on?"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Or maybe you just want a platform to record your spendings so that you can better manage them the next time?"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "If that\u0027s the case, then MYMorise is the perfect application for you!"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "With MYMorise, you won\u0027t have to worry about forgetting where your money went because MYMorise will MEMorise your spendings for you in this neat little application!"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "With just a few lines away, you can easily record your daily expenses and view them beautifully graphed into charts that will allow you to easily pinpoint categories/items that you have been overspending on."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Let your mind rest and focus on the more important things in life, allow MYMorise to memorise your spendings for you starting today!"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* The original source of this sample application was created by SE-EDU at https://se-education.org"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 12,
      "choonx99": 13,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    compile group: \u0027org.apache.commons\u0027, name: \u0027commons-lang3\u0027, version: \u00273.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    archiveName \u003d \u0027MYMorise.jar\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 3,
      "-": 154
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "MYMorise was developed by the https://github.com/orgs/AY1920S1-CS2103-T14-4/ team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d Muhammad Aljunied"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "image::muhammadaljunied.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "{empty}[http://github.com/m133225[github]] [\u003c\u003cmuhammadaljunied#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Role: Team Lead, Developer +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Responsibilities: Documentation Quality, Scheduling and tracking, IntelliJ Expert"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Components:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d Ng Choon Wah"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "image::choonx99.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "{empty}[https://github.com/choonx99[github]] [\u003c\u003cchoonx99#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Responsibilities: Deliverables/Deadlines."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Components:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d Lim Xuan Hui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "image::limxuanhui.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "{empty}[http://github.com/limxuanhui[github]] [\u003c\u003climxuanhui#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Responsibilities: Testing"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Components:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d\u003d\u003d Ziheng Xiu"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "image::cary-xx.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "{empty}[http://github.com/Cary-Xx[github]] [\u003c\u003ccary-xx#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Responsibilities: Code Quality, Integration, Git Expert"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Components:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 2,
      "muhammadaljunied": 23,
      "-": 30
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103-T14-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* *Email us* : You can also reach us at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    Ng Choon Wah      : e0310972@u.nus.edu"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    Xiu Ziheng        : e0140856@u.nus.edu"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    Muhammad Aljunied : muhammadaljunied@u.nus.edu"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    Joseph Lim        : limxuanhui@u.nus.edu"
      }
    ],
    "authorContributionMap": {
      "choonx99": 6,
      "muhammadaljunied": 1,
      "-": 5
    }
  },
  {
    "path": "docs/DevOps.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d MYMorise - Dev Ops"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-T14-4/main/blob/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "//TODO:Update DevOps"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "A project often depends on third-party libraries. For example, MYMorise depends on the https://github"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ".com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 5,
      "-": 45
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d MYMorise - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-T14-4/main/blob/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "By: `Team T14-4`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* has a need to manage expenses,"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* requires categorization of expenses,"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* prefer desktop apps,"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* prefers CLI type interfaces."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Value proposition*:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* manage expenses faster than a typical mouse/GUI driven app."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* easily view metrics of spending."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* easily identify spending behaviour and tweak to meet budgeting goals."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[width\u003d\"80%\",cols\u003d\"1%,\u003c25%,\u003c25%,\u003c40%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "4.+| *Basic Functionality*"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "|`* * *` |user |create a plain old expense |"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "|`* * *` |user |create an expense with a tag |"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "|`* * *` |user |create a recurring expense |"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "|`* * *` |user |retrieve all expenses |review all my spending"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "|`* * *` |user |retrieve all expenses for today |review my spending for the day"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "|`* * *` |user |retrieve list of all recurring expenses |"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "|`* *` |user |retrieve all expenses for the week |review my spending for the week"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "|`* *` |user |retrieve all expenses for the month |review my spending for the month"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "|`* *` |user |retrieve all expenses for the year |review my spending for the year"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "|`* * *` |user |find an expense name |locate a specific expense without having to go through the entire list"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "|`* * *` |user |edit an expense |change the expense amount, date or tag"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "|`* * *` |user |delete an expense |"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "|`* * *` |user |terminate a recurring expense |"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "4.+| *Budgeting*"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "|`* * *` |user |set a budget for the month |"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "|`* * *` |user |check how much of my budget is left |know how much I can spend"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "|`* * *` |user |notified every time I add an expense if I have less than 50% of my budget left  |know how much I can spend"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "4.+| *UI*"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "|`* * *` |user |view in a pie chart expenditure breakdown by tag  |"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "|`* * *` |user |view in a pie chart how much of my budget is spent/available for the current month | manage my spending"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "|`* *` |user |view in a bar chart my expenditure | visualise my spending habits"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "4.+| *Inputs*"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "|`*` |user | command autocomplete suggestions| improve my productivity"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "|`* *` |user | recall commands previously used in session | improve my productivity"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "4.+| *Multi-Currency*"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "|`* *` |user | set my default currency for tracking |"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "|`* *` |user | store expenses in a specific currency | track expenses when I travel"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "|`* *` |user | automatically convert the expense to my local currency | track expenses in one currency"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "_{More may be added}_"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Note: For all use cases below, the *System* is `MYMorise(MYM)`, the *Actor* is the `user` and the *Precondition* is"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "`MyMorise is running`, unless specified otherwise)."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Inputs specified in a square bracket i.e [input] are optional inputs from the user."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[#_UC01]"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d UC01 - Get Help +"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* The list of all commands will be shown."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User requests for help."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ". MYM responds with the list of all commands."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//[none]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//*Extensions*"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//[none]"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//* 1a. AltScene1"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//+"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//Use case ends."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//* 2a. AltScene2"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//+"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//Use case ends."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//* 3a. AltScene3"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//+"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//[none]"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//** 3a1. A"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//+"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//Use case resumes at step 2."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//_{More may be added}_"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[#_UC02]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d UC02 - Create an expense +"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* A new expense will be added into MYM if valid data were specified."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User requests to add an expense specifying data."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ". MYM creates and stores the expense with the specified data."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* 1a. MYM detects an error in entered data."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "** 1a1. MYM informs the user what data was invalid."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[#_UC03]"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d UC03 - Create a recurring expense +"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* A new recurring expense with will be added into MYM if valid data were specified."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* A single expense with will be added into MYM if valid data were specified."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User requests to add a recurring expense specifying data."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ". MYM creates and stores the expense with the specified data ."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* 1a. MYM detects an error in entered data."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "** 1a1. MYM informs the user what data was invalid."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[#_UC04]"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d UC04 - Retrieve all expenses +"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Preconditions: MYMorise is running, there is at least 1 expense stored."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* A list of all expenses is shown."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User requests to see all expenses."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ". MYM shows all expenses."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* 1a. User requests to see all expenses made today."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "** 1a1. MYM shows a list of all expenses made today."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* 1b. User requests to see all expenses made for the current week."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "** 1b1. MYM shows a list of all expenses made for the current week."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* 1c. User requests to see all expenses made for the current month."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "** 1c1. MYM shows a list of all expenses made for the current month."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* 1d. User requests to see all expenses made for the specified date range."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "** 1d1. MYM shows a list of all expenses made for the the specified date range."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[#_UC05]"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d UC05 - Retrieve all recurring expenses +"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Preconditions: MYMorise is running, there is at least 1 recurring expense stored. +"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* A list of all recurring expenses is shown."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User requests to see for all recurring expenses."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ". MYM shows a list of all expenses made for the day."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[#_UC06]"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d UC06 - Find an expense +"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Preconditions: MYMorise is running, there is at least 1 recurring expense stored. +"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* A list of all expenses containing the specified keyword if any were found"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User requests for all expenses containing a keyword."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ". MYM shows a list of all expenses containing the keyword."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* 1a. No expenses contain the keyword specified."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "** 1a1. MYM informs user that no matching expenses were found."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[#_UC07]"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d UC07 - Update an expense +"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Preconditions: MYMorise is running, there is at least 1 expense stored. +"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* The expense selected for editing will be updated with the new data."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User  \u003c\u003c_UC04, requests to see all expenses (UC04).\u003e\u003e"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User reviews the list of expenses."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User requests to update an expense from the list and provides the new data."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ". MYM updates the selected expense with the new data."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* 2a. User decides not to edit the expense."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* 2b. User could not locate the expense to be edited."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* 3a. MYM detects an error in entered data."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "** 3a1. MYM informs the user what data was invalid."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[#_UC08]"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d UC08 - Delete an expense +"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Preconditions: MYMorise is running, there is at least 1 expense stored. +"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* The expense specified for deletion will be deleted."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User \u003c\u003c_UC04, requests to see all expenses (UC04).\u003e\u003e"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User reviews the list of expenses."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User requests to delete the expense with a specific index from the list."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ". MYM deletes the expense with the specified index."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* 2a. User decides not to delete the expense."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* 2b. User could not locate the expense to be deleted."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* 3a. MYM detects an error in entered data."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "** 3a1. MYM informs the user what data was invalid."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[#_UC09]"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d UC09 - Delete a recurring expense +"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Preconditions: MYMorise is running, there is at least 1 recurring expense stored. +"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* The recurring expense specified for deletion will be deleted."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User \u003c\u003c_UC05, requests to see all recurring expenses (UC05)\u003e\u003e"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User reviews the list of recurring expenses."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User requests to delete the recurring expense with a specific index from the list."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ". MYM deletes the expense with the specified index."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* 2a. User decides not to delete the recurring expense."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* 3a. MYM detects an error in entered data."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "** 3a1. MYM informs the user what data was invalid."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[#_UC10]"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d UC10 - Set a budget for the current month +"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* The budget will be set to the specified amount."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User requests to set the budget, specifying the amount for the month."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ". MYM sets the budget of the month."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* 1a. An existing budget has already been set."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "** 1a1. MYM sets the budget for the month to the newly specified amount."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[#_UC11]"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d UC11 - Visualize funds left for current month +"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Preconditions: MYMorise is running, \u003c\u003c_UC11,A budget should have been set (UC10)\u003e\u003e +"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Visualization of funds left for current month will be updated."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User \u003c\u003c_UC02, creates an expense (UC02)\u003e\u003e *OR* User \u003c\u003c_UC07, updates an expense (UC07)\u003e\u003e *OR* User \u003c\u003c_UC08, deletes an expense (UC08)\u003e\u003e"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ". MYM updates the visualization of funds left for the month."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[#_UC12]"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d UC12 - Notify when funds are \u003c 50% +"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Preconditions: MYMorise is running, \u003c\u003c_UC11,A budget should have been set (UC10)\u003e\u003e +"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* The user is notified that funds are low, if resulting budget balance is \u003c 50%."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User \u003c\u003c_UC02, adds an expense (UC02)\u003e\u003e"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* 1a. Resulting budget balance is \u003c 50%"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "** 1a1. MYM informs the user the new budget balance and that funds are running low."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[#_UC13]"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d UC13 - Visualize expenditure +"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Visualisation of expenditure will be shown if there is sufficient data."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User \u003c\u003c_UC04, requests for all expenses\u003e\u003e"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ". MYM updates visualization based on expenses requested in Step 1."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* 2a. There are no expenditures."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "** 2a1. MYM informs User that there is not enough data to visualise expenditure breakdown by tag."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[#_UC14]"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d UC14 - Visualize expenditure breakdown by tag +"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Breakdown by tag visualisation will be shown if there is sufficient data."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User \u003c\u003c_UC02, creates an expense (UC02)\u003e\u003e *OR* User \u003c\u003c_UC07, updates an expense (UC07)\u003e\u003e *OR* User \u003c\u003c_UC08, deletes an expense (UC08)\u003e\u003e"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ". MYM updates the breakdown of expenditure by tag visualisation."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* 2a. There are no expenditures."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "** 2a1. MYM informs User that there is not enough data to visualise expenditure breakdown by tag."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[#_UC15]"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d UC15 - Recall commands previously used in current session +"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Commands used previously can be cycled through by the user if there are previously used commands in the current session."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User request for previous command."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". Step 1 is repeated till user found the target command."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* 1a. No prior commands entered."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[#_UC16]"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d UC16 - Set default currency of expenses +"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* MYMorise will convert display amounts in the specified currency, if the specified currency is valid.."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User requests to set the default currency"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ". MYM converts all expenses into the defualt currency and updates the display."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* 1a. The specified currency is not valid."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "** 1a1. MYM informs the user that the currency specified is not valid."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[#_UC17]"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d UC17 - Create expense with specific currency +"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* A new expense with the specified currency will be added into MYM if the specified data is valid."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User requests to create an expense specifying required data."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ". MYM creates and stores the expense with the specified data."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* 1a. MYM detects an error in entered data."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "** 1a1. MYM informs the user what data was invalid."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[#_UC18]"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d UC18 - Automatically convert expenses in foreign currencies to default currency +"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Preconditions: Preconditions: MYMorise is running, at least 1 expense stored in foreign currency +"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Expense will display expense amount in both default and foreign currencies"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "but all computations will default converted amount."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User \u003c\u003c_UC17,  creates an expense with specific currency\u003e\u003e"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User \u003c\u003c_UC05, requests for all expenses\u003e\u003e"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ". MYM shows list of expenses. Expenses with foreign currencies are shown together with their default currency converted"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "amounts."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//[none]"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//[#_UC19]"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//\u003d\u003d\u003d UC19 - Description +"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//Preconditions: precond"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//Guarantees:"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//* g1"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//* g2"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//[none]"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//*MSS*"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//+"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//Use case ends."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//[none]"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//*Extensions*"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//[none]"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//* 1a. AltScene1"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//[none]"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//** 1a1. AltScene1a"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//+"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//Use case ends."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//* 2a. AltScene2"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//[none]"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//** 2a1. AltScene2a"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//+"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//Use case ends."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//* 3a. AltScene3"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//[none]"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//** 3a1. AltScene3a"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//** 3a2. AltScene3b"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//+"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//Use case resumes at step 2."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//[none]"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//[#_UC20]"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//\u003d\u003d\u003d UC20 - Description +"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//Preconditions: precond"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//Guarantees:"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//* g1"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//* g2"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//[none]"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//*MSS*"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//+"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//Use case ends."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//[none]"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//*Extensions*"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//[none]"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//* 1a. AltScene1"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//[none]"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//** 1a1. AltScene1a"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//+"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//Use case ends."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//* 2a. AltScene2"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//[none]"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//** 2a1. AltScene2a"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//+"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//Use case ends."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//* 3a. AltScene3"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//[none]"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//** 3a1. AltScene3a"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//** 3a2. AltScene3b"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//+"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//Use case resumes at step 2."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "_{More may be added}_"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ".  (Technical) Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ".  (Capacity, Performance) Should be able to hold up to 10000 expenses without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ".  (Scalability) Should be able to handle expense amounts up to 10^12^."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ".  (Process) Project should be production ready by 11th November 2019."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 49,
      "choonx99": 14,
      "muhammadaljunied": 567,
      "-": 404
    }
  },
  {
    "path": "docs/Documentation.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d MYMorise - Documentation"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-T14-4/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingPlantUml#, UsingPlantUml.adoc\u003e\u003e to find out how to create and update the UML diagrams in the developer guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Template"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 2,
      "-": 121
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d MYMorise - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-T14-4/main/blob/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.Main` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level3` repo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level3`), you should do the following:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocumentation#Docs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, AddressBook\u0027s architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 2,
      "-": 82
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d MYMorise - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 1,
      "-": 50
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d MYMorise - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "By: `Team T14-4`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "MYMorise -- Manage Your Money is a desktop application for those who *prefer tracking personal expenses on his"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "computer*."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "More importantly, MYMorise is *optimized for those"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "who prefer to work with a Command Line Interface (CLI)* while still having the benefits of a Graphical User Interface"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "(GUI). If you can type fast, PEM can get your contact management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ".  Download the latest `MYMorise.jar`."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your MYMorise."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* *`list`* : lists all expenses"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* **`add`**`add /n Textbook /a 23.50 /t education /t school` : adds an expense named `Textbook` to MYMorise with the tags `education` and `school`."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* **`delete`**`3` : deletes the 3rd expense shown in the current list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Items in square brackets are optional e.g `/a NAME [/t TAG]` can be used as `/a Bread /t Food` or as `/a Bread`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Items post-fixed with `…`​ can be used zero or more times e.g. `[/t TAG]…`​ can be excluded or include 1 or more tags `/t food /t drinks`."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Displays all CLI commands available. +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d\u003d\u003d Adding an expense: `add`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Adds an expense to track. +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Format: `add /n NAME /a AMOUNT [/t TAG]…​`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "An expense can have any number of tags (including no tags)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* `add /n Coffee /a 1.80 /t food`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* `add /n Textbook /a 23.50 /t education /t school`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d\u003d\u003d Listing all expenses : `list`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Shows a list of all expenses with optional matching criterion in MYMorise. +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d\u003d\u003d Viewing expenses in a period : `view`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "View daily or monthly expenses. +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Format: `view`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d\u003d\u003d Editing an expense : `edit`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Edits an existing expense in the expense list. +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Format: `edit INDEX [/n NAME] [/a AMOUNT] [/t TAG]…`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* Edits the expense at the specified `INDEX`. The index refers to the index number shown in the displayed expense list. The index *must be a positive integer* 1, 2, 3, …​ The index is relative to what is displayed on the GUI rather than the actual index of the expense in MYMorise."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* When editing tags, the existing tags of the expense will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* You can remove all the expense’s tags by typing `/t`  without specifying any tags after it."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* `edit 1 /a 20.10` +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Edits the amount of the 1st expense to be `$20.10`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* `edit 2 /n Poets Coffee /t` +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Replaces the name of the 2nd expense to `Poets Coffee` and clears all existing tags."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d\u003d\u003d Locating expenses by name: `find`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Finds all expenses by name, date, tag. +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Format: `find [/n NAME] [/d DATE] [/t TAG]`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Search by name and tag is case insensitive. e.g hans will match Hans"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Search by date must use the date format `yyyyMMdd`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Only the fields provided are searched."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Only whole words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* find Coffee +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Returns `coffee` and `Starbucks Coffee`."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* find Cheesecake +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Returns any expense having names `Cheesecake`, eg: `Strawberry Cheesecake`, `Blueberry Cheesecake`."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d\u003d\u003d Deleting an expense : `delete`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Deletes the specified expense from MYMorise. +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Deletes the expense at the specified INDEX."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* The index refers to the index number shown in the displayed expense list."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, …​"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " The index is relative to what is displayed on the GUI rather than the actual index of the stored expenses."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Deletes the 2nd expense in MYMorise."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* `find Coffee` +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Deletes the 1st expense in the results of the find command."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "// tag::saving[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Expense data are saved in the hard disk automatically after any command that changes the data."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "// end::saving[]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "choonx99"
        },
        "content": "// tag::budget[]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d\u003d\u003d Set a budget for a period : `budget`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Specifies a budget for a specific period. +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Format: `budget /d PERIOD /a AMOUNT`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "choonx99"
        },
        "content": "****"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* Sets a budget for the specified PERIOD. All expenses made in the month will deduct its amount from the budget to indicate how much funds are available to spend"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* The Period refers to a specific date, month or period between two dates."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* The Amount refers to amount set for specified period."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "choonx99"
        },
        "content": "****"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* `budget /d 9-10-19 /a SGD400` +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Sets a budget of SGD400 for Wed, 9th Oct 19."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* `budget /d Jan-19 /a SGD200` +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Sets a budget of SGD200 for the month of January 19."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* `budget /d 14-10-19 - 13-11-19 /a SGD500` +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Sets a budget of SGD500 for the period from Mon, 14th Oct 19 to Wed, 13th Nov 19."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "choonx99"
        },
        "content": "// end::budget[]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d Display expense by tag in chart `[coming in v2.0]`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "{Displays the expense in a pie chart to show breakdown of expenses.}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d Set a Recurring Expense `[coming in v2.0]`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "{Sets a recurring expense for a specific duration and frequency.}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d Convert expenses to a specific currency `[coming in v2.0]`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "{Shows the current list of expenses in a certain currency}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d Undo/Redo commands `[coming in v2.0]`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "{Allows user to undo and redo commands.}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d\u003d\u003d Autocomplete `[coming in v2.0]`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "{Enables user to quickly fill in command arguments with an autocomplete suggestion by pressing tab on the selected suggestion.}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d Show command history `[coming in v2.0]`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "{User is able to navigate using up and down keys to cycle through past commands typed during the session.}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d\u003d\u003d FAQ"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "choonx99"
        },
        "content": "*A*: Run the app in the other computer and overwrite the empty data file it creates with the file that contains the data from your MYMorise/data folder."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* *Add* `add /n NAME /a AMOUNT [/t TAG]…` +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "e.g. `add /n Coffee /a 2.00 /t nourishment /t school`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* *View* : `view`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* *Edit* : `edit INDEX [/n NAME] [/a AMOUNT] [/t TAG]…​` +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "e.g. `edit 2 /n Starbucks Coffee /t nourishment`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* *Find* : `find [/n NAME] [/d DATE] [/t TAG]` +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "e.g. `find /n Coffee /d 20190412 /t nourishment` +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "e.g. `find /t nourishment`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 25,
      "choonx99": 32,
      "muhammadaljunied": 58,
      "-": 107
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deletePerson(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveExpenseList(expenseList)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 1,
      "-": 36
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "ExpenseList *-right-\u003e \"1\" UniqueExpenseList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "ExpenseList *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "UniqueTagList -[hidden]down- UniqueExpenseList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "UniqueTagList -[hidden]down- UniqueExpenseList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "UniqueExpenseList o-right-\u003e Expense"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Expense o-up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Expense *--\u003e Name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Expense *--\u003e Amount"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Expense *--\u003e Date"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 9,
      "-": 11
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser --\u003e AddressBookParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "DeleteCommand -\u003e Model : deleteExpense(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 1,
      "-": 68
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Class MymParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "LogicManager --\u003e\"1\" MymParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "MymParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 3,
      "-": 59
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Interface ReadOnlyExpenseList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Class ExpenseList"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Class ReadOnlyExpenseList"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Package Expense {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Class Expense"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Class Amount"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Class Date"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Class UniqueExpenseList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "ExpenseList .up.|\u003e ReadOnlyExpenseList"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "ModelManager o--\u003e \"1\" ExpenseList"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "ExpenseList *--\u003e \"1\" UniqueExpenseList"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "UniqueExpenseList o--\u003e \"*\" Expense"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Expense *--\u003e Name"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Expense *--\u003e Amount"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Expense *--\u003e Date"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Expense *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Name -[hidden]right-\u003e Amount"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Amount -[hidden]right-\u003e Date"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "ModelManager --\u003e\"1\" Expense : filtered list"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 19,
      "-": 34
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Interface ExpenseListStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Class JsonExpenseListStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "StorageManager o--\u003e ExpenseListStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "JsonExpenseListStorage .left.|\u003e ExpenseListStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "JsonExpenseListStorage .down.\u003e JsonSerializableExpenseList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "JsonSerializableExpenseList .right.\u003e JsonAdaptedExpense"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "JsonAdaptedExpense .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 7,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Class ExpenseListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Class ExpenseCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "MainWindow *-down-\u003e ExpenseListPanel"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "ExpenseListPanel -down-\u003e ExpenseCard"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "ExpenseListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "ExpenseCard --|\u003e UiPart"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "ExpenseCard ..\u003e Model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "ExpenseListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 8,
      "-": 52
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState0.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title Initial state"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class State1 as \"__mym1:ExpenseList__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class State2 as \"__mym2:ExpenseList__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class State3 as \"__mym3:ExpenseList__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "hide State2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState1.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"delete 5\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class State1 as \"__mym1:ExpenseList__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class State2 as \"__mym2:ExpenseList__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class State3 as \"__mym3:ExpenseList__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 3,
      "-": 19
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState2.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "title After command \"add /n Coffee\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class State1 as \"__mym1:ExpenseList__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class State2 as \"__mym2:ExpenseList__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class State3 as \"__mym3:ExpenseList__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 4,
      "-": 16
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState3.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"undo\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class State1 as \"__mym1:ExpenseList__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class State2 as \"__mym2:ExpenseList__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class State3 as \"__mym3:ExpenseList__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState4.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"list\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class State1 as \"__mym1:ExpenseList__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class State2 as \"__mym2:ExpenseList__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class State3 as \"__mym3:ExpenseList__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState5.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"clear\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class State1 as \"__mym1:ExpenseList__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class State2 as \"__mym2:ExpenseList__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class State3 as \"__mym3:ExpenseList__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "note right on link: State mym2 deleted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 4,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "participant \":VersionedExpenseList\" as VersionedExpenseList MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(undo)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(undo)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e AddressBookParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e UndoCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "UndoCommand -\u003e Model : undoExpenseList()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Model -\u003e VersionedExpenseList : undo()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "activate VersionedExpenseList"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "VersionedExpenseList -\u003e VersionedExpenseList :resetData(ReadOnlyExpenseList)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "VersionedExpenseList --\u003e Model :"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "deactivate VersionedExpenseList"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e UndoCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 7,
      "-": 46
    }
  },
  {
    "path": "docs/team/cary-xx.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d PROJECT: MyMorise"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "include::overview.adoc[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 2,
      "-": 70
    }
  },
  {
    "path": "docs/team/choonx99.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d PROJECT: MyMorise"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "include::overview.adoc[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 2,
      "-": 70
    }
  },
  {
    "path": "docs/team/limxuanhui.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d PROJECT: MyMorise"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "include::overview.adoc[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 2,
      "-": 70
    }
  },
  {
    "path": "docs/team/muhammadaljunied.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d PROJECT: MyMorise"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "include::overview.adoc[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 2,
      "-": 70
    }
  },
  {
    "path": "docs/team/overview.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "MyMorise is a desktop expense tracking application."
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "The user interacts with it using primarily with a CLI, and is supported with a GUI created with JavaFX."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "It is written in Java, and has about XX kLoC."
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ExpenseList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.storage.ExpenseListStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.storage.JsonExpenseListStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing MYMorise ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        ExpenseListStorage expenseListStorage \u003d new JsonExpenseListStorage(userPrefs.getExpenseListFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        storage \u003d new StorageManager(expenseListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s expense list and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * The data from the sample expense list will be used instead if {@code storage}\u0027s expense list is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * or an empty expense list will be used instead if errors occur when reading {@code storage}\u0027s expense list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Optional\u003cReadOnlyExpenseList\u003e expenseListOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        ReadOnlyExpenseList initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            expenseListOptional \u003d storage.readExpenseList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            if (!expenseListOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample ExpenseList\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            initialData \u003d expenseListOptional.orElseGet(SampleDataUtil::getSampleExpenseList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty ExpenseList\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            initialData \u003d new ExpenseList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ExpenseList\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            initialData \u003d new ExpenseList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ExpenseList\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        logger.info(\"Starting ExpenseList \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping MYMorise ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 16,
      "choonx99": 7,
      "-": 160
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 2,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX \u003d \"The expense index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MESSAGE_EXPENSES_LISTED_OVERVIEW \u003d \"%1$d expenses listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MESSAGE_EXPENSE_LISTED_OVERVIEW \u003d \"%1$d expense listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 3,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 1,
      "-": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause   of the main exception"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 1,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 3,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 2,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath                   cannot be null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e      The generic type to create an instance of"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 4,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 2,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns the ExpenseList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @see Model#getExpenseList()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ReadOnlyExpenseList getExpenseList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of expenses"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ObservableList\u003cExpense\u003e getFilteredExpenseList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns the user prefs\u0027 expense list file path."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    Path getExpenseListFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 14,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.logic.parser.MymParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final MymParser mymParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        mymParser \u003d new MymParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Command command \u003d mymParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            storage.saveExpenseList(model.getExpenseList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ReadOnlyExpenseList getExpenseList() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return model.getExpenseList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Path getExpenseListFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return model.getExpenseListFilePath();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 14,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CURRENCY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Adds an expense to the expense list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an expense to the expense list. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            + \"[\" + PREFIX_CURRENCY + \"CURRENCY] \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            + PREFIX_NAME + \"Textbook \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            + PREFIX_AMOUNT + \"$23.50 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            + PREFIX_CURRENCY + \"USD \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            + PREFIX_DATE + \"1245 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            + PREFIX_TAG + \"education \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            + PREFIX_TAG + \"school\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New expense added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXPENSE \u003d \"This expense already exists in the expense list\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final Expense toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Expense}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public AddCommand(Expense expense) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        toAdd \u003d expense;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (model.hasExpense(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        model.addExpense(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 22,
      "muhammadaljunied": 3,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ExpenseList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Expense list has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        model.setExpenseList(new ExpenseList());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 6,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Deletes an expense identified using it\u0027s displayed index from the expense list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        + \": Deletes the expense identified by the index number used in the displayed expense list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MESSAGE_DELETE_EXPENSE_SUCCESS \u003d \"Deleted Expense: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Expense expenseToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        model.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EXPENSE_SUCCESS, expenseToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 9,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CURRENCY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.expense.Currency;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Edits the details of an existing expense in the expense list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the expense identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        + \"by the index number used in the displayed expense list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        + \"[\" + PREFIX_AMOUNT + \"AMOUNT] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        + \"[\" + PREFIX_CURRENCY + \"CURRENCY] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        + PREFIX_AMOUNT + \"$23.50 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        + PREFIX_DATE + \"1245\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MESSAGE_EDIT_EXPENSE_SUCCESS \u003d \"Edited Expense: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXPENSE \u003d \"This expense already exists in the expense list.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final EditExpenseDescriptor editExpenseDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @param index                of the expense in the filtered expense list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @param editExpenseDescriptor details to edit the expense with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public EditCommand(Index index, EditExpenseDescriptor editExpenseDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(editExpenseDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.editExpenseDescriptor \u003d new EditExpenseDescriptor(editExpenseDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Expense expenseToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Expense editedExpense \u003d createEditedExpense(expenseToEdit, editExpenseDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (!expenseToEdit.isSameExpense(editedExpense) \u0026\u0026 model.hasExpense(editedExpense)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        model.setExpense(expenseToEdit, editedExpense);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        model.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Creates and returns a {@code Expense} with the details of {@code expenseToEdit}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * edited with {@code editExpenseDescriptor}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static Expense createEditedExpense(Expense expenseToEdit, EditExpenseDescriptor editExpenseDescriptor) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assert expenseToEdit !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Name updatedName \u003d editExpenseDescriptor.getName().orElse(expenseToEdit.getName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Amount updatedAmount \u003d editExpenseDescriptor.getAmount().orElse(expenseToEdit.getAmount());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Currency updatedCurrency \u003d editExpenseDescriptor.getCurrency().orElse(expenseToEdit.getCurrency());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Date updatedDate \u003d editExpenseDescriptor.getDate().orElse(expenseToEdit.getDate());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editExpenseDescriptor.getTags().orElse(expenseToEdit.getTags());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return new Expense(updatedName, updatedAmount, updatedCurrency, updatedDate, updatedTags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u0026\u0026 editExpenseDescriptor.equals(e.editExpenseDescriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Stores the details to edit the expense with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * corresponding field value of the expense."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static class EditExpenseDescriptor {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        private Amount amount;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        private Currency currency;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        public EditExpenseDescriptor() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        public EditExpenseDescriptor(EditExpenseDescriptor toCopy) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            setCurrency(toCopy.currency);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, amount, currency, date, tags);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        public void setCurrency(Currency currency) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            this.currency \u003d currency;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        public Optional\u003cCurrency\u003e getCurrency() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            return Optional.ofNullable(currency);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        public void setDate(Date date) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            if (!(other instanceof EditExpenseDescriptor)) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            EditExpenseDescriptor e \u003d (EditExpenseDescriptor) other;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                \u0026\u0026 getAmount().equals(e.getAmount())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                \u0026\u0026 getCurrency().equals(e.getCurrency())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 64,
      "muhammadaljunied": 12,
      "-": 152
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting MYMorise as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Finds and lists all expenses in expense list whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all expenses whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" coffee lunch\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        model.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        int size \u003d model.getFilteredExpenseList().size();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            String.format(size \u003c\u003d 1 ? Messages.MESSAGE_EXPENSE_LISTED_OVERVIEW"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                : Messages.MESSAGE_EXPENSES_LISTED_OVERVIEW, size));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 8,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Lists all expenses in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all expenses\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        model.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 4,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CURRENCY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.expense.Currency;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AMOUNT, PREFIX_CURRENCY, PREFIX_DATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_AMOUNT)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Currency currency \u003d ParserUtil.parseCurrency(argMultimap);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Expense expense \u003d new Expense(name, amount, currency, date, tagList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return new AddCommand(expense);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 11,
      "muhammadaljunied": 5,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final Prefix PREFIX_AMOUNT \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final Prefix PREFIX_CURRENCY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 2,
      "muhammadaljunied": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CURRENCY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AMOUNT, PREFIX_CURRENCY, PREFIX_DATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        EditExpenseDescriptor editExpenseDescriptor \u003d new EditExpenseDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            editExpenseDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            editExpenseDescriptor.setAmount(ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CURRENCY).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            editExpenseDescriptor.setCurrency(ParserUtil.parseCurrency(argMultimap));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            editExpenseDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editExpenseDescriptor::setTags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (!editExpenseDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return new EditCommand(index, editExpenseDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 15,
      "muhammadaljunied": 3,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MymParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public class MymParser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 1,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CURRENCY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Amount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.expense.Currency;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Parses a {@code String amount} into a {@code Amount}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @throws ParseException if the given {@code amount} is invalid."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static Amount parseAmount(String amount) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        String trimmedAmount \u003d amount.trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (!Amount.isValidAmount(trimmedAmount)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new ParseException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return new Amount(trimmedAmount);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Parses a {@code String currency} into a {@code Currency}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @throws ParseException if the given {@code currency} is invalid."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static Currency parseCurrency(String currency) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        requireNonNull(currency);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        String trimmedCurrency \u003d currency.trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (!Currency.isValidCurrency(trimmedCurrency)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            throw new ParseException(Currency.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return new Currency(trimmedCurrency);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Parses a {@code ArgumentMultiMap argMultiMap} into an {@code Currency}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @throws ParseException if the given {@code currency} is invalid."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static Currency parseCurrency(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Optional\u003cString\u003e currencyField \u003d argMultimap.getValue(PREFIX_CURRENCY);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        String currency;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (!currencyField.isPresent()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            currency \u003d \"SGD\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            currency \u003d currencyField.get();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return parseCurrency(currency);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Parses a {@code String date} into an {@code Date}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (!Date.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new ParseException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return new Date(trimmedDate);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Parses a {@code ArgumentMultiMap argMultiMap} into an {@code Date}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static Date parseDate(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Optional\u003cString\u003e dateField \u003d argMultimap.getValue(PREFIX_DATE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        String date;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (!dateField.isPresent()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            LocalDateTime currentDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy Hmm\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            date \u003d currentDateTime.format(formatter);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            date \u003d dateField.get();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return parseDate(date);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 35,
      "muhammadaljunied": 29,
      "-": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ExpenseList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.UniqueExpenseList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Wraps all data at the expenseList level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Duplicates are not allowed (by .isSameExpense comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public class ExpenseList implements ReadOnlyExpenseList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final UniqueExpenseList expenses;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */ {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        expenses \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ExpenseList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Creates an ExpenseList using the Expenses in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ExpenseList(ReadOnlyExpenseList toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Replaces the contents of the expense list with {@code expenses}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * {@code expenses} must not contain duplicate expenses."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void setExpenses(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.expenses.setExpenses(expenses);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Resets the existing data of this {@code ExpenseList} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void resetData(ReadOnlyExpenseList newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        setExpenses(newData.getExpenseList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //// expense-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns true if a expense with the same identity as {@code expense} exists in the expense list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return expenses.contains(expense);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Adds a expense to the expense list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * The expense must not already exist in the expense list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void addExpense(Expense p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        expenses.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Replaces the given expense {@code target} in the list with {@code editedExpense}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * {@code target} must exist in the expense list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * The expense identity of {@code editedExpense} must not be the same as another existing expense in the expense"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(editedExpense);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        expenses.setExpense(target, editedExpense);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Removes {@code key} from this {@code ExpenseList}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * {@code key} must exist in the expense list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void removeExpense(Expense key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        expenses.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return expenses.asUnmodifiableObservableList().size() + \" expenses\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ObservableList\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return expenses.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            || (other instanceof ExpenseList // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u0026\u0026 expenses.equals(((ExpenseList) other).expenses));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return expenses.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 119,
      "choonx99": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    Predicate\u003cExpense\u003e PREDICATE_SHOW_ALL_EXPENSES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns the user prefs\u0027 expense list file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    Path getExpenseListFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Sets the user prefs\u0027 expense list file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    void setExpenseListFilePath(Path expenseListFilePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Replaces expense list data with the data in {@code expenseList}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    void setExpenseList(ReadOnlyExpenseList expenseList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /** Returns the ExpenseList */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ReadOnlyExpenseList getExpenseList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns true if an expense with the same identity as {@code expense} exists in the expense list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    boolean hasExpense(Expense expense);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Deletes the given expense."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * The expense must exist in the expense list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    void deleteExpense(Expense target);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Adds the given expense."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * {@code expense} must not already exist in the expense list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    void addExpense(Expense expense);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Replaces the given expense {@code target} with {@code editedExpense}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * {@code target} must exist in the expense list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * The expense identity of {@code editedExpense} must not be the same as"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * another existing expense in the expense list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    void setExpense(Expense target, Expense editedExpense);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /** Returns an unmodifiable view of the filtered expense list */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ObservableList\u003cExpense\u003e getFilteredExpenseList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Updates the filter of the filtered expense list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 27,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Represents the in-memory model of the expense list data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final ExpenseList expenseList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final FilteredList\u003cExpense\u003e filteredExpenses;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Initializes a ModelManager with the given expenseList and userPrefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ModelManager(ReadOnlyExpenseList expenseList, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireAllNonNull(expenseList, userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        logger.fine(\"Initializing with expense list: \" + expenseList + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.expenseList \u003d new ExpenseList(expenseList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        filteredExpenses \u003d new FilteredList\u003c\u003e(this.expenseList.getExpenseList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this(new ExpenseList(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Path getExpenseListFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return userPrefs.getExpenseListFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void setExpenseListFilePath(Path expenseListFilePath) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(expenseListFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        userPrefs.setExpenseListFilePath(expenseListFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ExpenseList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void setExpenseList(ReadOnlyExpenseList expenseList) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.expenseList.resetData(expenseList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ReadOnlyExpenseList getExpenseList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return expenseList;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return expenseList.hasExpense(expense);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void deleteExpense(Expense target) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        expenseList.removeExpense(target);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        expenseList.addExpense(expense);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireAllNonNull(target, editedExpense);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        expenseList.setExpense(target, editedExpense);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Expense List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Expense} backed by the internal list of"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return filteredExpenses;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        filteredExpenses.setPredicate(predicate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return expenseList.equals(other.expenseList)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                \u0026\u0026 filteredExpenses.equals(other.filteredExpenses);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 40,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyExpenseList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Unmodifiable view of an expense list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public interface ReadOnlyExpenseList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns an unmodifiable view of the expenses list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * This list will not contain any duplicate expenses."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ObservableList\u003cExpense\u003e getExpenseList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    Path getExpenseListFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private Path expenseListFilePath \u003d Paths.get(\"data\", \"expenselist.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        setExpenseListFilePath(newUserPrefs.getExpenseListFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Path getExpenseListFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return expenseListFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void setExpenseListFilePath(Path expenseListFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(expenseListFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.expenseListFilePath \u003d expenseListFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u0026\u0026 expenseListFilePath.equals(o.expenseListFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return Objects.hash(guiSettings, expenseListFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + expenseListFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 12,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/Amount.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Represents the amount of an expense in the MYMorise."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAmount(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public class Amount {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Amount should contain numbers, 1-12 digits and it may have a \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        + \"prefix of currency sign\" + \"and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Sc}]?[\\\\d]{1,12}[.]??[\\\\d]{0,2}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Constructs an {@code Amount}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @param amount A valid amount."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Amount(String amount) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        checkArgument(isValidAmount(amount), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        value \u003d amount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns if a given string is a valid amount."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static boolean isValidAmount(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            || (other instanceof Amount // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u0026\u0026 value.equals(((Amount) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 51,
      "choonx99": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/Currency.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Represents the currency of an expense in the MYMorise."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCurrency(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class Currency {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Currency should exactly 3 Letters \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        + \"and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"([a-zA-Z]){3}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Constructs an {@code Amount}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param currency A valid amount."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Currency(String currency) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        requireNonNull(currency);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        checkArgument(isValidCurrency(currency), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        value \u003d currency.toUpperCase();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Returns if a given string is a valid currency."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static boolean isValidCurrency(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        //TODO: Extend and verify against ISO-4217 Currency Representation List"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            || (other instanceof Currency // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            \u0026\u0026 value.equals(((Currency) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/Date.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Represents the date of an expense in the MYMorise."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Date should be of the format Hmm or HHmm or dd/MM/yyyy Hmm or \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        + \"d/MM/yyyy Hmm or dd/MM/yyyy or d/MM/yyyy\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String HMM_REGEX \u003d \"\\\\d{3}\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String HHMM_REGEX \u003d \"\\\\d{4}\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String DMYYYY_REGEX \u003d \"[\\\\d]{1}[/][\\\\d]{1}[/][\\\\d]{4}\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String DMMYYYY_REGEX \u003d \"[\\\\d]{1}[/][\\\\d]{2}[/][\\\\d]{4}\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String DDMYYYY_REGEX \u003d \"[\\\\d]{2}[/][\\\\d]{1}[/][\\\\d]{4}\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String DDMMYYYY_REGEX \u003d \"[\\\\d]{2}[/][\\\\d]{2}[/][\\\\d]{4}\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String DMYYYYHMM_REGEX \u003d \"[\\\\d]{1}[/][\\\\d]{1}[/][\\\\d]{4}\\\\s[\\\\d]{3}\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String DMMYYYYHMM_REGEX \u003d \"[\\\\d]{1}[/][\\\\d]{2}[/][\\\\d]{4}\\\\s[\\\\d]{3}\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String DDMYYYYHMM_REGEX \u003d \"[\\\\d]{2}[/][\\\\d]{1}[/][\\\\d]{4}\\\\s[\\\\d]{3}\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String DDMMYYYYHMM_REGEX \u003d \"[\\\\d]{2}[/][\\\\d]{2}[/][\\\\d]{4}\\\\s[\\\\d]{3}\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String DMYYYYHHMM_REGEX \u003d \"[\\\\d]{1}[/][\\\\d]{1}[/][\\\\d]{4}\\\\s[\\\\d]{4}\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String DMMYYYYHHMM_REGEX \u003d \"[\\\\d]{1}[/][\\\\d]{2}[/][\\\\d]{4}\\\\s[\\\\d]{4}\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String DDMYYYYHHMM_REGEX \u003d \"[\\\\d]{2}[/][\\\\d]{1}[/][\\\\d]{4}\\\\s[\\\\d]{4}\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String DDMMYYYYHHMM_REGEX \u003d \"[\\\\d]{2}[/][\\\\d]{2}[/][\\\\d]{4}\\\\s[\\\\d]{4}\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public final String rawValue;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Constructs an {@code Date}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Date() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        rawValue \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        value \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Constructs an {@code Date}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        rawValue \u003d date;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        value \u003d convertDate(date);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Constructs an {@code Date}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @param rawDate     A valid rawDate."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @param ifConverted Status to determine whether to convert the date"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Date(String rawDate, boolean ifConverted) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(rawDate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        checkArgument(isValidDate(rawDate), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        rawValue \u003d rawDate;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        value \u003d ifConverted ? convertDate(rawDate) : rawDate;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns if a given string is a valid date."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return !test.equals(convertDate(test));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Transform a given string to a date"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Supported format: Hmm, HHmm, d/M/yyyy, d/MM/yyyy, dd/M/yyyy, dd/MM/yyyy,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * d/M/yyyy Hmm, d/MM/yyyy Hmm, dd/M/yyyy Hmm, dd/MM/yyyy Hmm,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * d/M/yyyy HHmm, d/MM/yyyy HHmm, dd/M/yyyy HHmm, dd/MM/yyyy HHmm,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * e.g. 1/12/2019, 1/12/2019 1845, 10/12/2019, 10/12/2019 1845, 1245"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @param date given string"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @return converted date"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static String convertDate(String date) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        DateTimeFormatter formatter;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        LocalTime newTime;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        LocalDate newDate;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        LocalDateTime newDateTime;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        String datePattern \u003d \"dd MMM yyyy\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        String dateTimePattern \u003d \"dd MMM yyyy, H:mma\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (date.matches(HMM_REGEX)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            formatter \u003d DateTimeFormatter.ofPattern(\"Hmm\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            newTime \u003d LocalTime.parse(date, formatter);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return appendDate(newTime).format(DateTimeFormatter.ofPattern(dateTimePattern));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else if (date.matches(HHMM_REGEX)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            formatter \u003d DateTimeFormatter.ofPattern(\"Hmm\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            newTime \u003d LocalTime.parse(date, formatter);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return appendDate(newTime).format(DateTimeFormatter.ofPattern(dateTimePattern));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else if (date.matches(DMYYYY_REGEX)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            newDate \u003d LocalDate.parse(date, formatter);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return newDate.format(DateTimeFormatter.ofPattern(datePattern));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else if (date.matches(DMMYYYY_REGEX)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            newDate \u003d LocalDate.parse(date, formatter);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return newDate.format(DateTimeFormatter.ofPattern(datePattern));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else if (date.matches(DDMYYYY_REGEX)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            formatter \u003d DateTimeFormatter.ofPattern(\"dd/M/yyyy\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            newDate \u003d LocalDate.parse(date, formatter);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return newDate.format(DateTimeFormatter.ofPattern(datePattern));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else if (date.matches(DDMMYYYY_REGEX)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            newDate \u003d LocalDate.parse(date, formatter);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return newDate.format(DateTimeFormatter.ofPattern(datePattern));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else if (date.matches(DMYYYYHMM_REGEX)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy Hmm\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            newDateTime \u003d LocalDateTime.parse(date, formatter);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return newDateTime.format(DateTimeFormatter.ofPattern(dateTimePattern));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else if (date.matches(DMMYYYYHMM_REGEX)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy Hmm\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            newDateTime \u003d LocalDateTime.parse(date, formatter);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return newDateTime.format(DateTimeFormatter.ofPattern(dateTimePattern));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else if (date.matches(DDMYYYYHMM_REGEX)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            formatter \u003d DateTimeFormatter.ofPattern(\"dd/M/yyyy Hmm\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            newDateTime \u003d LocalDateTime.parse(date, formatter);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return newDateTime.format(DateTimeFormatter.ofPattern(dateTimePattern));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else if (date.matches(DDMMYYYYHMM_REGEX)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy Hmm\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            newDateTime \u003d LocalDateTime.parse(date, formatter);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return newDateTime.format(DateTimeFormatter.ofPattern(dateTimePattern));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else if (date.matches(DMYYYYHHMM_REGEX)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            newDateTime \u003d LocalDateTime.parse(date, formatter);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return newDateTime.format(DateTimeFormatter.ofPattern(dateTimePattern));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else if (date.matches(DMMYYYYHHMM_REGEX)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            newDateTime \u003d LocalDateTime.parse(date, formatter);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return newDateTime.format(DateTimeFormatter.ofPattern(dateTimePattern));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else if (date.matches(DDMYYYYHHMM_REGEX)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            formatter \u003d DateTimeFormatter.ofPattern(\"dd/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            newDateTime \u003d LocalDateTime.parse(date, formatter);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return newDateTime.format(DateTimeFormatter.ofPattern(dateTimePattern));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else if (date.matches(DDMMYYYYHHMM_REGEX)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            newDateTime \u003d LocalDateTime.parse(date, formatter);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return newDateTime.format(DateTimeFormatter.ofPattern(dateTimePattern));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static LocalDateTime appendDate(LocalTime time) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        LocalDate localDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        LocalTime localTime \u003d LocalTime.of(time.getHour(), time.getMinute());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return LocalDateTime.of(localDate, localTime);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u0026\u0026 value.equals(((Date) other).value)); // state check"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 177
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/Expense.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Represents an expense in the expense list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public class Expense {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final Amount amount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private final Currency currency;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    // Data Fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Expense(Name name, Amount amount, Currency currency, Date date, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        requireAllNonNull(name, amount, currency, date, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.currency \u003d currency;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Currency getCurrency() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return currency;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns true if both expenses of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * This defines a weaker notion of equality between two expenses."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public boolean isSameExpense(Expense otherExpense) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (otherExpense \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return otherExpense !\u003d null"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u0026\u0026 otherExpense.getName().equals(getName())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u0026\u0026 otherExpense.getAmount().equals(getAmount())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u0026\u0026 otherExpense.getCurrency().equals(getCurrency())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u0026\u0026 otherExpense.getDate().equals(getDate());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns true if both expenses have the same identity and data fields."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * This defines a stronger notion of equality between two expenses."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (!(other instanceof Expense)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Expense otherExpense \u003d (Expense) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return otherExpense.getName().equals(getName())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u0026\u0026 otherExpense.getAmount().equals(getAmount())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            \u0026\u0026 otherExpense.getCurrency().equals(getCurrency())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u0026\u0026 otherExpense.getDate().equals(getDate())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u0026\u0026 otherExpense.getTags().equals(getTags());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return Objects.hash(name, amount, currency, date, tags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        builder.append(\"\\n\")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            .append(getName())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            .append(\" \")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            .append(getAmount())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .append(\" \" + getCurrency())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            .append(\"\\n\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            .append(getDate())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            .append(\"\\n\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 110,
      "muhammadaljunied": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import org.apache.commons.lang3.StringUtils;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Represents the description of an expense in the expense list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        \"Names may contain anything, and it should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * The first character of the expense must not be a whitespace,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        fullName \u003d StringUtils.capitalize(name);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 7,
      "choonx99": 1,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Tests that a {@code Expense}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cExpense\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public boolean test(Expense expense) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(expense.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/UniqueExpenseList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.exceptions.DuplicateExpenseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.exceptions.ExpenseNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * A list of expenses that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * A expense is considered unique by comparing using {@code Expense#isSameExpense(Expense)}. As such, adding and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * expenses uses Expense#isSameExpense(Expense) for equality so as to ensure that the expense being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * unique in terms of identity in the UniqueExpenseList. However, the removal of a expense uses Expense#equals"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * (Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * as to ensure that the expense with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * @see Expense#isSameExpense(Expense)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public class UniqueExpenseList implements Iterable\u003cExpense\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final ObservableList\u003cExpense\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final ObservableList\u003cExpense\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns true if the list contains an equivalent expense as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public boolean contains(Expense toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameExpense);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Adds a expense to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * The expense must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void add(Expense toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new DuplicateExpenseException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Replaces the expense {@code target} in the list with {@code editedExpense}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * The expense identity of {@code editedExpense} must not be the same as another existing expense in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireAllNonNull(target, editedExpense);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new ExpenseNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (!target.isSameExpense(editedExpense) \u0026\u0026 contains(editedExpense)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new DuplicateExpenseException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        internalList.set(index, editedExpense);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Removes the equivalent expense from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * The expense must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void remove(Expense toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new ExpenseNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void setExpenses(UniqueExpenseList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Replaces the contents of this list with {@code expenses}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * {@code expenses} must not contain duplicate expenses."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void setExpenses(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireAllNonNull(expenses);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (!expensesAreUnique(expenses)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new DuplicateExpenseException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        internalList.setAll(expenses);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ObservableList\u003cExpense\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Iterator\u003cExpense\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            || (other instanceof UniqueExpenseList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueExpenseList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns true if {@code expenses} contains only unique expenses."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private boolean expensesAreUnique(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        for (int i \u003d 0; i \u003c expenses.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            for (int j \u003d i + 1; j \u003c expenses.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                if (expenses.get(i).isSameExpense(expenses.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 139
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/exceptions/DuplicateExpenseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.model.expense.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Signals that the operation will result in duplicate Expenses"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * (Expenses are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public class DuplicateExpenseException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public DuplicateExpenseException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        super(\"Operation would result in duplicate expenses\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/exceptions/ExpenseNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.model.expense.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Signals that the operation is unable to find the specified expense."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public class ExpenseNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ExpenseList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Amount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.expense.Currency;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Contains utility methods for populating {@code ExpenseList} with sample data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static Expense[] getSampleExpenses() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return new Expense[] {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            new Expense(new Name(\"Coffee\"), new Amount(\"$1.8\"), new Currency(\"SGD\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                new Date(\"1245\", false),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                getTagSet(\"food\")),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            new Expense(new Name(\"Textbook\"), new Amount(\"$23.50\"), new Currency(\"SGD\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                new Date(\"930\", false),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                getTagSet(\"education\", \"school\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            new Expense(new Name(\"Earphone\"), new Amount(\"$45\"), new Currency(\"SGD\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                new Date(\"10/12/2019 1800\", false), getTagSet(\"utility\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            new Expense(new Name(\"Hang out\"), new Amount(\"$50\"), new Currency(\"SGD\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                new Date(\"15/12/2019 2100\", false),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                getTagSet(\"entertainment\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            new Expense(new Name(\"Travel to Paris\"), new Amount(\"€850\"), new Currency(\"SGD\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                new Date(\"25/12/2019 800\", false),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                getTagSet(\"travel\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            new Expense(new Name(\"Gift for duke\"), new Amount(\"$30\"), new Currency(\"SGD\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                new Date(\"1/11/2019\", false),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                getTagSet(\"relationship\"))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static ReadOnlyExpenseList getSampleExpenseList() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        ExpenseList sampleEl \u003d new ExpenseList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        for (Expense sampleExpense : getSampleExpenses()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            sampleEl.addExpense(sampleExpense);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return sampleEl;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(Tag::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 20,
      "muhammadaljunied": 13,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ExpenseListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ExpenseList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Represents a storage for {@link ExpenseList}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public interface ExpenseListStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    Path getExpenseListFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns ExpenseList data as a {@link ReadOnlyExpenseList}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    Optional\u003cReadOnlyExpenseList\u003e readExpenseList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @see #getExpenseListFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    Optional\u003cReadOnlyExpenseList\u003e readExpenseList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Saves the given {@link ReadOnlyExpenseList} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @param expenseList cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    void saveExpenseList(ReadOnlyExpenseList expenseList) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @see #saveExpenseList(ReadOnlyExpenseList)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    void saveExpenseList(ReadOnlyExpenseList expenseList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedExpense.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.expense.Currency;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Jackson-friendly version of {@link Expense}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "class JsonAdaptedExpense {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"%s field of an expense is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private final String currency;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Constructs a {@code JsonAdaptedExpense} with the given expense details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public JsonAdaptedExpense(@JsonProperty(\"name\") String name, @JsonProperty(\"amount\") String amount,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                              @JsonProperty(\"currency\") String currency, @JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                              @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.currency \u003d currency;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Converts a given {@code Expense} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public JsonAdaptedExpense(Expense source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        amount \u003d source.getAmount().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        currency \u003d source.getCurrency().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        date \u003d source.getDate().rawValue;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Converts this Jackson-friendly adapted expense object into the model\u0027s {@code Expense} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted expense."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Expense toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        final List\u003cTag\u003e expenseTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            expenseTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (amount \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (!Amount.isValidAmount(amount)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new IllegalValueException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        final Amount modelAmount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (currency \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                MISSING_FIELD_MESSAGE_FORMAT, Currency.class.getSimpleName())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            );"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (!Currency.isValidCurrency(currency)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            throw new IllegalValueException(Currency.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        final Currency modelCurrency \u003d new Currency(currency);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (!Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(expenseTags);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return new Expense(modelName, modelAmount, modelCurrency, modelDate, modelTags);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 94,
      "muhammadaljunied": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonExpenseListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * A class to access ExpenseList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public class JsonExpenseListStorage implements ExpenseListStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonExpenseListStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public JsonExpenseListStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Path getExpenseListFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Optional\u003cReadOnlyExpenseList\u003e readExpenseList() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return readExpenseList(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Similar to {@link #readExpenseList()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Optional\u003cReadOnlyExpenseList\u003e readExpenseList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Optional\u003cJsonSerializableExpenseList\u003e jsonExpenseList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                filePath, JsonSerializableExpenseList.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (!jsonExpenseList.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return Optional.of(jsonExpenseList.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void saveExpenseList(ReadOnlyExpenseList addressBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        saveExpenseList(addressBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Similar to {@link #saveExpenseList(ReadOnlyExpenseList)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void saveExpenseList(ReadOnlyExpenseList expenseList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(expenseList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableExpenseList(expenseList), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 20,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableExpenseList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ExpenseList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * An Immutable ExpenseList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "@JsonRootName(value \u003d \"expenselist\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "class JsonSerializableExpenseList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXPENSE \u003d \"Expenses list contains duplicate expense(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final List\u003cJsonAdaptedExpense\u003e expenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Constructs a {@code JsonSerializableExpenseList} with the given expenses."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public JsonSerializableExpenseList(@JsonProperty(\"expenses\") List\u003cJsonAdaptedExpense\u003e expenses) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.expenses.addAll(expenses);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Converts a given {@code ReadOnlyExpenseList} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableExpenseList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public JsonSerializableExpenseList(ReadOnlyExpenseList source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        expenses.addAll(source.getExpenseList().stream().map(JsonAdaptedExpense::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Converts this address book into the model\u0027s {@code ExpenseList} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ExpenseList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        ExpenseList expenseList \u003d new ExpenseList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        for (JsonAdaptedExpense jsonAdaptedExpense : expenses) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            Expense expense \u003d jsonAdaptedExpense.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            if (expenseList.hasExpense(expense)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            expenseList.addExpense(expense);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return expenseList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public interface Storage extends ExpenseListStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    Path getExpenseListFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    Optional\u003cReadOnlyExpenseList\u003e readExpenseList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    void saveExpenseList(ReadOnlyExpenseList addressBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Manages storage of ExpenseList data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private ExpenseListStorage expenseListStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public StorageManager(ExpenseListStorage expenseListStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.expenseListStorage \u003d expenseListStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ExpenseList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Path getExpenseListFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return expenseListStorage.getExpenseListFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Optional\u003cReadOnlyExpenseList\u003e readExpenseList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return readExpenseList(expenseListStorage.getExpenseListFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Optional\u003cReadOnlyExpenseList\u003e readExpenseList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return expenseListStorage.readExpenseList(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void saveExpenseList(ReadOnlyExpenseList expenseList) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        saveExpenseList(expenseList, expenseListStorage.getExpenseListFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void saveExpenseList(ReadOnlyExpenseList expenseList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        expenseListStorage.saveExpenseList(expenseList, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 16,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExpenseCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * An UI component that displays information of a {@code Expense}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public class ExpenseCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static final String FXML \u003d \"ExpenseListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on ExpenseList level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public final Expense expense;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private Label amount;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private Label currency;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ExpenseCard(Expense expense, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.expense \u003d expense;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        name.setText(expense.getName().fullName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        amount.setText(expense.getAmount().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        currency.setText(expense.getCurrency().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        date.setText(expense.getDate().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        expense.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (!(other instanceof ExpenseCard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        ExpenseCard card \u003d (ExpenseCard) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u0026\u0026 expense.equals(card.expense);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 17,
      "muhammadaljunied": 2,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExpenseListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Panel containing the list of expenses."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public class ExpenseListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static final String FXML \u003d \"ExpenseListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ExpenseListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private ListView\u003cExpense\u003e expenseListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ExpenseListPanel(ObservableList\u003cExpense\u003e expenseList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        expenseListView.setItems(expenseList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        expenseListView.setCellFactory(listView -\u003e new ExpenseListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Expense} using a {@code ExpenseCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class ExpenseListViewCell extends ListCell\u003cExpense\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        protected void updateItem(Expense expense, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            super.updateItem(expense, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            if (empty || expense \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                setGraphic(new ExpenseCard(expense, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s1-cs2103-t14-4.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private ExpenseListPanel expenseListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private StackPane expenseListPanelPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        expenseListPanel \u003d new ExpenseListPanel(logic.getFilteredExpenseList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        expenseListPanelPlaceholder.getChildren().add(expenseListPanel.getRoot());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getExpenseListFilePath());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ExpenseListPanel getExpenseListPanel() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return expenseListPanel;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 7,
      "-": 186
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/expense_list_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 1,
      "-": 85
    }
  },
  {
    "path": "src/main/resources/view/ExpenseListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "         \u003cHBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u003cLabel fx:id\u003d\"amount\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$amount\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "               \u003cLabel fx:id\u003d\"currency\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$currency\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                     \u003cInsets left\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "      \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 2,
      "muhammadaljunied": 17,
      "-": 29
    }
  },
  {
    "path": "src/main/resources/view/ExpenseListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "  \u003cListView fx:id\u003d\"expenseListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "         title\u003d\"MYMorise\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    \u003cImage url\u003d\"@/images/expense_list_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        \u003cVBox fx:id\u003d\"expenseList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "          \u003cStackPane fx:id\u003d\"expenseListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 3,
      "choonx99": 1,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        final Index fifthExpenseIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(fifthExpenseIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(fifthExpenseIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(fifthExpenseIndex.equals(fifthExpenseIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(fifthExpenseIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(fifthExpenseIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(fifthExpenseIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 7,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/expense_list_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_VODKA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_VODKA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_VODKA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.VODKA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.storage.JsonExpenseListStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonExpenseListStorage expenseListStorage \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new JsonExpenseListStorage(temporaryFolder.resolve(\"expenseList.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        StorageManager storage \u003d new StorageManager(expenseListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        // Setup LogicManager with JsonExpenseListIoExceptionThrowingStub"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonExpenseListStorage expenseListStorage \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new JsonExpenseListIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionExpenseList.json\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        StorageManager storage \u003d new StorageManager(expenseListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_VODKA + AMOUNT_DESC_VODKA + DATE_DESC_VODKA;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense expectedExpense \u003d new ExpenseBuilder(VODKA).withTags().build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expectedModel.addExpense(expectedExpense);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void getFilteredExpenseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredExpenseList().remove(0));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getExpenseList(), new UserPrefs());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static class JsonExpenseListIoExceptionThrowingStub extends JsonExpenseListStorage {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        private JsonExpenseListIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public void saveExpenseList(ReadOnlyExpenseList expenseList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 5,
      "choonx99": 21,
      "-": 134
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenseList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        model \u003d new ModelManager(getTypicalExpenseList(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void execute_newExpense_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getExpenseList(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expectedModel.addExpense(validExpense);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertCommandSuccess(new AddCommand(validExpense), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validExpense), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void execute_duplicateExpense_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense expenseInList \u003d model.getExpenseList().getExpenseList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertCommandFailure(new AddCommand(expenseInList), model, AddCommand.MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 13,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ExpenseList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void constructor_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void execute_expenseAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ModelStubAcceptingExpenseAdded modelStub \u003d new ModelStubAcceptingExpenseAdded();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validExpense).execute(modelStub);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validExpense), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(Arrays.asList(validExpense), modelStub.expensesAdded);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void execute_duplicateExpense_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validExpense);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithExpense(validExpense);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_EXPENSE, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense shopping \u003d new ExpenseBuilder().withName(\"Adidas shoe\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense food \u003d new ExpenseBuilder().withName(\"Lunch\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        AddCommand addShoppingCommand \u003d new AddCommand(shopping);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        AddCommand addFoodCommand \u003d new AddCommand(food);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(addShoppingCommand.equals(addShoppingCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        AddCommand addShoppingCommandCopy \u003d new AddCommand(shopping);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(addShoppingCommand.equals(addShoppingCommandCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(addShoppingCommand.equals(1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(addShoppingCommand.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(addShoppingCommand.equals(addFoodCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public Path getExpenseListFilePath() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public void setExpenseListFilePath(Path expenseListFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public void setExpenseList(ReadOnlyExpenseList newData) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public ReadOnlyExpenseList getExpenseList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public void deleteExpense(Expense target) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * A Model stub that contains a single expense."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private class ModelStubWithExpense extends ModelStub {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        private final Expense expense;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ModelStubWithExpense(Expense expense) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            this.expense \u003d expense;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return this.expense.isSameExpense(expense);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * A Model stub that always accept the expense being added."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private class ModelStubAcceptingExpenseAdded extends ModelStub {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        final ArrayList\u003cExpense\u003e expensesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return expensesAdded.stream().anyMatch(expense::isSameExpense);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            expensesAdded.add(expense);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public ReadOnlyExpenseList getExpenseList() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return new ExpenseList();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 3,
      "choonx99": 54,
      "-": 137
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenseList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ExpenseList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void execute_emptyExpenseList_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void execute_nonEmptyExpenseList_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalExpenseList(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalExpenseList(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expectedModel.setExpenseList(new ExpenseList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 1,
      "choonx99": 6,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CURRENCY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ExpenseList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String VALID_NAME_VODKA \u003d \"Belvedere Vodka\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String VALID_NAME_RUM \u003d \"Ron Zacapa\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String VALID_AMOUNT_VODKA \u003d \"$30\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String VALID_AMOUNT_RUM \u003d \"$200\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String VALID_CURRENCY_VODKA \u003d \"SGD\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String VALID_CURRENCY_RUM \u003d \"USD\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String VALID_DATE_VODKA \u003d \"13/10/2019\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String VALID_DATE_RUM \u003d \"09/05/2019\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String VALID_TAG_ALCOHOL \u003d \"alcohol\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String VALID_TAG_DRINKS \u003d \"drinks\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String NAME_DESC_VODKA \u003d \" \" + PREFIX_NAME + VALID_NAME_VODKA;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String NAME_DESC_RUM \u003d \" \" + PREFIX_NAME + VALID_NAME_RUM;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String AMOUNT_DESC_VODKA \u003d \" \" + PREFIX_AMOUNT + VALID_AMOUNT_VODKA;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String AMOUNT_DESC_RUM \u003d \" \" + PREFIX_AMOUNT + VALID_AMOUNT_RUM;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String CURRENCY_DESC_VODKA \u003d \" \" + PREFIX_CURRENCY + VALID_CURRENCY_VODKA;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String CURRENCY_DESC_RUM \u003d \" \" + PREFIX_CURRENCY + VALID_CURRENCY_RUM;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String DATE_DESC_VODKA \u003d \" \" + PREFIX_DATE + VALID_DATE_VODKA;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String DATE_DESC_RUM \u003d \" \" + PREFIX_DATE + VALID_DATE_RUM;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String TAG_DESC_DRINKS \u003d \" \" + PREFIX_TAG + VALID_TAG_DRINKS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String TAG_DESC_ALCOHOL \u003d \" \" + PREFIX_TAG + VALID_TAG_ALCOHOL;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \" \"; // empty string not allowed in name"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String INVALID_AMOUNT_DESC \u003d \" \" + PREFIX_AMOUNT + \"911a\"; // character not allowed in amounts"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String INVALID_CURRENCY_DESC \u003d \" \" + PREFIX_CURRENCY + \"X12\"; // number not allowed in amounts"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"13/12/19\"; // year must be of format yyyy"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"alcohol*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final EditCommand.EditExpenseDescriptor DESC_VODKA;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final EditCommand.EditExpenseDescriptor DESC_RUM;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        DESC_VODKA \u003d new EditExpenseDescriptorBuilder().withName(VALID_NAME_VODKA)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                .withCurrency(VALID_CURRENCY_VODKA).withAmount(VALID_AMOUNT_VODKA).withDate(VALID_DATE_VODKA)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                .withTags(VALID_TAG_DRINKS).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        DESC_RUM \u003d new EditExpenseDescriptorBuilder().withName(VALID_NAME_RUM)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                .withCurrency(VALID_CURRENCY_RUM).withAmount(VALID_AMOUNT_RUM).withDate(VALID_DATE_RUM)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                .withTags(VALID_TAG_ALCOHOL, VALID_TAG_DRINKS).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * - the address book, filtered expense list and selected expense in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ExpenseList expectedExpenseList \u003d new ExpenseList(actualModel.getExpenseList());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        List\u003cExpense\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredExpenseList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(expectedExpenseList, actualModel.getExpenseList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredExpenseList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the expense at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static void showExpenseAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense expense \u003d model.getFilteredExpenseList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        final String[] splitName \u003d expense.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        model.updateFilteredExpenseList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(1, model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 5,
      "choonx99": 42,
      "muhammadaljunied": 7,
      "-": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showExpenseAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenseList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalExpenseList(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense expenseToDelete \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_EXPENSE_SUCCESS, expenseToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getExpenseList(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expectedModel.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenseList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense expenseToDelete \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_EXPENSE_SUCCESS, expenseToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getExpenseList(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expectedModel.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        showNoExpense(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of expense list list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getExpenseList().getExpenseList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_EXPENSE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private void showNoExpense(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        model.updateFilteredExpenseList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(model.getFilteredExpenseList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 32,
      "-": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_RUM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_VODKA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_RUM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_RUM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_ALCOHOL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showExpenseAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenseList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ExpenseList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalExpenseList(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder(editedExpense).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ExpenseList(model.getExpenseList()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expectedModel.setExpense(model.getFilteredExpenseList().get(0), editedExpense);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Index indexLastExpense \u003d Index.fromOneBased(model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense lastExpense \u003d model.getFilteredExpenseList().get(indexLastExpense.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ExpenseBuilder expenseInList \u003d new ExpenseBuilder(lastExpense);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense editedExpense \u003d expenseInList.withName(VALID_NAME_RUM).withAmount(VALID_AMOUNT_RUM)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                .withTags(VALID_TAG_ALCOHOL).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder().withName(VALID_NAME_RUM)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                .withAmount(VALID_AMOUNT_RUM).withTags(VALID_TAG_ALCOHOL).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastExpense, descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ExpenseList(model.getExpenseList()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expectedModel.setExpense(lastExpense, editedExpense);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE, new EditExpenseDescriptor());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense editedExpense \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ExpenseList(model.getExpenseList()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense expenseInFilteredList \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder(expenseInFilteredList).withName(VALID_NAME_RUM).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new EditExpenseDescriptorBuilder().withName(VALID_NAME_RUM).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ExpenseList(model.getExpenseList()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expectedModel.setExpense(model.getFilteredExpenseList().get(0), editedExpense);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void execute_duplicateExpenseUnfilteredList_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense firstExpense \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder(firstExpense).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_EXPENSE, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void execute_duplicateExpenseFilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // edit expense in filtered list into a duplicate in expense list"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense expenseInList \u003d model.getExpenseList().getExpenseList().get(INDEX_SECOND_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new EditExpenseDescriptorBuilder(expenseInList).build());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void execute_invalidExpenseIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenseList().size() + 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder().withName(VALID_NAME_RUM).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * but smaller than size of expense list"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void execute_invalidExpenseIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of expense list list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getExpenseList().getExpenseList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new EditExpenseDescriptorBuilder().withName(VALID_NAME_RUM).build());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE, DESC_VODKA);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditExpenseDescriptor copyDescriptor \u003d new EditExpenseDescriptor(DESC_VODKA);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_EXPENSE, copyDescriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_EXPENSE, DESC_VODKA)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_EXPENSE, DESC_RUM)));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 1,
      "choonx99": 72,
      "-": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditExpenseDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_RUM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_VODKA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_RUM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_RUM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_RUM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_ALCOHOL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class EditExpenseDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditExpenseDescriptor descriptorWithSameValues \u003d new EditExpenseDescriptor(DESC_VODKA);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(DESC_VODKA.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(DESC_VODKA.equals(DESC_VODKA));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(DESC_VODKA.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(DESC_VODKA.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(DESC_VODKA.equals(DESC_RUM));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditExpenseDescriptor editedVodka \u003d new EditExpenseDescriptorBuilder(DESC_VODKA)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                .withName(VALID_NAME_RUM).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(DESC_VODKA.equals(editedVodka));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different amount -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        editedVodka \u003d new EditExpenseDescriptorBuilder(DESC_VODKA).withAmount(VALID_AMOUNT_RUM).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(DESC_VODKA.equals(editedVodka));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        editedVodka \u003d new EditExpenseDescriptorBuilder(DESC_VODKA).withDate(VALID_DATE_RUM).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(DESC_VODKA.equals(editedVodka));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        editedVodka \u003d new EditExpenseDescriptorBuilder(DESC_VODKA).withTags(VALID_TAG_ALCOHOL).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(DESC_VODKA.equals(editedVodka));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EXPENSES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EXPENSE_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.CHRISTMAS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.SHOPPING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.VALENTINES;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenseList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalExpenseList(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalExpenseList(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void execute_zeroKeywords_noExpenseFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENSE_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expectedModel.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void execute_multipleKeywords_multipleExpensesFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENSES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"shoe Chocolates Socks\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expectedModel.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(Arrays.asList(SHOPPING, VALENTINES, CHRISTMAS), model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 4,
      "choonx99": 16,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showExpenseAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenseList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        model \u003d new ModelManager(getTypicalExpenseList(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getExpenseList(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 6,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_RUM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_VODKA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CURRENCY_DESC_RUM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CURRENCY_DESC_VODKA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_RUM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_VODKA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CURRENCY_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_RUM;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_VODKA;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_ALCOHOL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_DRINKS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_RUM;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_RUM;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_RUM;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_ALCOHOL;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DRINKS;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.RUM;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.VODKA;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Amount;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Currency;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense expectedExpense \u003d new ExpenseBuilder(RUM).withTags(VALID_TAG_DRINKS).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            PREAMBLE_WHITESPACE + NAME_DESC_RUM + AMOUNT_DESC_RUM + CURRENCY_DESC_RUM + DATE_DESC_RUM"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                + TAG_DESC_DRINKS, new AddCommand(expectedExpense));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_VODKA + NAME_DESC_RUM + AMOUNT_DESC_RUM + CURRENCY_DESC_RUM + DATE_DESC_RUM"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            + TAG_DESC_DRINKS, new AddCommand(expectedExpense));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // multiple amounts - last amount accepted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            NAME_DESC_RUM + AMOUNT_DESC_VODKA + AMOUNT_DESC_RUM + CURRENCY_DESC_RUM + DATE_DESC_RUM"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                + TAG_DESC_DRINKS, new AddCommand(expectedExpense));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        // multiple currencies - last currency accepted"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            NAME_DESC_RUM + AMOUNT_DESC_RUM + CURRENCY_DESC_VODKA + CURRENCY_DESC_RUM + DATE_DESC_RUM"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                + TAG_DESC_DRINKS, new AddCommand(expectedExpense));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // multiple dates - last date accepted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            NAME_DESC_RUM + AMOUNT_DESC_RUM + CURRENCY_DESC_RUM + DATE_DESC_VODKA + DATE_DESC_RUM"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                + TAG_DESC_DRINKS, new AddCommand(expectedExpense));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense expectedExpenseMultipleTags \u003d new ExpenseBuilder(RUM).withTags(VALID_TAG_DRINKS, VALID_TAG_ALCOHOL)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            NAME_DESC_RUM + AMOUNT_DESC_RUM + CURRENCY_DESC_RUM + DATE_DESC_RUM + TAG_DESC_ALCOHOL"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                + TAG_DESC_DRINKS, new AddCommand(expectedExpenseMultipleTags));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense expectedExpense \u003d new ExpenseBuilder(VODKA).withTags().build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_VODKA + AMOUNT_DESC_VODKA + DATE_DESC_VODKA,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new AddCommand(expectedExpense));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_RUM + AMOUNT_DESC_RUM + DATE_DESC_RUM,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // missing amount prefix"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_RUM + VALID_AMOUNT_RUM + DATE_DESC_RUM,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_RUM + VALID_AMOUNT_RUM + VALID_DATE_RUM,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + AMOUNT_DESC_RUM + CURRENCY_DESC_RUM + DATE_DESC_RUM"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            + TAG_DESC_ALCOHOL + TAG_DESC_DRINKS, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // invalid amount"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_RUM + INVALID_AMOUNT_DESC + CURRENCY_DESC_RUM + DATE_DESC_RUM"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            + TAG_DESC_ALCOHOL + TAG_DESC_DRINKS, Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        // invalid currency"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_RUM + AMOUNT_DESC_RUM + DATE_DESC_RUM + INVALID_CURRENCY_DESC"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            + TAG_DESC_ALCOHOL + TAG_DESC_DRINKS, Currency.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_RUM + AMOUNT_DESC_RUM + CURRENCY_DESC_RUM + INVALID_DATE_DESC"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            + TAG_DESC_ALCOHOL + TAG_DESC_DRINKS, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_RUM + AMOUNT_DESC_RUM + CURRENCY_DESC_RUM + DATE_DESC_RUM"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            + INVALID_TAG_DESC + VALID_TAG_DRINKS, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + AMOUNT_DESC_RUM + CURRENCY_DESC_RUM + INVALID_DATE_DESC,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            PREAMBLE_NON_EMPTY + NAME_DESC_RUM + AMOUNT_DESC_RUM + CURRENCY_DESC_RUM + DATE_DESC_RUM"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                + TAG_DESC_ALCOHOL + TAG_DESC_DRINKS,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 28,
      "choonx99": 45,
      "-": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_EXPENSE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_RUM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_VODKA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CURRENCY_DESC_RUM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CURRENCY_DESC_VODKA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_RUM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_VODKA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CURRENCY_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_VODKA;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_ALCOHOL;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_DRINKS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_RUM;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_VODKA;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CURRENCY_RUM;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CURRENCY_VODKA;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_RUM;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_VODKA;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_VODKA;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_ALCOHOL;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DRINKS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_EXPENSE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Amount;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Currency;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Date;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_VODKA, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_VODKA, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_VODKA, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AMOUNT_DESC, Amount.MESSAGE_CONSTRAINTS); // invalid amount"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CURRENCY_DESC, Currency.MESSAGE_CONSTRAINTS); // invalid currency"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE_DESC, Date.MESSAGE_CONSTRAINTS); // invalid date"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // invalid amount followed by valid date"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AMOUNT_DESC + DATE_DESC_VODKA, Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // valid amount followed by invalid amount. The test case for invalid amount followed by valid amount"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertParseFailure(parser, \"1\" + AMOUNT_DESC_RUM + INVALID_AMOUNT_DESC, Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Expense} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_DRINKS + TAG_DESC_ALCOHOL + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_DRINKS + TAG_EMPTY + TAG_DESC_ALCOHOL, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_DRINKS + TAG_DESC_ALCOHOL, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_DATE_DESC + VALID_AMOUNT_VODKA,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_RUM + CURRENCY_DESC_VODKA + TAG_DESC_ALCOHOL"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            + DATE_DESC_VODKA + NAME_DESC_VODKA + TAG_DESC_DRINKS;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder().withName(VALID_NAME_VODKA)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            .withCurrency(VALID_CURRENCY_VODKA).withAmount(VALID_AMOUNT_RUM).withDate(VALID_DATE_VODKA)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            .withTags(VALID_TAG_ALCOHOL, VALID_TAG_DRINKS).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_RUM + DATE_DESC_VODKA;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .withAmount(VALID_AMOUNT_RUM).withDate(VALID_DATE_VODKA).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_EXPENSE;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_VODKA;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder().withName(VALID_NAME_VODKA).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // amount"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_VODKA;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptorBuilder().withAmount(VALID_AMOUNT_VODKA).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        // currency"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CURRENCY_DESC_VODKA;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptorBuilder().withCurrency(VALID_CURRENCY_VODKA).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // date"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DATE_DESC_VODKA;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptorBuilder().withDate(VALID_DATE_VODKA).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_DRINKS;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptorBuilder().withTags(VALID_TAG_DRINKS).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_RUM + DATE_DESC_VODKA"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            + TAG_DESC_DRINKS + AMOUNT_DESC_VODKA + DATE_DESC_VODKA + TAG_DESC_DRINKS"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            + AMOUNT_DESC_RUM + DATE_DESC_RUM + TAG_DESC_ALCOHOL + CURRENCY_DESC_RUM;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder().withCurrency(VALID_CURRENCY_RUM)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            .withAmount(VALID_AMOUNT_RUM).withDate(VALID_DATE_RUM)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            .withTags(VALID_TAG_DRINKS, VALID_TAG_ALCOHOL).build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_AMOUNT_DESC + AMOUNT_DESC_RUM;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            new EditExpenseDescriptorBuilder().withAmount(VALID_AMOUNT_RUM).build();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        userInput \u003d"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            targetIndex.getOneBased() + DATE_DESC_RUM + INVALID_AMOUNT_DESC + CURRENCY_DESC_VODKA + AMOUNT_DESC_RUM;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptorBuilder().withCurrency(VALID_CURRENCY_VODKA)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            .withAmount(VALID_AMOUNT_RUM).withDate(VALID_DATE_RUM).build();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_EXPENSE;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 37,
      "choonx99": 48,
      "muhammadaljunied": 2,
      "-": 125
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ExpenseListParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.ExpenseUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.testutil.RawExpenseBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class ExpenseListParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final MymParser parser \u003d new MymParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Expense rawExpense \u003d new RawExpenseBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense expense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(ExpenseUtil.getAddCommand(rawExpense));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(new AddCommand(expense), command);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EXPENSE.getOneBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_EXPENSE), command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Expense rawExpense \u003d new RawExpenseBuilder().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Expense expense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder(expense).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        EditExpenseDescriptor rawDescriptor \u003d new EditExpenseDescriptorBuilder(rawExpense).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            + INDEX_FIRST_EXPENSE.getOneBased() + \" \" + ExpenseUtil.getEditExpenseDescriptorDetails(rawDescriptor));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_EXPENSE, descriptor), command);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 12,
      "choonx99": 10,
      "-": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Lunch\", \"Vodka\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertParseSuccess(parser, \"Lunch Vodka\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertParseSuccess(parser, \" \\n Lunch \\n \\t Vodka  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 1,
      "choonx99": 3,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static final String INVALID_NAME \u003d \"  \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final String INVALID_AMOUNT \u003d \"+634\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static final String INVALID_DATE \u003d \"Sat\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static final String WRONG_DATE \u003d \"13/13/2019\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#food\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final String VALID_NAME \u003d \"Coffee\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final String VALID_AMOUNT \u003d \"$6.50\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final String VALID_DATE \u003d \"13/10/2019\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"food\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"drink\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(INDEX_FIRST_EXPENSE, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(INDEX_FIRST_EXPENSE, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void parseAmount_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAmount((String) null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void parseAmount_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAmount(INVALID_AMOUNT));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void parseAmount_validValueWithoutWhitespace_returnsAmount() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Amount expectedAmount \u003d new Amount(VALID_AMOUNT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(expectedAmount, ParserUtil.parseAmount(VALID_AMOUNT));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void parseAmount_validValueWithWhitespace_returnsTrimmedAmount() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String amountWithWhitespace \u003d WHITESPACE + VALID_AMOUNT + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Amount expectedAmount \u003d new Amount(VALID_AMOUNT);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(expectedAmount, ParserUtil.parseAmount(amountWithWhitespace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void parseDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDate((String) null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void parseDate_invalidValue_throwsDateTimeParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(INVALID_DATE));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void parseDate_wrongValue_throwsParseException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e ParserUtil.parseDate(WRONG_DATE));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void parseDate_validValueWithWhitespace_returnsTrimmedDate() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String dateWithWhitespace \u003d WHITESPACE + VALID_DATE + WHITESPACE;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Date expectedDate \u003d new Date(VALID_DATE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(dateWithWhitespace));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void parseDate_validValueWithoutWhitespace_returnsConvertedDate() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Date expectedDate \u003d new Date(VALID_DATE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(VALID_DATE));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 13,
      "choonx99": 30,
      "-": 135
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ExpenseListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.FOOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenseList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.exceptions.DuplicateExpenseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class ExpenseListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private final ExpenseList expenseList \u003d new ExpenseList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(Collections.emptyList(), expenseList.getExpenseList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e expenseList.resetData(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void resetData_withValidReadOnlyExpenseList_replacesData() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ExpenseList newData \u003d getTypicalExpenseList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expenseList.resetData(newData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(newData, expenseList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void resetData_withDuplicateExpenses_throwsDuplicateExpenseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // Two expenses with the same identity fields"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Expense editedFood \u003d new ExpenseBuilder(FOOD).withTags(\"RUM\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        List\u003cExpense\u003e newExpenses \u003d Arrays.asList(FOOD, editedFood);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ExpenseListStub newData \u003d new ExpenseListStub(newExpenses);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(DuplicateExpenseException.class, () -\u003e expenseList.resetData(newData));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void hasExpense_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e expenseList.hasExpense(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void hasExpense_expenseNotInExpenseList_returnsFalse() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(expenseList.hasExpense(FOOD));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void hasExpense_expenseInExpenseList_returnsTrue() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expenseList.addExpense(FOOD);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(expenseList.hasExpense(FOOD));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void getExpenseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e expenseList.getExpenseList().remove(0));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * A stub ReadOnlyExpenseList whose expenses list can violate interface constraints."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static class ExpenseListStub implements ReadOnlyExpenseList {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        private final ObservableList\u003cExpense\u003e expenses \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ExpenseListStub(Collection\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            this.expenses.setAll(expenses);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public ObservableList\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return expenses;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 2,
      "choonx99": 89
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.FOOD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.SHOPPING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.ExpenseListBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertEquals(new ExpenseList(), new ExpenseList(modelManager.getExpenseList()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        userPrefs.setExpenseListFilePath(Paths.get(\"expense/list/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        userPrefs.setExpenseListFilePath(Paths.get(\"new/expense/list/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setExpenseListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setExpenseListFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setExpenseListFilePath_validPath_setsExpenseListFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Path path \u003d Paths.get(\"expense/list/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        modelManager.setExpenseListFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(path, modelManager.getExpenseListFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void hasExpense_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasExpense(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void hasExpense_expenseNotInExpenseList_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(modelManager.hasExpense(FOOD));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void hasExpense_expenseInExpenseList_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        modelManager.addExpense(FOOD);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(modelManager.hasExpense(FOOD));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void getFilteredExpenseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredExpenseList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ExpenseList expenseList \u003d new ExpenseListBuilder().withExpense(FOOD).withExpense(SHOPPING).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        ExpenseList differentExpenseList \u003d new ExpenseList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        modelManager \u003d new ModelManager(expenseList, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(expenseList, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        // different expenseList -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentExpenseList, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String[] keywords \u003d FOOD.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        modelManager.updateFilteredExpenseList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(expenseList, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        modelManager.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        differentUserPrefs.setExpenseListFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(expenseList, differentUserPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 9,
      "choonx99": 26,
      "-": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setExpenseListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setExpenseListFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/AmountTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class AmountTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Amount(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void constructor_invalidAmount_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String invalidAmount \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Amount(invalidAmount));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void isValidAmount() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // null amount"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Amount.isValidAmount(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // invalid amounts"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(Amount.isValidAmount(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"912462724523523\")); // more than 12 digits"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"amount\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // valid amounts"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1\")); // exactly 1 digit"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1.1\")); // exactly 1 decimal"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1.15\")); // exactly 2 decimals"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1472745.15\")); // less than 12 digits and exactly 2 decimals"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"93121534\")); // less than 12 digits"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 1,
      "choonx99": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/DateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Date(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // blank date"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(Date.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(Date.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(Date.isValidDate(\"12/13\")); // missing year"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(Date.isValidDate(\"12/2019\")); // missing day"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(Date.isValidDate(\"31/2019\")); // missing month"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(Date.isValidDate(\"123/11/2019\")); // invalid day"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertFalse(Date.isValidDate(\"12/123/2019\")); // invalid month"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(Date.isValidDate(\"12/11/20111\")); // invalid year"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(Date.isValidDate(\"1/1/2019 12222\")); // invalid time"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(Date.isValidDate(\"02/02/2019 0\")); // invalid time"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertFalse(Date.isValidDate(\"Sat\")); // invalid time"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertFalse(Date.isValidDate(\"Jun 01\")); // invalid format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertFalse(Date.isValidDate(\"2019/1/1\")); // invalid format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertFalse(Date.isValidDate(\"2019/1/1 1800\")); // invalid format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // valid date"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Date.isValidDate(\"1/1/2019\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Date.isValidDate(\"01/2/2019\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Date.isValidDate(\"02/02/2019\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Date.isValidDate(\"1/02/2019\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Date.isValidDate(\"1/1/2019 1845\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Date.isValidDate(\"01/2/2019 1213\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Date.isValidDate(\"02/02/2019 1522\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertTrue(Date.isValidDate(\"1/02/2019 1423\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Date.isValidDate(\"1/02/2019 355\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertTrue(Date.isValidDate(\"01/02/2019 845\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertTrue(Date.isValidDate(\"01/2/2019 130\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertTrue(Date.isValidDate(\"1/2/2019 000\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Date.isValidDate(\"1155\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Date.isValidDate(\"155\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Date.isValidDate(\"1455\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 11,
      "choonx99": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/ExpenseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_RUM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CURRENCY_RUM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_RUM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_RUM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_ALCOHOL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.FOOD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.RUM;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class ExpenseTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense expense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e expense.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void isSameExpense() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(FOOD.isSameExpense(FOOD));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(FOOD.isSameExpense(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different amount and date -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Expense editedFood \u003d new ExpenseBuilder(FOOD).withAmount(VALID_AMOUNT_RUM)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .withCurrency(VALID_CURRENCY_RUM).withDate(VALID_DATE_RUM).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertFalse(FOOD.isSameExpense(editedFood));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        editedFood \u003d new ExpenseBuilder(FOOD).withName(VALID_NAME_RUM).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(FOOD.isSameExpense(editedFood));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        // different currency -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        editedFood \u003d new ExpenseBuilder(FOOD).withCurrency(VALID_CURRENCY_RUM).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertFalse(FOOD.isSameExpense(editedFood));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        // same name, same amount, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        editedFood \u003d new ExpenseBuilder(FOOD).withDate(VALID_DATE_RUM)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            .withTags(VALID_TAG_ALCOHOL).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertFalse(FOOD.isSameExpense(editedFood));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        // same name, same date, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        editedFood \u003d new ExpenseBuilder(FOOD).withAmount(VALID_AMOUNT_RUM)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            .withTags(VALID_TAG_ALCOHOL).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertFalse(FOOD.isSameExpense(editedFood));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // same name, same amount, same date, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        editedFood \u003d new ExpenseBuilder(FOOD).withTags(VALID_TAG_ALCOHOL).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(FOOD.isSameExpense(editedFood));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense foodCopy \u003d new ExpenseBuilder(FOOD).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(FOOD.equals(foodCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(FOOD.equals(FOOD));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(FOOD.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(FOOD.equals(5));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(FOOD.equals(RUM));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense editedFood \u003d new ExpenseBuilder(FOOD).withName(VALID_NAME_RUM).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(FOOD.equals(editedFood));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different amount -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        editedFood \u003d new ExpenseBuilder(FOOD).withAmount(VALID_AMOUNT_RUM).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(FOOD.equals(editedFood));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        editedFood \u003d new ExpenseBuilder(FOOD).withDate(VALID_DATE_RUM).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(FOOD.equals(editedFood));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        editedFood \u003d new ExpenseBuilder(FOOD).withTags(VALID_TAG_ALCOHOL).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(FOOD.equals(editedFood));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 9,
      "choonx99": 84,
      "muhammadaljunied": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"Coffee\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withName(\"Coffee Tea\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Coffee\", \"Tea\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withName(\"Coffee Tea\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Tea\", \"Sprite\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withName(\"Coffee Sprite\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"cOFfee\", \"tEA\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withName(\"Coffee Tea\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withName(\"Coffee\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Sprite\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withName(\"Coffee Tea\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // Keywords match amount and date, but does not match name"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"$23.50\", \"13/10/2019\", \"Tea\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withName(\"Coffee\").withAmount(\"$23.50\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                .withDate(\"13/10/2019\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 1,
      "choonx99": 18,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertFalse(Name.isValidName(\" coffee*\")); // start with space"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Name.isValidName(\"afternoon coffee\")); // alphabets only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Name.isValidName(\"2nd coffee\")); // alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Name.isValidName(\"Starbucks\")); // with capital letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Name.isValidName(\"Starbucks and Coffee Bean\")); // long names"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 2,
      "choonx99": 4,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/UniqueExpenseListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_RUM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_ALCOHOL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.FOOD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.RUM;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.exceptions.DuplicateExpenseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.exceptions.ExpenseNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class UniqueExpenseListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private final UniqueExpenseList uniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void contains_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenseList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void contains_expenseNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(uniqueExpenseList.contains(FOOD));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void contains_expenseInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueExpenseList.add(FOOD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(uniqueExpenseList.contains(FOOD));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void contains_expenseWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueExpenseList.add(FOOD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Expense editedFood \u003d new ExpenseBuilder(FOOD).withTags(VALID_TAG_ALCOHOL)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(uniqueExpenseList.contains(editedFood));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void add_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenseList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void add_duplicateExpense_throwsDuplicateExpenseException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueExpenseList.add(FOOD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(DuplicateExpenseException.class, () -\u003e uniqueExpenseList.add(FOOD));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setExpense_nullTargetExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenseList.setExpense(null, FOOD));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setExpense_nullEditedExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenseList.setExpense(FOOD, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setExpense_targetExpenseNotInList_throwsExpenseNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(ExpenseNotFoundException.class, () -\u003e uniqueExpenseList.setExpense(FOOD, FOOD));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setExpense_editedExpenseIsSameExpense_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueExpenseList.add(FOOD);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueExpenseList.setExpense(FOOD, FOOD);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        UniqueExpenseList expectedUniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expectedUniqueExpenseList.add(FOOD);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(expectedUniqueExpenseList, uniqueExpenseList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setExpense_editedExpenseHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueExpenseList.add(FOOD);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense editedFood \u003d new ExpenseBuilder(FOOD).withAmount(VALID_AMOUNT_RUM).withTags(VALID_TAG_ALCOHOL)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueExpenseList.setExpense(FOOD, editedFood);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        UniqueExpenseList expectedUniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expectedUniqueExpenseList.add(editedFood);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(expectedUniqueExpenseList, uniqueExpenseList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setExpense_editedExpenseHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueExpenseList.add(FOOD);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueExpenseList.setExpense(FOOD, RUM);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        UniqueExpenseList expectedUniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expectedUniqueExpenseList.add(RUM);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(expectedUniqueExpenseList, uniqueExpenseList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setExpense_editedExpenseHasNonUniqueIdentity_throwsDuplicateExpenseException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueExpenseList.add(FOOD);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueExpenseList.add(RUM);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(DuplicateExpenseException.class, () -\u003e uniqueExpenseList.setExpense(FOOD, RUM));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void remove_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenseList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void remove_expenseDoesNotExist_throwsExpenseNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(ExpenseNotFoundException.class, () -\u003e uniqueExpenseList.remove(FOOD));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void remove_existingExpense_removesExpense() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueExpenseList.add(FOOD);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueExpenseList.remove(FOOD);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        UniqueExpenseList expectedUniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(expectedUniqueExpenseList, uniqueExpenseList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setExpenses_nullUniqueExpenseList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenseList.setExpenses((UniqueExpenseList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setExpenses_uniqueExpenseList_replacesOwnListWithProvidedUniqueExpenseList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueExpenseList.add(FOOD);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        UniqueExpenseList expectedUniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expectedUniqueExpenseList.add(RUM);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueExpenseList.setExpenses(expectedUniqueExpenseList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(expectedUniqueExpenseList, uniqueExpenseList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setExpenses_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenseList.setExpenses((List\u003cExpense\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setExpenses_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueExpenseList.add(FOOD);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        List\u003cExpense\u003e expenseList \u003d Collections.singletonList(RUM);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueExpenseList.setExpenses(expenseList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        UniqueExpenseList expectedUniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expectedUniqueExpenseList.add(RUM);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(expectedUniqueExpenseList, uniqueExpenseList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setExpenses_listWithDuplicateExpenses_throwsDuplicateExpenseException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        List\u003cExpense\u003e listWithDuplicateExpenses \u003d Arrays.asList(FOOD, FOOD);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(DuplicateExpenseException.class, () -\u003e uniqueExpenseList.setExpenses(listWithDuplicateExpenses));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            -\u003e uniqueExpenseList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 1,
      "choonx99": 169
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedExpenseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.storage.JsonAdaptedExpense.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.FOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.expense.Currency;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class JsonAdaptedExpenseTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static final String INVALID_NAME \u003d \"  \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final String INVALID_AMOUNT \u003d \"+$@654\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static final String INVALID_CURRENCY \u003d \"X12\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static final String INVALID_DATE \u003d \"Sat\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final String VALID_NAME \u003d FOOD.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final String VALID_AMOUNT \u003d FOOD.getAmount().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static final String VALID_CURRENCY \u003d FOOD.getCurrency().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final String VALID_DATE \u003d FOOD.getDate().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d FOOD.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void toModelType_validExpenseDetails_returnsExpense() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonAdaptedExpense expense \u003d new JsonAdaptedExpense(FOOD);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(FOOD, expense.toModelType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                new JsonAdaptedExpense(INVALID_NAME, VALID_AMOUNT, VALID_CURRENCY, VALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        JsonAdaptedExpense expense \u003d new JsonAdaptedExpense(null, VALID_AMOUNT, VALID_CURRENCY, VALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void toModelType_invalidAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                new JsonAdaptedExpense(VALID_NAME, INVALID_AMOUNT, VALID_CURRENCY, VALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String expectedMessage \u003d Amount.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void toModelType_nullAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        JsonAdaptedExpense expense \u003d new JsonAdaptedExpense(VALID_NAME, null, VALID_CURRENCY, VALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void toModelType_invalidCurrency_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            new JsonAdaptedExpense(VALID_NAME, VALID_AMOUNT, INVALID_CURRENCY, VALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        String expectedMessage \u003d Currency.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void toModelType_nullCurrency_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        JsonAdaptedExpense expense \u003d new JsonAdaptedExpense(VALID_NAME, VALID_AMOUNT, null, VALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Currency.class.getSimpleName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                new JsonAdaptedExpense(VALID_NAME, VALID_AMOUNT, VALID_CURRENCY, INVALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        JsonAdaptedExpense expense \u003d new JsonAdaptedExpense(VALID_NAME, VALID_AMOUNT, VALID_CURRENCY, null, VALID_TAGS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                new JsonAdaptedExpense(VALID_NAME, VALID_AMOUNT, VALID_CURRENCY, VALID_DATE, invalidTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(IllegalValueException.class, expense::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 2,
      "choonx99": 83,
      "muhammadaljunied": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonExpenseListStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.FURNITURE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.SNACKS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.TRANSPORT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenseList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ExpenseList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class JsonExpenseListStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonExpenseListStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void readExpenseList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readExpenseList(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private java.util.Optional\u003cReadOnlyExpenseList\u003e readExpenseList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return new JsonExpenseListStorage(Paths.get(filePath)).readExpenseList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(readExpenseList(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readExpenseList(\"notJsonFormatExpense.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void readExpenseList_invalidExpenseExpenseList_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readExpenseList(\"invalidExpense.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void readExpenseList_invalidAndValidExpenseExpenseList_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readExpenseList(\"invalidAndValidExpense.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void readAndSaveExpenseList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempExpenseList.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ExpenseList original \u003d getTypicalExpenseList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonExpenseListStorage jsonExpenseListStorage \u003d new JsonExpenseListStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        jsonExpenseListStorage.saveExpenseList(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ReadOnlyExpenseList readBack \u003d jsonExpenseListStorage.readExpenseList(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(original, new ExpenseList(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        original.addExpense(FURNITURE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        original.removeExpense(TRANSPORT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        jsonExpenseListStorage.saveExpenseList(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        readBack \u003d jsonExpenseListStorage.readExpenseList(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(original, new ExpenseList(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        original.addExpense(SNACKS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        jsonExpenseListStorage.saveExpenseList(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        readBack \u003d jsonExpenseListStorage.readExpenseList().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(original, new ExpenseList(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void saveExpenseList_nullExpenseList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveExpenseList(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Saves {@code expenseList} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private void saveExpenseList(ReadOnlyExpenseList expenseList, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new JsonExpenseListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    .saveExpenseList(expenseList, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void saveExpenseList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveExpenseList(new ExpenseList(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 3,
      "choonx99": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableExpenseListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ExpenseList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.TypicalExpenses;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class JsonSerializableExpenseListTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableExpenseListTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static final Path TYPICAL_EXPENSES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalExpenses.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static final Path INVALID_EXPENSE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidExpense.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static final Path DUPLICATE_EXPENSE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateExpense.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void toModelType_typicalExpensesFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonSerializableExpenseList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_EXPENSES_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                JsonSerializableExpenseList.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        ExpenseList expenseListFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ExpenseList typicalExpensesExpenseList \u003d TypicalExpenses.getTypicalExpenseList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(expenseListFromFile, typicalExpensesExpenseList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void toModelType_invalidExpenseFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonSerializableExpenseList dataFromFile \u003d JsonUtil.readJsonFile(INVALID_EXPENSE_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                JsonSerializableExpenseList.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void toModelType_duplicateExpenses_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonSerializableExpenseList dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_EXPENSE_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                JsonSerializableExpenseList.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableExpenseList.MESSAGE_DUPLICATE_EXPENSE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 9,
      "choonx99": 11,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        userPrefs.setExpenseListFilePath(Paths.get(\"expenselist.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Path prefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(prefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 3,
      "-": 120
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenseList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ExpenseList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonExpenseListStorage expenseListStorage \u003d new JsonExpenseListStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        storageManager \u003d new StorageManager(expenseListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void expenseListReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "         * {@link JsonExpenseListStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonExpenseListStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ExpenseList original \u003d getTypicalExpenseList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        storageManager.saveExpenseList(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ReadOnlyExpenseList retrieved \u003d storageManager.readExpenseList().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertEquals(original, new ExpenseList(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void getExpenseListFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertNotNull(storageManager.getExpenseListFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 4,
      "choonx99": 10,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditExpenseDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Amount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.expense.Currency;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * A utility class to help with building EditExpenseDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class EditExpenseDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private EditExpenseDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public EditExpenseDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public EditExpenseDescriptorBuilder(EditExpenseDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.descriptor \u003d new EditExpenseDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns an {@code EditExpenseDescriptor} with fields containing {@code expense}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public EditExpenseDescriptorBuilder(Expense expense) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        descriptor.setName(expense.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        descriptor.setAmount(expense.getAmount());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        descriptor.setCurrency(expense.getCurrency());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        descriptor.setDate(expense.getDate());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        descriptor.setTags(expense.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Sets the {@code Name} of the {@code EditExpenseDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public EditExpenseDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Sets the {@code Amount} of the {@code EditExpenseDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public EditExpenseDescriptorBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        descriptor.setAmount(new Amount(amount));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Sets the {@code Currency} of the {@code EditExpenseDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public EditExpenseDescriptorBuilder withCurrency(String currency) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        descriptor.setCurrency(new Currency(currency));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Sets the {@code Date} of the {@code EditExpenseDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public EditExpenseDescriptorBuilder withDate(String date) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        descriptor.setDate(new Date(date));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditExpenseDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public EditExpenseDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public EditExpenseDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 1,
      "choonx99": 76,
      "muhammadaljunied": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExpenseBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Amount;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.expense.Currency;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * A utility class to help with building Expense objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class ExpenseBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"coffee\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String DEFAULT_AMOUNT \u003d \"$23.50\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String DEFAULT_CURRENCY \u003d \"SGD\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"13/10/2019\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private Currency currency;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ExpenseBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        amount \u003d new Amount(DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        currency \u003d new Currency(DEFAULT_CURRENCY);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Initializes the ExpenseBuilder with the data of {@code expenseToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ExpenseBuilder(Expense expenseToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        name \u003d expenseToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        amount \u003d expenseToCopy.getAmount();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        currency \u003d expenseToCopy.getCurrency();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        date \u003d expenseToCopy.getDate();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(expenseToCopy.getTags());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Sets the {@code Name} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ExpenseBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Expense} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ExpenseBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Sets the {@code Amount} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ExpenseBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.amount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Sets the {@code Currency} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public ExpenseBuilder withCurrency(String currency) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.currency \u003d new Currency(currency);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Sets empty {@code Date} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ExpenseBuilder withDate() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.date \u003d new Date();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Sets the {@code Date} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ExpenseBuilder withDate(String date) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public Expense build() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return new Expense(name, amount, currency, date, tags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 10,
      "choonx99": 76,
      "muhammadaljunied": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExpenseListBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ExpenseList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * A utility class to help with building ExpenseList objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": " *     {@code ExpenseList ab \u003d new ExpenseListBuilder().withExpense(\"Coffee\", \"Tea\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class ExpenseListBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private ExpenseList expenseList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ExpenseListBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expenseList \u003d new ExpenseList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ExpenseListBuilder(ExpenseList expenseList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.expenseList \u003d expenseList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Adds a new {@code Expense} to the {@code ExpenseList} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ExpenseListBuilder withExpense(Expense expense) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expenseList.addExpense(expense);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ExpenseList build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return expenseList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExpenseUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CURRENCY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * A utility class for Expense."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class ExpenseUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns an add command string for adding the {@code expense}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static String getAddCommand(Expense expense) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getExpenseDetails(expense);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns the part of command string for the given {@code expense}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static String getExpenseDetails(Expense expense) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        sb.append(PREFIX_NAME + expense.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        sb.append(PREFIX_AMOUNT + expense.getAmount().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        sb.append(PREFIX_DATE + expense.getDate().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expense.getTags().stream().forEach("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        );"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns the part of command string for the given {@code EditExpenseDescriptor}\u0027s details."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static String getEditExpenseDescriptorDetails(EditExpenseDescriptor descriptor) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        descriptor.getAmount().ifPresent(amount -\u003e sb.append(PREFIX_AMOUNT).append(amount.value).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        descriptor.getCurrency().ifPresent(amount -\u003e sb.append(PREFIX_CURRENCY).append(amount.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        descriptor.getDate().ifPresent(date -\u003e sb.append(PREFIX_DATE).append(date.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 2,
      "choonx99": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RawExpenseBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Amount;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.expense.Currency;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * A utility class to help with building Expense objects with raw date."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public class RawExpenseBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"coffee\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String DEFAULT_AMOUNT \u003d \"$23.50\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String DEFAULT_CURRENCY \u003d \"SGD\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"13/10/2019\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private Currency currency;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public RawExpenseBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        amount \u003d new Amount(DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        currency \u003d new Currency(DEFAULT_CURRENCY);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Initializes the RawExpenseBuilder with the data of {@code expenseToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public RawExpenseBuilder(Expense expenseToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        name \u003d expenseToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        amount \u003d expenseToCopy.getAmount();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        currency \u003d expenseToCopy.getCurrency();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        date \u003d expenseToCopy.getDate();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(expenseToCopy.getTags());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Sets the {@code Name} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public RawExpenseBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Expense} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public RawExpenseBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Sets the {@code Amount} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public RawExpenseBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.amount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Sets the {@code Currency} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public RawExpenseBuilder withCurrency(String currency) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.currency \u003d new Currency(currency);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Sets the {@code Date} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public RawExpenseBuilder withDate(String date) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Expense build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return new Expense(name, amount, currency, date, tags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 79,
      "muhammadaljunied": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns the middle index of the expense in the {@code model}\u0027s expense list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return Index.fromOneBased(model.getFilteredExpenseList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns the last index of the expense in the {@code model}\u0027s expense list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return Index.fromOneBased(model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns the expense in the {@code model}\u0027s expense list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static Expense getExpense(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return model.getFilteredExpenseList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalExpenses.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_RUM;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_VODKA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CURRENCY_RUM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CURRENCY_VODKA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_RUM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_VODKA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_RUM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_VODKA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_ALCOHOL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DRINKS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ExpenseList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * A utility class containing a list of {@code Expense} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class TypicalExpenses {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final Expense TRANSPORT \u003d new ExpenseBuilder().withName(\"Bus\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        .withCurrency(\"SGD\").withAmount(\"$3.20\").withDate(\"13/10/2019\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        .withTags(\"school\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final Expense FOOD \u003d new ExpenseBuilder().withName(\"Lunch\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        .withCurrency(\"SGD\").withAmount(\"$4.50\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        .withDate(\"14/12/2019\").withTags(\"lunch\", \"school\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final Expense SHOPPING \u003d new ExpenseBuilder().withName(\"Adidas shoe\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        .withCurrency(\"SGD\").withAmount(\"$120.00\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        .withDate(\"24/12/2019\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final Expense GROCERIES \u003d new ExpenseBuilder().withName(\"Groceries\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        .withCurrency(\"SGD\").withAmount(\"$17.80\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        .withDate(\"1/2/2019\").withTags(\"groceries\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final Expense VALENTINES \u003d new ExpenseBuilder().withName(\"Chocolates\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        .withCurrency(\"SGD\").withAmount(\"$12.30\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        .withDate(\"13/2/2019\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final Expense CHRISTMAS \u003d new ExpenseBuilder().withName(\"Socks\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        .withCurrency(\"SGD\").withAmount(\"$5.00\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        .withDate(\"24/12/2019\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final Expense NEWYEAR \u003d new ExpenseBuilder().withName(\"Cheese\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        .withCurrency(\"SGD\").withAmount(\"$10.00\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        .withDate(\"31/12/2019\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final Expense FURNITURE \u003d new ExpenseBuilder().withName(\"Sofa\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        .withCurrency(\"SGD\").withAmount(\"$700.00\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        .withDate(\"6/9/2019\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final Expense SNACKS \u003d new ExpenseBuilder().withName(\"Chips\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        .withCurrency(\"SGD\").withAmount(\"$1.20\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        .withDate(\"2/3/2019\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    // Manually added - Expense\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final Expense VODKA \u003d new ExpenseBuilder().withName(VALID_NAME_VODKA)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        .withCurrency(VALID_CURRENCY_VODKA).withAmount(VALID_AMOUNT_VODKA)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        .withDate(VALID_DATE_VODKA).withTags(VALID_TAG_ALCOHOL).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final Expense RUM \u003d new ExpenseBuilder().withName(VALID_NAME_RUM)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        .withCurrency(VALID_CURRENCY_RUM).withAmount(VALID_AMOUNT_RUM)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        .withDate(VALID_DATE_RUM).withTags(VALID_TAG_DRINKS, VALID_TAG_ALCOHOL)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String KEYWORD_MATCHING_SOFA \u003d \"Sofa\"; // A keyword that matches SOFA"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private TypicalExpenses() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns an {@code ExpenseList} with all the typical expenses."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static ExpenseList getTypicalExpenseList() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ExpenseList ab \u003d new ExpenseList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        for (Expense expense : getTypicalExpenses()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            ab.addExpense(expense);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static List\u003cExpense\u003e getTypicalExpenses() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(TRANSPORT, FOOD, SHOPPING, GROCERIES, VALENTINES, CHRISTMAS, NEWYEAR));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 2,
      "choonx99": 59,
      "muhammadaljunied": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final Index INDEX_FIRST_EXPENSE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final Index INDEX_SECOND_EXPENSE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final Index INDEX_THIRD_EXPENSE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 3,
      "-": 9
    }
  }
]
