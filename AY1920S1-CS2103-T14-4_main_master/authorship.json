[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d MYMorise - Manage Your Money"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103-T14-4/main[image:https://travis-ci.org/AY1920S1-CS2103-T14-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "https://ci.appveyor.com/project/Cary-Xx/main/branch/master[image:https://ci.appveyor.com/api/projects/status/lg8ga460l5xgq9ab/branch/master?svg\u003dtrue[Build Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103-T14-4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103-T14-4/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* MYMorise - Manage Your Money is a personal expense manager application ."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* It is a Java sample application intended for students and young adults to manage their personal daily expenses."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d\u003d Target Users"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Our target users are students and young adults."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "This group of people are usually too busy to remember every single expense in their daily life which makes it difficult for them to keep track of their spending."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "MYMorise hopes to resolve this issue by being their expense manager and helping them to keep their spendings in check."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d\u003d Why use MYMorise?"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Have you experienced moments where your money seem to always be gone, then you remembered that you\u0027ve used it on something but you just can\u0027t recall exactly where/what you have spent your money on?"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Or maybe you just want a platform to record your spendings so that you can better manage them the next time?"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "If that\u0027s the case, then MYMorise is the perfect application for you!"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "With MYMorise, you won\u0027t have to worry about forgetting where your money went because MYMorise will MEMorise your spendings for you in this neat little application!"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "With just a few lines away, you can easily record your daily expenses and view them beautifully graphed into charts that will allow you to easily pinpoint categories/items that you have been overspending on."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Let your mind rest and focus on the more important things in life, allow MYMorise to memorise your spendings for you starting today!"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* The original source of this sample application was created by SE-EDU at https://se-education.org"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 13,
      "choonx99": 12,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    compile group: \u0027org.apache.commons\u0027, name: \u0027commons-lang3\u0027, version: \u00273.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    archiveName \u003d \u0027MYMorise.jar\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        \u0027site-name\u0027: \u0027MYMorise\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103-T14-4/main\u0027,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        \u0027site-seedu\u0027: false,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 5,
      "muhammadaljunied": 2,
      "-": 151
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "MYMorise was developed by the https://github.com/orgs/AY1920S1-CS2103-T14-4/ team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d Muhammad Aljunied"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "image::muhammadaljunied.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "{empty}[http://github.com/m133225[github]] [\u003c\u003cmuhammadaljunied#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Role: Team Lead, Developer +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Responsibilities: Documentation Quality, Scheduling and tracking, IntelliJ Expert"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Components:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d Ng Choon Wah"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "image::choonx99.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "{empty}[https://github.com/choonx99[github]] [\u003c\u003cchoonx99#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Responsibilities: Deliverables/Deadlines."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Components:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d Lim Xuan Hui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "image::limxuanhui.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "{empty}[http://github.com/limxuanhui[github]] [\u003c\u003climxuanhui#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Responsibilities: Testing"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Components:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d\u003d\u003d Ziheng Xiu"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "image::cary-xx.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "{empty}[http://github.com/Cary-Xx[github]] [\u003c\u003ccary-xx#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Responsibilities: Code Quality, Integration, Git Expert"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Components:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 2,
      "muhammadaljunied": 23,
      "-": 30
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103-T14-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* *Email us* : You can also reach us at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    Ng Choon Wah      : e0310972@u.nus.edu"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    Xiu Ziheng        : e0140856@u.nus.edu"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    Muhammad Aljunied : muhammadaljunied@u.nus.edu"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    Joseph Lim        : limxuanhui@u.nus.edu"
      }
    ],
    "authorContributionMap": {
      "choonx99": 6,
      "muhammadaljunied": 1,
      "-": 5
    }
  },
  {
    "path": "docs/DevOps.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d MYMorise - Dev Ops"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-T14-4/main/blob/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "//TODO:Update DevOps"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "A project often depends on third-party libraries. For example, MYMorise depends on the https://github"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ".com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 5,
      "-": 45
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d MYMorise - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-T14-4/main/blob/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "By: `Team T14-4`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `ExpenseListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "choonx99"
        },
        "content": ".  `Logic` uses the `MymParser` class to parse the user command."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "choonx99"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding an expense)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* stores a `BudgetList` object that represents the user\u0027s budgets."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* stores an `ExpenseList` object that represents the user\u0027s untagged expenses."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* stores an `ExchangeData` object that represents the foreign exchange rates for conversion of currencies."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cExpense\u003e` and an unmodifiable `ObservableList\u003cBudget\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to either list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* can save `Budget` objects in json format and read it back."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* can save `Expense` objects in json format and read it back."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* can read `Exchange` objects in json format."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d\u003d\u003d Budget Feature"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "choonx99"
        },
        "content": "The Budget feature allows users to track their expenses in relation to the budget set. Expenses created by the user after a budget is set and falls into a budget period will"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "choonx99"
        },
        "content": "automatically be added into that budget."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "choonx99"
        },
        "content": "The feature allows the user to view a list of all the budgets created in the app. From the list of budgets, users may view any specific budget"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "choonx99"
        },
        "content": "showing all the expenses allocated into the budget, along with the amount left in the budget."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Users may add, delete, edit a budget as well as the expenses inside the budget."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "choonx99"
        },
        "content": "The `BudgetList` stores all the budgets created in the App. To facilitate the adding, deleting and editing of budgets, the BudgetList provides a"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "choonx99"
        },
        "content": "few operations such as: +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "choonx99"
        },
        "content": "`BudgetList#addBudget(budget)` - Add a new budget into the list of budgets in the budget list. +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "choonx99"
        },
        "content": "`BudgetList#setBudget(budget, editedBudget)` - Edit a current existing budget to a different budget +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "choonx99"
        },
        "content": "`BudgetList#removeBudget(budget)` - Remove a specified budget"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Given below is an activity diagram to show how a budget is added."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "choonx99"
        },
        "content": "image::AddBudgetActivityDiagram.png[]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Given below is an activity diagram to show how an expense is added after the implementation of budget."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "choonx99"
        },
        "content": "image::AddExpenseActivityDiagram.png[]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Given below is a class diagram of a Budget."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "choonx99"
        },
        "content": "image::BudgetClassDiagram.png[]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Notice that the budget consists of 2 Amounts and 2 Dates. +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "choonx99"
        },
        "content": "The 2 Amounts refer to the Budget Amount set by the user and the Budget Amount"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "choonx99"
        },
        "content": "currently left after deducting all expenses in the budget. +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "choonx99"
        },
        "content": "The 2 Dates refer to the Start Date of the Budget and the End Date of the budget. All expenses added after the budget is created,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "choonx99"
        },
        "content": "and fall within this 2 dates, will be automatically added into the budget."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Given below is an example of a object diagram of a newly created Budget."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "choonx99"
        },
        "content": "image::BudgetObjectDiagram.png[]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "choonx99"
        },
        "content": "The Budget consists of an ExpenseList which holds all expenses added into the Budget."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "choonx99"
        },
        "content": "There were 2 main design choices we had to choose from for the implementation of the Budget Feature. +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "choonx99"
        },
        "content": "*Aspect: A single source of truth* +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "choonx99"
        },
        "content": "The model consists of an expense list and a budget list."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "choonx99"
        },
        "content": "- *Alternative 1:* Have a master expense list to store all expenses created and a budget list that consist of an internal"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "choonx99"
        },
        "content": "expense list that stores copies of the expenses from master expense list that fall into the budget. In this option, commands that affect expenses, will require"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "choonx99"
        },
        "content": "an update in the master expense list and the expense lists inside budgets affected. +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    * Pros: Easy to implement, easy to keep track of a overall expenses."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    * Cons: Multiple objects of the same expense. An update to an expense in the overall expense list will require a same update"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            to the same expense located in the budget. May result in bugs when commands affect expenses."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "choonx99"
        },
        "content": "- *Alternative 2:* Have a default expense list that stores only expenses that do not fall into a budget, and a budget list that consist"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "choonx99"
        },
        "content": "of an internal expense list that stores the expenses that fall into a budget when the expense is added or edited. In this option, there is only"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "choonx99"
        },
        "content": "1 copy of any expense created by the user. Any edit or delete of an expense affects directly to the original expense object."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    * Pros: Achieve a single source of truth. Does not introduce possible bugs that may be present if there were multiple copies of the same expense."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    * Cons: More complex to implement. In order to view all expenses in the app, the program will have to loop through the default expense list"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            and the expense lists of every single budget."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "choonx99"
        },
        "content": "*Alternative 2* was chosen. Reason is because a single source of truth would eliminate duplicate entries of the same data. This would"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "choonx99"
        },
        "content": "also reduce the possibility of bugs that may come with duplicate entries."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d\u003d\u003d AutoComplete Feature"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Autocomplete is facilitated by several parts."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "The logic part is implemented through `java.seedu.address.logic.search` package which contains `AutoComplete` and"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "`BinarySearch`."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "The model is constructed through `java.seedu.address.model.autocomplete` which contains `AutoCompleteModel` and `Word`."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "The Ui part is implemented through `java.seedu.address.ui.QueryCard` on top of `CommandBox`."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Given below is an example usage scenario and how the autocomplete mechanism behaves at each step. (p.s. details are"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "omitted)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Step 1. The user launches MYMorise and the user will be prompted to enter a command as shown in the command box."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Step 2. User enter `a` and the listener is triggered. Then `AutoComplete#initAc()` and"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "`AutoComplete#getSuggestions()` is invoked."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Step 3. `initAc()` calls `AutoComplete#readWordsFromFile()` which reads the vocabulary from our local dictionary to get"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "the database and then construct an `AutocompleteModel` with the vocabulary read."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Step 4. `getSuggestions(input)` calls `AutocompleteModel#allMatches()` which utilises the improved version of binary"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "search algorithm `BinarySearch`. The algorithm will return the first and last index of potential matched results."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Since the result is based on a pre-order for sorting, all the words inside this range will be the qualified ones."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Step 5. The listview of `QueryCard` will be updated based on the words and weights given and attached to the"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "`TextField`."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "The following sequence diagram shows how autocomplete operation works:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "image::AutocompleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "The following activity diagram summarizes what happens when a user enter something new."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "image::AutocompleteActivityDiagram.png[]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How Autocomplete works"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "In terms of the retrieving suggestion list, an enhanced binary search algorithm is used. Since a word (which"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "represents a autocomplete term) has a name and weight, the default \"vocabulary\" will be first sort based on weight"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "and for same weight, sort alphanumerically."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "In terms of replacing the target term to the `TextField`, 2 approaches are proposed"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* **Approach 1 (current choice)**: 2 listeners were added. 1) 1st listener for `TextFormatter`, this is especially"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "utilised"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "to retrieving the updated cursor position, which is where it outperforms. 2) 2nd listener for"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "`TextInputControl`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "to detect the text change of `TextField`. Then combined with previously returned caret position, we can replace the"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "corresponding position with target term (the one user selected)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* **Approach 2**. 1 listener for `caretProperty` is added to detect the change of position of caret (i.e., cursor)."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "This approach is simpler with regard to logic but more complicated during implementation. Since caret position change"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "does not necessarily mean textField change, therefore extra check would be required, also resulting in"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "potential inaccuracy."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "In terms of user interaction, different listeners are added for different valid actions (e.g. press TAB, ENTER and"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "navigate using UP and DOWN) to make user benefit by typing faster."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d\u003d\u003d History Feature"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "History is mainly facilitated by `CommandHistory` with `HistoryPointer`. When the app starts, a `CommandHistory`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "instance is created and any command executed (no matter valid or not) will be saved to a list of history commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "And when the user calls the `history`, the overall history list will display on the `resultDisplayPanel`. And when"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "user press *F3* and *F4* to navigate through the history list, the `HistoryPointer` will point to corresponding"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "history."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Similar to Section 3.1, the history displayed on `textField` is facilitated by `KeyEventListener`. When the keyinput"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "event of *F3* or *F4* is triggered, it will navigate to previous input and next input correspondingly."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "The following class diagram illustrates the interaction between `historyCommand` and other parts:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "image::HistoryClassDiagram.png[]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "The following sequence diagram illustrates the flow of how history commands works:"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "image::HistorySequenceDiagram.png[]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d Currency Conversion"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "The Currency conversion is achieved by having a default base currency that all expenses and budgets use if one is not specified. The expenses that are stored"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "with a different currency can be converted from the base currency and back. Every time a currency is specified, the present day exchange rate is stored with the expense. This"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "is to ensure that the expense value is timeless."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "This was implemented in the `java.seedu.address.model.exchangedata` package, which contains `ExchangeDataSingleton`, `ExchangeData`, and `Rates`. These classes facilitate retrieval of exchange rates that will be requested from various parts of the app, namely `Expense` and `Budget`."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Step 1*"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "The foreign currency exchange rates are downloaded for the app to use from http://exchangeratesapi.io/[ExchangeRatesAPI.io] using their endpoint `https://api.exchangeratesapi.io/latest?base\u003dSGD`. The endpoint returns the data in JSON format, which works well with the existing JSON based storage used for `Expense` and `Budget`. This was implemented in the `java.seedu.address.commons.utils` package containing `HttpsClientUtil` which facilitates the Asynchronous calls to the endpoint to update the local copy of the foreign currency exchange rates upon app startup."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Step 2*"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "The JSON response is persisted on disk. A default data-set of exchange rates will be generated at runtime (but not stored) in the case of unstable or no internet access if one is not yet present. If one was present however a more recent one could not be downloaded, the existing data will be reused."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Step 3*"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "If the exchange data is present as a JSON, it will first be loaded into its JSON reflection class `JsonAdaptedExchangeData` which depends on `JsonAdaptedRates`. These classes assist in the conversions of the JSON to the Model Class `ExchangeData`."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    Presently, ExchangeData is also stored in the StorageManager which was intended to be used to store multiple instances of ExchangeData to load historical exchange rates when the user does an edit, however this proved to be infeasible to implement within the course of the project."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Step 4*"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "The `ExchangeDataSingleton` is updated with the new  `ExchangeData` using the `ExchangeDataSingleton#updateInstance`. The reason for using the Singleton pattern in this case was to ensure that one and only one instance of `ExchangeData` is being referenced to retrieve data at any point in time. Since it is also required to be accessed by `Expense` and `Budget`."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Step 5*"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Conversions are done in `Expense#getConvertedAmount` for conversion back into the base currency (SGD) and `Expense#getConvertedAmount(Currency currency)` for conversions to any other currency. As most transactions in the app that require the conversion of currency involve an expense (including recomputing `amountLeft` of `Budget`), the computation is done in the expense. The following are the instance where the currency is converted:"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Whenever an expense is displayed on the `ExpenseCard` or `CommandResult`, its converted value will be computed and displayed together with its conversion rate and original amount."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "The following sequence diagram shows how currency conversion works:"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "image::CurrencyConversionSequenceDiagram.png[]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "There were 3 main design choices we had to choose from for the implementation of the Currency Conversion Feature. +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "- *Alternative 1:* Do not store currency rates when expenses are added with a selected currency and simply store the currency. +"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    * Pros: Easy to implement, recompute the amount of the expense based on the present day currency exchange rate."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Cons: If there was a crash in any currency, the expense amount will no longer be timeless. For instance, if an expense of of 10 MYR was stored today and was converted to 3 SGD (converted at 3.33), then the exchange rate became 2.0 the following day, the budget would reflect the amount left wrongly when it was recomputed the next day."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "- *Alternative 2:* Persist all the exchange rates to file every time the app is launched to ensure that the user\u0027s expenses are computed based on the exchange rate that was on that specific day. The specific exchange rate used is not stored in the expense itself."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Pros: Achieve timeless expense which will provide the most accurate values when computing the budget amount left."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Cons: Slightly harder to implement as there are multiple sources for exchange rate data based on dates. This will also bloat the amount of space requirement of the app as time persists."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "- *Alternative 3:* Store the specific exchange rate used together with the expense whenever it is added, update the exchange rates daily and only persist the latest rates."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Pros: Achieve timeless expense which will provide the most accurate values when computing the budget amount left, without the need to store historical exchange rates. Reduced space used and single source of truth for computing exchange rates."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Cons: Expenses added in the past that have their currencies changed will not be able to use the exchange rate of that specific day."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Alternative 3* was chosen as it was a balance between the cons across all 3 considerations, and the timelessness of an expense carries more weight than the unlikely event that the user would need to alter the currency of a past expense."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* has a need to manage expenses,"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* requires categorization of expenses,"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* prefer desktop apps,"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* prefers CLI type interfaces."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Value proposition*:"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* manage expenses faster than a typical mouse/GUI driven app."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* easily view spending metrics."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[width\u003d\"80%\",cols\u003d\"1%,\u003c25%,\u003c25%,\u003c40%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "4.+| *Basic Functionality*"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "choonx99"
        },
        "content": "|`* * *` |user |create an expense |"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "choonx99"
        },
        "content": "|`* * *` |user |create an expense with a tag |identify my expenses by tags"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "choonx99"
        },
        "content": "|`* * *` |user |retrieve all expenses |review my spending"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "|`* * *` |user |find an expense name |locate a specific expense without having to go through the entire list"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "|`* * *` |user |edit an expense |change the expense amount, date or tag"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "|`* * *` |user |delete an expense |"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "|`* *` |user |terminate a recurring expense |"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "|`* *` |user |retrieve all expenses for today |review my spending for the day"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "choonx99"
        },
        "content": "|`* *` |user |create a recurring expense |don\u0027t have to input recurring expenses every time"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "choonx99"
        },
        "content": "|`* *` |user |retrieve list of all recurring expenses |view all my recurring expenses"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "choonx99"
        },
        "content": "|`* *` |user |retrieve all expenses for the week |review my spending for the week"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "choonx99"
        },
        "content": "|`* *` |user |retrieve all expenses for the month |review my spending for the month"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "choonx99"
        },
        "content": "|`* *` |user |retrieve all expenses for the year |review my spending for the year"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "4.+| *Budgeting*"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "choonx99"
        },
        "content": "|`* * *` |user |set a budget for a period |track my expenses according to the budget amount"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "choonx99"
        },
        "content": "|`* * *` |user |delete a budget |remove a budget that is not needed anymore"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "choonx99"
        },
        "content": "|`* * *` |user |edit a budget |change my budget details"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "choonx99"
        },
        "content": "|`* * *` |user |view a list of my budgets |see what budgets i have already set"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "choonx99"
        },
        "content": "|`* * *` |user |view a budget |know my expenses and how much I have left to spend in the budget"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "choonx99"
        },
        "content": "|`* *` |user |be notified every time I add an expense if I have less than 50% of my budget left  |notify myself that i may be spending too much according to my budget"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "4.+| *UI*"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "choonx99"
        },
        "content": "|`* * *` |user |view in a pie chart expenditure breakdown by tag |view my expenses easily with visual aid"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "choonx99"
        },
        "content": "|`* * *` |user |view in a pie chart how much of my budget is spent/available for the current month |view how much of my budget is left"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "|`* *` |user |view in a bar chart my expenditure | visualise my spending habits"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "4.+| *Inputs*"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "|`* *` |user | recall commands previously used in session | improve my productivity"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "choonx99"
        },
        "content": "|`*` |user | command autocomplete suggestions| improve my productivity"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "4.+| *Multi-Currency*"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "choonx99"
        },
        "content": "|`* * *` |user | set my default currency for tracking |"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "choonx99"
        },
        "content": "|`* *` |user | store expenses in a specific currency | track expenses in a different currency"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "choonx99"
        },
        "content": "|`* *` |user | automatically convert the expense to my default currency | track expenses of different currency in terms of my default currency"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "_{More may be added}_"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Note: For all use cases below, the *System* is `MYMorise(MYM)`, the *Actor* is the `user` and the *Precondition* is"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "choonx99"
        },
        "content": "`MYMorise is running`, unless specified otherwise)."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Inputs specified in a square bracket i.e [input] are optional inputs from the user."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[#_UC01]"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d UC01 - Get Help +"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* The list of all commands will be shown."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User requests for help."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ". MYM responds with the list of all commands."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//[none]"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//*Extensions*"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//[none]"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//* 1a. AltScene1"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//+"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//Use case ends."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//* 2a. AltScene2"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//+"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//Use case ends."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//* 3a. AltScene3"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//+"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//[none]"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//** 3a1. A"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//+"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//Use case resumes at step 2."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "//_{More may be added}_"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[#_UC02]"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d UC02 - Create an expense +"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* A new expense will be added into MYM if valid data were specified."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User requests to add an expense specifying data."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ". MYM creates and stores the expense with the specified data."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* 1a. MYM detects an error in entered data."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "** 1a1. MYM informs the user what data was invalid."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[#_UC03]"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d UC03 - Create a recurring expense +"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* A new recurring expense with will be added into MYM if valid data were specified."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* A single expense with will be added into MYM if valid data were specified."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User requests to add a recurring expense specifying data."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ". MYM creates and stores the expense with the specified data ."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* 1a. MYM detects an error in entered data."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "** 1a1. MYM informs the user what data was invalid."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[#_UC04]"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d UC04 - Retrieve all expenses +"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Preconditions: MYMorise is running, there is at least 1 expense stored."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* A list of all expenses is shown."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User requests to see all expenses."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ". MYM shows all expenses."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* 1a. User requests to see all expenses made today."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "** 1a1. MYM shows a list of all expenses made today."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* 1b. User requests to see all expenses made for the current week."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "** 1b1. MYM shows a list of all expenses made for the current week."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* 1c. User requests to see all expenses made for the current month."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "** 1c1. MYM shows a list of all expenses made for the current month."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* 1d. User requests to see all expenses made for the specified date range."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "** 1d1. MYM shows a list of all expenses made for the the specified date range."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[#_UC05]"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d UC05 - Retrieve all recurring expenses +"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Preconditions: MYMorise is running, there is at least 1 recurring expense stored. +"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* A list of all recurring expenses is shown."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User requests to see for all recurring expenses."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ". MYM shows a list of all expenses made for the day."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[#_UC06]"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d UC06 - Find an expense +"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Preconditions: MYMorise is running, there is at least 1 recurring expense stored. +"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* A list of all expenses containing the specified keyword if any were found"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User requests for all expenses containing a keyword."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ". MYM shows a list of all expenses containing the keyword."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* 1a. No expenses contain the keyword specified."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "** 1a1. MYM informs user that no matching expenses were found."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[#_UC07]"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d UC07 - Update an expense +"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Preconditions: MYMorise is running, there is at least 1 expense stored. +"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* The expense selected for editing will be updated with the new data."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User  \u003c\u003c_UC04, requests to see all expenses (UC04).\u003e\u003e"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User reviews the list of expenses."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User requests to update an expense from the list and provides the new data."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ". MYM updates the selected expense with the new data."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* 2a. User decides not to edit the expense."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* 2b. User could not locate the expense to be edited."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* 3a. MYM detects an error in entered data."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "** 3a1. MYM informs the user what data was invalid."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[#_UC08]"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d UC08 - Delete an expense +"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Preconditions: MYMorise is running, there is at least 1 expense stored. +"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* The expense specified for deletion will be deleted."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User \u003c\u003c_UC04, requests to see all expenses (UC04).\u003e\u003e"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User reviews the list of expenses."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User requests to delete the expense with a specific index from the list."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ". MYM deletes the expense with the specified index."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* 2a. User decides not to delete the expense."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* 2b. User could not locate the expense to be deleted."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* 3a. MYM detects an error in entered data."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "** 3a1. MYM informs the user what data was invalid."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[#_UC09]"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d UC09 - Delete a recurring expense +"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Preconditions: MYMorise is running, there is at least 1 recurring expense stored. +"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* The recurring expense specified for deletion will be deleted."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User \u003c\u003c_UC05, requests to see all recurring expenses (UC05)\u003e\u003e"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User reviews the list of recurring expenses."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User requests to delete the recurring expense with a specific index from the list."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ". MYM deletes the expense with the specified index."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* 2a. User decides not to delete the recurring expense."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* 3a. MYM detects an error in entered data."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "** 3a1. MYM informs the user what data was invalid."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[#_UC10]"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d\u003d\u003d UC10 - Set a budget for a specific period +"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* The budget will be set to a specified amount for a specific period."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "choonx99"
        },
        "content": ". User requests to set the budget, specifying the amount, the start date and the end date of the period."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "choonx99"
        },
        "content": ". MYM sets the budget for the amount and period specified."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* 1a. MYM detects an error in the entered data."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "choonx99"
        },
        "content": "** 1a1. MYM requests for the correct data."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "choonx99"
        },
        "content": "** 1a2. User enters new data."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "choonx99"
        },
        "content": "** Steps 1a1-1a2 are repeated until the data are correct."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "choonx99"
        },
        "content": "** Use case resumes from step 2."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "choonx99"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* 1b. MYM detects a budget period clash."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "choonx99"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "choonx99"
        },
        "content": "** 1b1. MYM requests for different period dates."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "choonx99"
        },
        "content": "** 1b2. User enters new data."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "choonx99"
        },
        "content": "** Steps 1b1-1b2 are repeated until the dates do not clash with existing budget periods."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "choonx99"
        },
        "content": "** Use case resumes from step 2."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[#_UC11]"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d UC11 - Visualize funds left for current month +"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Preconditions: MYMorise is running, \u003c\u003c_UC11,A budget should have been set (UC10)\u003e\u003e +"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Visualization of funds left for current month will be updated."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User \u003c\u003c_UC02, creates an expense (UC02)\u003e\u003e *OR* User \u003c\u003c_UC07, updates an expense (UC07)\u003e\u003e *OR* User \u003c\u003c_UC08, deletes an expense (UC08)\u003e\u003e"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ". MYM updates the visualization of funds left for the month."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[#_UC12]"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d UC12 - Notify when funds are \u003c 50% +"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Preconditions: MYMorise is running, \u003c\u003c_UC11,A budget should have been set (UC10)\u003e\u003e +"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* The user is notified that funds are low, if resulting budget balance is \u003c 50%."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User \u003c\u003c_UC02, adds an expense (UC02)\u003e\u003e"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* 1a. Resulting budget balance is \u003c 50%"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "** 1a1. MYM informs the user the new budget balance and that funds are running low."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[#_UC13]"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d UC13 - Visualize expenditure +"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Visualisation of expenditure will be shown if there is sufficient data."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User \u003c\u003c_UC04, requests for all expenses\u003e\u003e"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ". MYM updates visualization based on expenses requested in Step 1."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* 2a. There are no expenditures."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "** 2a1. MYM informs User that there is not enough data to visualise expenditure breakdown by tag."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[#_UC14]"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d UC14 - Visualize expenditure breakdown by tag +"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Breakdown by tag visualisation will be shown if there is sufficient data."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User \u003c\u003c_UC02, creates an expense (UC02)\u003e\u003e *OR* User \u003c\u003c_UC07, updates an expense (UC07)\u003e\u003e *OR* User \u003c\u003c_UC08, deletes an expense (UC08)\u003e\u003e"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ". MYM updates the breakdown of expenditure by tag visualisation."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* 2a. There are no expenditures."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "** 2a1. MYM informs User that there is not enough data to visualise expenditure breakdown by tag."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[#_UC15]"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d UC15 - Recall commands previously used in current session +"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Commands used previously can be cycled through by the user if there are previously used commands in the current session."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User request for previous command."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". Step 1 is repeated till user found the target command."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* 1a. No prior commands entered."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[#_UC16]"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d UC16 - Set default currency of expenses +"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* MYMorise will convert display amounts in the specified currency, if the specified currency is valid.."
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User requests to set the default currency"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ". MYM converts all expenses into the defualt currency and updates the display."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* 1a. The specified currency is not valid."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "** 1a1. MYM informs the user that the currency specified is not valid."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[#_UC17]"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d UC17 - Create expense with specific currency +"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* A new expense with the specified currency will be added into MYM if the specified data is valid."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User requests to create an expense specifying required data."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ". MYM creates and stores the expense with the specified data."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* 1a. MYM detects an error in entered data."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "** 1a1. MYM informs the user what data was invalid."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[#_UC18]"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d UC18 - Automatically convert expenses in foreign currencies to default currency +"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Preconditions: Preconditions: MYMorise is running, at least 1 expense stored in foreign currency +"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Expense will display expense amount in both default and foreign currencies"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "but all computations will default converted amount."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User \u003c\u003c_UC17,  creates an expense with specific currency\u003e\u003e"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ". User \u003c\u003c_UC05, requests for all expenses\u003e\u003e"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ". MYM shows list of expenses. Expenses with foreign currencies are shown together with their default currency converted"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "amounts."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "+"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "_{More may be added}_"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ".  (Technical) Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ".  (Capacity, Performance) Should be able to hold up to 10000 expenses without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ".  (Scalability) Should be able to handle expense amounts up to 10^12^."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ".  (Process) Project should be production ready by 11th November 2019."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d\u003d\u003d Deleting an expense"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "choonx99"
        },
        "content": ". Deleting an expense while all expenses are listed"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "choonx99"
        },
        "content": ".. Prerequisites: List all expenses using the `list` command. Multiple expenses in the list."
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "choonx99"
        },
        "content": "   Expected: First expense is deleted from the list. Details of the deleted expense shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "choonx99"
        },
        "content": "   Expected: No expense is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 118,
      "choonx99": 115,
      "muhammadaljunied": 498,
      "-": 336
    }
  },
  {
    "path": "docs/Documentation.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d MYMorise - Documentation"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-T14-4/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingPlantUml#, UsingPlantUml.adoc\u003e\u003e to find out how to create and update the UML diagrams in the developer guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Template"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 2,
      "-": 121
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d MYMorise - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-T14-4/main/blob/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.Main` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level3` repo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level3`), you should do the following:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocumentation#Docs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, AddressBook\u0027s architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 2,
      "-": 82
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d MYMorise - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 1,
      "-": 50
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d MYMorise - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "By: `Team T14-4`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "*MYMorise -- Manage Your Money(MYM)* is a desktop application for those who *prefer tracking personal expenses on their"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "computers*. With MYMorise, you can easily see your daily expenses as well as a summary, along with other useful"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "functionalities. More importantly, MYMorise is *optimized for those who prefer to work with Command Line Interface (CLI)* while still having the benefits of a *Graphical User Interface"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "(GUI)*. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "****"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "*Things to note in MYMorise:*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* Expense - refers to the cost incurred in or required for something which the user would like to record"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* Budget - refers to an estimate of income and expenditure for a set period of time."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* Default expense list - refers to all expenses that do not fall into any budgets in MYMorise."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* The amounts used in MYMorise can only work for numbers up to 2 decimal places."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* MYMorise\u0027s GUI consists of 3 display panels:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    The left panel - displays all expenses recorded in MYMorise. User commands do not reference from this panel and should not be made based on this panel. Commands made should reference from the centre panel. The purpose of this panel is solely for displaying all expenses recorded only."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    The centre panel - displays the current view requested by user. All commands made are in relative to the content displayed in this panel. That is, if a user enters the command `listBudgets` or `view 1`, this panel will reflect the content requested. Subsequent commands such as `editExpense` and `editBudget` will reference from this panel. On start up, the centre panel displays the default expense list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    The right panel - displays the visual graphics of the content shown in the centre panel only."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "****"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ".  Download the latest `MYMorise.jar`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ".  Copy the jar file to the folder you want to use as the home folder for MYMorise."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ".  Run `java -jar path_to_folder/MYMorise.jar` in your CLI. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "image::UIUG.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* *`listDefaultExpenses`* : lists all expenses that do not fall into any budget."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* **`expense`**`n/Textbook a/23.50 t/education` : adds an expense named `Textbook` to the expense list with the tag"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "`education`."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* **`delete`**`3` : deletes the 3rd item shown in the centre list panel."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/Bread t/Food` or as `n/Bread`."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Displays all CLI commands available. +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d\u003d\u003d Listing all expenses in the default expense list : `listDefaultExpenses`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Shows a list of all expenses that do not fall into any budgets in MYMorise. +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Format: `listDefaultExpenses`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d\u003d\u003d Listing all budgets in the budget list : `listBudgets`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Shows a list of all budgets. +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Format: `listBudgets`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choonx99"
        },
        "content": "An example is provided to show how the listBudgets command will result after the call."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": "image::ListBudgetUI.png[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d\u003d\u003d Adding an expense: `expense`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Adds an expense to track.* +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Format: `expense n/NAME a/AMOUNT [c/CURRENCY] [d/DATE] [t/TAG]…​`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "An expense with no currency specified will have the default currency set (SGD)."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choonx99"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choonx99"
        },
        "content": "An expense with no date specified will default to current date and time of addition."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choonx99"
        },
        "content": "User may input time in the format \"HHMM\" in the [d/DATE] portion to specify current date with specified time"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "choonx99"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choonx99"
        },
        "content": "If user wants to add an expense onto the last day of a month, just specify the day to be 31 and it will automatically be added onto the last day of the month. +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "choonx99"
        },
        "content": "E.g., if user wants to add an expense to the last day of April but is unsure of which day is the last day, just specify date to be 31/4/2019 and it will be added to 30th April 2019 (last day of April). +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "choonx99"
        },
        "content": "This tip works on budget dates too!"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* `expense n/Coffee a/1.80 t/food`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* `expense n/Textbook a/23.50 t/education`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "choonx99"
        },
        "content": "*An added expense may automatically fall into a budget if the date of expense"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "choonx99"
        },
        "content": "falls into a budget period. Otherwise it will fall into the default expense list."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "choonx99"
        },
        "content": "An example is provided to show how the expense command will result after the call."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "choonx99"
        },
        "content": "image::AddExpenseUI.png[]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d\u003d\u003d Adding a budget : `budget`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Specifies a budget for a period beginning from the specified start date to an end date. +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Format: `budget n/NAME a/AMOUNT [c/CURRENCY] d/STARTDATE ed/ENDDATE`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* Sets a budget for a period beginning from STARTDATE (dd/MM/yyyy) to ENDDATE (dd/MM/yyyy) (inclusive). All expenses made during"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "choonx99"
        },
        "content": "that period after the budget is set, will be included into the budget and the budget will deduct the expense"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "choonx99"
        },
        "content": "to indicate how much funds are left available to spend."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* Only expenses made that fall into the budget period after the budget is set will"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "choonx99"
        },
        "content": "be included into the budget. Expenses created before the budget is set but falls into the budget period"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "choonx99"
        },
        "content": "will not be included into the budget. They will remain in the default expense list."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* Budgets may not have overlapping dates. +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Example: There is an existing budget with"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "choonx99"
        },
        "content": "start date 12/1/2019 and end date 18/1/2019, then new budgets to be added cannot have start date and/or"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "choonx99"
        },
        "content": "end dates from 12/1/2019 to 18/1/2019 (inclusive)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "choonx99"
        },
        "content": "****"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "choonx99"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "choonx99"
        },
        "content": "A budget with no currency specified will have the default currency set."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "choonx99"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "choonx99"
        },
        "content": "User may input time in the format \"HHMM\" in the [d/DATE] portion to specify current date with specified time"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* `budget n/Japan Travel a/4000 c/USD d/9/10/2019 ed/19/10/2019` +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Sets a budget of SGD4000 for the period from Wed, 9th Oct 2019 to Sat, 19th Oct 2019."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* `budget n/January 2019 Budget a/800 c/SGD d/1/1/2019 ed/31/1/2019` +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Sets a budget of SGD800 for the period from Tue, 1st Jan 2019 to Thu, 31st Jan 2019."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "choonx99"
        },
        "content": "An example is provided to show how the budget command will result after the call."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "choonx99"
        },
        "content": "image::AddBudgetUI.png[]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d\u003d\u003d Viewing a budget : `view`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Views an existing budget in the budget list. +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Format: `view INDEX`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "choonx99"
        },
        "content": "****"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* Views the expenses stored in the budget, and shows the percentage amount of money left in the budget."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "choonx99"
        },
        "content": "****"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "choonx99"
        },
        "content": "An example is provided to show how the View command will result after the call."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "choonx99"
        },
        "content": "image::ViewBudgetUI.png[]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d\u003d\u003d Editing an expense : `editExpense`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Edits an existing expense in the expense list. +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Format: `editExpense INDEX [n/NAME] [a/AMOUNT] [c/CURRENCY] [t/TAG]…`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* Edits the expense at the specified `INDEX`. The index refers to the index number shown in the displayed expense"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "list. The index *must be a positive integer* 1, 2, 3, …​ The index is relative to what is displayed on the GUI rather"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "choonx99"
        },
        "content": "than the actual index of the expense in the expense list."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* The user has to be viewing an expense list to edit an expense."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* When editing tags, the existing tags of the expense will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* You can remove all the expense’s tags by typing `t/`  without specifying any tags after it."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* `editExpense 1 a/20.10` +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Edits the amount of the first expense to be `20.10`."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* `editExpense 2 n/Poets Coffee t/` +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Replaces the name of the second expense to `Poets Coffee` and clears the existing tag."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d\u003d\u003d Editing a budget : `editBudget`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Edits an existing budget in the budget list. +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Format: `editBudget INDEX [n/NAME] [a/AMOUNT] [c/CURRENCY]…`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* Edits the budget at the specified `INDEX`. The index refers to the index number shown in the displayed budget list."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "choonx99"
        },
        "content": "The index *must be a positive integer* 1, 2, 3, …​ The index is relative to what is displayed on the GUI rather than"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "choonx99"
        },
        "content": "the actual index of the budget in MYMorise."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* `editBudget 1 n/Japan Travel a/4000` +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Edits the name and the amount of the first budget to `Japan Travel` and `4000` respectively."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* `editBudget 2 c/USD` +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Edits the currency of the second budget to `USD` only. Other fields remain unchanged."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d\u003d\u003d Deleting an item : `delete`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Deletes the item at the specified index.* +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* Deletes the item at the specified INDEX."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* The index refers to the index number shown in the displayed list."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, …​"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "choonx99"
        },
        "content": " The index is relative to what is displayed on the GUI rather than the actual index of the stored items."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "choonx99"
        },
        "content": "*The item to be deleted depends on the current view state. If the user is currently viewing"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "choonx99"
        },
        "content": "a list of expenses, then delete will delete the expense specified by index. If the user"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "choonx99"
        },
        "content": "is currently viewing a list of budgets, then delete will delete the budget specified by index."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "choonx99"
        },
        "content": "*While viewing list of expenses*"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* `listDefaultExpenses` +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Deletes the second expense in the default expense list in MYMorise."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* `find n/Coffee` +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Deletes the first expense in the results of the find command."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "choonx99"
        },
        "content": "*While viewing list of budgets*"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* `listBudgets` +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "choonx99"
        },
        "content": "`delete 2`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Deletes the second budget in the budget list in MYMorise."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "choonx99"
        },
        "content": "An example is provided to show how the Delete command will result after the call when user is viewing the default expense list."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Before calling Delete:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "choonx99"
        },
        "content": "image::BeforeDeleteUI.png[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "choonx99"
        },
        "content": "After calling Delete:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "choonx99"
        },
        "content": "image::AfterDeleteUI.png[]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d Automatic currency conversion for foreign currencies"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "MYMorise is able to automatically display foreign currencies in the default currency set by the user. By default this is set"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "to Singapore Dollars (SGD). The conversions are done in the following scenarios:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* When an expenses specifies a currency that is not the default currency"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* When an expense specifies a currency that is different from that budget it is associated to."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "This automatic conversion allows for the computation of budgets and expenses regardless of their underlying currencies to provide"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "a cleaner experience when viewing budgets and expenses with multiple differing currencies."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "The latest Foreign Exchange data for a limited set of supported currencies are updated whenever the application is launched. The list of supported currencies are as follows:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "[width\u003d\"80%\",cols\u003d\"10%,10%,10%,10%,10%,10%,10%,10%,10%,10%,10%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "| CAD | HKD | ISK | PHP | DKK | HUF | CZK | GBP | RON | SEK | IDR"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "| INR | BRL | RUB | HRK | JPY | THB | CHF | EUR | MYR | BGN | TRY"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "| CNY | NOK | NZD | ZAR | USD | MXN | SGD | AUD | ILS | KRW | PLN"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d\u003d\u003d Clearing a list : `clear`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Deletes all items in the current list.* +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Using `clear` while viewing an expense list will delete all expenses in that list. +"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Using `clear` while viewing the budget list will delete all budgets in the list."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "choonx99"
        },
        "content": "An example is provided to show how the Clear command will result after the call when user is viewing a specific budget."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Before calling Clear:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "choonx99"
        },
        "content": "image::BeforeClearUI.png[]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "choonx99"
        },
        "content": "After calling Clear:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "choonx99"
        },
        "content": "image::AfterClearUI.png[]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d\u003d\u003d Autocomplete"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Equip with IDE-like autocomplete function for faster input and"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "choonx99"
        },
        "content": "enables users to quickly fill in command arguments with"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "choonx99"
        },
        "content": "autocomplete suggestions."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Suggestions include commonly used words in MYMorise and users may customize the suggestion list by changing the"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "`vocabulary.txt`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "choonx99"
        },
        "content": "When the user types, if there are suggestions for a certain input, user can press kbd:[tab] to autofill the first"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "choonx99"
        },
        "content": "suggestion or press kbd:[DOWN] and kbd:[UP] to navigate between suggestions and then press kbd:[tab] or kbd:[enter]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "choonx99"
        },
        "content": "to autofill the selected item. User may also just kbd:[click] on an item to autofill."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d\u003d\u003d Retrieve the history of the commands executed: `history`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Returns the list of history commands executed."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Press kbd:[F3] to navigate to previous input; Press kbd:[F4] to navigate to next input;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Use keyboard to navigate through the history will only take effect when the focus is in `TextField`."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "kbd:[UP] and kbd:[DOWN] cannot be used here to navigate through the history since they are used to navigate through"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "the autocomplete suggestions."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "// tag::saving[]"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Expense and Budget data are saved in the hard disk automatically after any command that changes the data."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "// end::saving[]"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d\u003d\u003d Locating expenses by name: `find` `[coming in v2.0]`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Finds all expenses by name, date, tag. +"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Format: `find [n/NAME] [d/DATE] [t/TAG]`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "choonx99"
        },
        "content": "****"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* Search by name and tag is case insensitive. e.g hans will match Hans"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* Search by date must use the date format `dd/MM/yyyy`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* Only the fields provided are searched."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* Only whole words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "choonx99"
        },
        "content": "****"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* `find n/Coffee` +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Returns `coffee` and `Starbucks Coffee`."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* `find n/Cheesecake` +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Returns any expense having names `Cheesecake`, eg: `Strawberry Cheesecake`, `Blueberry Cheesecake`."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d Set a Recurring Expense `[coming in v2.0]`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "choonx99"
        },
        "content": "_{Sets a recurring expense for a specific duration and frequency.}_"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d Undo/Redo commands `[coming in v2.0]`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "choonx99"
        },
        "content": "_{Allows user to undo and redo commands.}_"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d\u003d\u003d FAQ"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "choonx99"
        },
        "content": "*A*: Run the app in the other computer and overwrite the empty data file it creates with the file that contains the data from your MYMorise/data folder."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* *List Default Expenses* : `listDefaultExpenses`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* *List Budgets* : `listBudgets`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* *Add Expense* : `expense n/NAME a/AMOUNT [c/CURRENCY] [d/DATE] [t/TAG]…` +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "choonx99"
        },
        "content": "e.g. `expense n/Coffee a/2.00 c/SGD t/nourishment t/school`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* *Add Budget* : `budget n/NAME a/AMOUNT [c/CURRENCY] d/STARTDATE ed/ENDDATE`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "choonx99"
        },
        "content": "e.g. `budget n/Japan Travel a/4000 c/USD d/9/10/19 ed/19/10/19`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* *View Budget* : `view INDEX`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* *Edit Expense* : `editExpense INDEX [n/NAME] [a/AMOUNT] [c/CURRENCY] [t/TAG]…​` +"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "choonx99"
        },
        "content": "e.g. `editExpense 2 n/Starbucks Coffee t/nourishment`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* *Edit Budget* : `editBudget INDEX [n/NAME] [a/AMOUNT] [c/CURRENCY]` +"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "choonx99"
        },
        "content": "e.g. `editBudget 3 n/Korea Travel c/KRW`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* *Find* : `find [n/NAME] [d/DATE] [t/TAG]` +"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "choonx99"
        },
        "content": "e.g. `find n/Coffee d/13/12/2019 t/nourishment` +"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "choonx99"
        },
        "content": "e.g. `find t/nourishment`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* *History*: `history`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* *Exit* : `exit`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 50,
      "choonx99": 189,
      "muhammadaljunied": 20,
      "-": 107
    }
  },
  {
    "path": "docs/diagrams/AddBudgetActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": ":User executes AddExpense command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u0027diamond"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "if () then ([budget does not exist])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    \u0027diamond"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    if () then ([budget period doesn\u0027t clash with existing budgets])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        : add budget into the budget list;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        : Update UI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        : Save default expense list and budget list;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    else ([else])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        : user receives budget clash message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    : user receives budget duplicate message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "endif"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "stop"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "choonx99": 18
    }
  },
  {
    "path": "docs/diagrams/AddExpenseActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": ":User executes AddExpense command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u0027diamond"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "if () then ([expense does not exist])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    \u0027diamond"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    if () then ([expense falls into a budget period])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        : get budget which expense falls into;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        : add expense into the budget;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        : add expense into default expense list;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        :Update UI;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        :Save default expense list and budget list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    : user receives expense duplicate message;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "endif"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "stop"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "choonx99": 21
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : getViewState()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "alt BudgetList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteBudget(b)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "else ExpenseList"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteExpense(e)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "end"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveMymorise()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "choonx99": 14,
      "-": 36
    }
  },
  {
    "path": "docs/diagrams/AutocompleteActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "(*)  --\u003e \"user input\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "if \"listener detects input change\" then"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "--\u003e [Yes] \"initialize AC model\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "--\u003e \"get suggestions based on truncated input\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "--\u003e \"display the result on listview\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "--\u003e (*)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "else"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "--\u003e [No] \"display empty listview\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "--\u003e (*)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "endif"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 14
    }
  },
  {
    "path": "docs/diagrams/AutocompleteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "box Ui UI_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "participant \":CommandBox\" as CommandBox UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u0027participant \":QueryCard\" as QueryCard UI_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u0027participant \":TextField\" as TextField UI_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "participant \":AutoComplete\" as AutoComplete LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "participant \":BinarySearch\" as BinarySearch LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "participant \":AutoCompleteModel\" as AutoCompleteModel MODEL_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "participant \":Word\" as Word MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "end box"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "[-\u003e CommandBox : autoCompleteListener()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "activate CommandBox"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "[-\u003e CommandBox : userInput"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "CommandBox -\u003e AutoComplete : initAc()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "activate AutoComplete"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "AutoComplete -\u003e AutoComplete : importDictionary(file)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "AutoComplete -\u003e AutoComplete : data"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "create AutoCompleteModel"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "AutoComplete -\u003e AutoCompleteModel : data"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "activate AutoCompleteModel"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "AutoCompleteModel -\u003e AutoComplete"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "deactivate AutoCompleteModel"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "deactivate AutoComplete"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "CommandBox -\u003e AutoComplete : getSuggestions(userInput)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "activate AutoComplete"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "AutoComplete -\u003e AutoCompleteModel : allMatches(userInput)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "activate AutoCompleteModel"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "create Word"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "AutoCompleteModel -\u003e Word : userInput, weight"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "activate Word"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Word -\u003e AutoCompleteModel"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "deactivate Word"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "AutoCompleteModel -\u003e BinarySearch : firstIndexOf(userInput)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "activate BinarySearch"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "BinarySearch -\u003e AutoCompleteModel : index1"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "deactivate BinarySearch"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "AutoCompleteModel -\u003e BinarySearch : lastIndexOf(userInput)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "activate BinarySearch"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "BinarySearch -\u003e AutoCompleteModel : index2"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "deactivate BinarySearch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "AutoCompleteModel -\u003e AutoComplete : matchedResults"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "deactivate AutoCompleteModel"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "AutoComplete -\u003e CommandBox : matchedResults"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "deactivate AutoComplete"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "CommandBox -\u003e[ : display()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "deactivate CommandBox"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 72
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "ExpenseList *-right-\u003e \"1\" UniqueExpenseList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "ExpenseList *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "UniqueTagList -[hidden]down- UniqueExpenseList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "UniqueTagList -[hidden]down- UniqueExpenseList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "UniqueExpenseList o-right-\u003e Expense"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Expense o-up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Expense *--\u003e Name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Expense *--\u003e Amount"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Expense *--\u003e Date"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 9,
      "-": 11
    }
  },
  {
    "path": "docs/diagrams/BudgetClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Class Budget"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Class Amount"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Class Currency"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Class Date"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Class ExpenseList"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Budget *--\u003e \"1\" Name"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Budget *--\u003e \"2\" Amount"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Budget *--\u003e \"2\" Date"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Budget *--\u003e \"1\" Currency"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Budget *--\u003e \"1\" ExpenseList"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Name -[hidden]right-\u003e Amount"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Amount -[hidden]right-\u003e Date"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "choonx99": 23
    }
  },
  {
    "path": "docs/diagrams/BudgetObjectDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": "object \":Budget\" as o"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "object \"name:Name\" as o2"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "object \"currency:Currency\" as o3"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "object \"startDate:Date\" as o4"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "object \"endDate:Date\" as o5"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "object \"amount:Amount\" as o6"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "object \"amountLeft:Amount\" as o7"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "object \"expenseList:ExpenseList\" as o8"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "object \"expenses:UniqueExpenseList\" as o9"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "o2 : fullName \u003d \"Japan Travel\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "o3 : name \u003d \"JPY\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "o4 : value \u003d \"12 Dec 2019\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "o5 : value \u003d \"18 Dec 2019\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "o6 : value \u003d \"9500\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "o7 : value \u003d \"9500\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "o --\u003e o2"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "o --\u003e o3"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "o --\u003e o4"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "o --\u003e o5"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "o --\u003e o6"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "o --\u003e o7"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "o --\u003e o8"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "o8 --\u003e o9"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "choonx99": 30
    }
  },
  {
    "path": "docs/diagrams/CurrencyConversionSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "box Ui UI_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "participant \":ExpenseListViewCell\" as ExpenseListViewCell UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "participant \":ExpenseCard\" as ExpenseCard UI_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "end box"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "participant \":Expense\" as Expense LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "participant \":ExchangeDataSingleton\" as ExchangeDataSingleton MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "participant \":ExchangeData\" as ExchangeData MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "participant \":Rates\" as Rates UI_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "end box"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[-\u003e ExpenseListViewCell : expense"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "activate ExpenseListViewCell"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "create ExpenseListViewCell"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "create ExpenseCard"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "ExpenseListViewCell -\u003e ExpenseCard : ExpenseCard(expense, index)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "activate ExpenseCard"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "ExpenseCard -\u003e Expense : getConvertedAmount()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "activate Expense"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Expense -\u003e ExchangeDataSingleton : getInstance()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "activate ExchangeDataSingleton"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "ExchangeDataSingleton --\u003e Expense : ExchangeDataInstance"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "deactivate ExchangeDataSingleton"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Expense -\u003e ExchangeData : getRates()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "activate ExchangeData"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "ExchangeData --\u003e Expense : rates"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "deactivate ExchangeData"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Expense -\u003e Rates : getRate(Country)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "activate Rates"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Rates --\u003e Expense : rate"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "deactivate Rates"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Expense --\u003e ExpenseCard : convertedAmount"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "deactivate Expense"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "ExpenseCard --\u003e ExpenseListViewCell : ExpenseCard"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "deactivate ExpenseCard"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "ExpenseListViewCell --\u003e[ : toCaller"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "deactivate ExpenseListViewCell"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 53
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "participant \":MymParser\" as MymParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "LogicManager -\u003e MymParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "activate MymParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "MymParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "DeleteCommandParser --\u003e MymParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "MymParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "DeleteCommandParser --\u003e MymParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e MymParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "MymParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "deactivate MymParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "DeleteCommand -\u003e Model : getViewState()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "alt BudgetList"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "DeleteCommand -\u003e Model : deleteBudget(b)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "else ExpenseList"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "DeleteCommand -\u003e Model : deleteExpense(e)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "end"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "choonx99": 26,
      "-": 58
    }
  },
  {
    "path": "docs/diagrams/HistoryClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Class CommandHistory"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "LogicManager --\u003e CommandHistory"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "HistoryCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 40
    }
  },
  {
    "path": "docs/diagrams/HistorySequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "participant \"h:HistoryCommand\" as HistoryCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "participant \"c:CommandHistory\" as CommandHistory LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "[-\u003e LogicManager : execute(\"history\")"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "LogicManager -\u003e HistoryCommand : execute(model, history)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "activate HistoryCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "HistoryCommand -\u003e CommandHistory : getHistory(history)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "activate CommandHistory"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "CommandHistory -\u003e HistoryCommand : list\u003cHistory\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "deactivate CommandHistory"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "HistoryCommand -\u003e CommandResult : list\u003cHistory\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "CommandResult --\u003e HistoryCommand : commandResult"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "HistoryCommand --\u003e LogicManager : commandResult"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "deactivate HistoryCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 34
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Class MymParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "LogicManager --\u003e\"1\" MymParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "MymParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddExpenseCommand, \\nFindCommand, DeleteCommand, \\nEditBudgetCommand etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 3,
      "choonx99": 1,
      "-": 58
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Interface ReadOnlyExpenseList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Interface ReadOnlyBudgetList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Class ExpenseList"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Class BudgetList"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Class ExchangeData"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Class ReadOnlyExpenseList"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Class ReadOnlyBudgetList"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Package Commons {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Class Amount"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Class Currency"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Class Date"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Package Expense {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Class Expense"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Class UniqueExpenseList"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Package Budget {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Class Budget"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Class UniqueBudgetList"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Package ExchangeData {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Class ExchangeData"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Class ExchangeDataSingleton"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Class Rates"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Package AutoComplete {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Class AutoCompleteModel"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Class Word"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Budget *-down-\u003e \"1\" Name"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Budget *-down-\u003e \"2\" Amount"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Budget *-down-\u003e \"1\" Currency"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Budget *-down-\u003e \"2\" Date"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Budget *-down-\u003e \"1\" ExpenseList"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "ExchangeDataSingleton o-left-\u003e\"1\" ExchangeData"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "ExchangeData o-down-\u003e \"1\" Rates"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "AutoCompleteModel o-right-\u003e\"*\" Word"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "ExpenseList .left.|\u003e ReadOnlyExpenseList"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "ExpenseList *--\u003e \"1\" UniqueExpenseList"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "BudgetList .left.|\u003e ReadOnlyBudgetList"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "BudgetList *-right-\u003e \"1\" UniqueBudgetList"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "UniqueBudgetList o-right-\u003e \"*\" Budget"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "ModelManager o-down-\u003e \"1\" BudgetList"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "ModelManager o-down-\u003e \"1\" ExpenseList"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "ModelManager .left.|\u003e Model"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "ModelManager o-right-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "ModelManager o-down-\u003e \"1\" ExchangeData"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Model .left.\u003e ObservableList"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "UserPrefs .right.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "UniqueExpenseList o-right-\u003e \"*\" Expense"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Expense *-up-\u003e \"1 \" Name"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Expense *-up-\u003e \"1   \" Amount"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Expense *-up-\u003e \"1 \" Currency"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Expense *-up-\u003e \"1   \" Date"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Expense *-up-\u003e \"1 \" Tag"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "ModelManager -down-\u003e\"1\" Expense : filtered list"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "ModelManager -down-\u003e\"1\" Budget : filtered list"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 4,
      "choonx99": 6,
      "muhammadaljunied": 49,
      "-": 32
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Interface ExpenseListStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Interface BudgetListStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Interface ExchangeDataStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Class JsonExpenseListStorage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Class JsonBudgetListStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Class JsonExchangeDataStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "StorageManager o--\u003e ExpenseListStorage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "StorageManager o----\u003e BudgetListStorage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "StorageManager o------\u003e ExchangeDataStorage"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "JsonExpenseListStorage .left.|\u003e ExpenseListStorage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "JsonBudgetListStorage .left.|\u003e BudgetListStorage"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "JsonExchangeDataStorage .left.|\u003e ExchangeDataStorage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "JsonExpenseListStorage .down.\u003e JsonSerializableExpenseList"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "JsonSerializableExpenseList .right.\u003e JsonAdaptedExpense"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "JsonAdaptedExpense .right.\u003e JsonAdaptedCurrency"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "JsonExchangeDataStorage .right.\u003e JsonAdaptedExchangeData"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "JsonAdaptedExchangeData .right.\u003e JsonAdaptedRates"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "JsonBudgetListStorage .down.\u003e JsonSerializableBudgetList"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "JsonSerializableBudgetList .right.\u003e JsonAdaptedBudget"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "JsonAdaptedBudget .right.\u003e JsonSerializableExpenseList"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 6,
      "choonx99": 10,
      "muhammadaljunied": 10,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Class ExpenseListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Class BudgetListPanel"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Class BudgetCard"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Class StatsDisplay"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Class ExpenseCard"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "MainWindow *-down-\u003e ExpenseListPanel"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "MainWindow *-down-\u003e BudgetListPanel"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "MainWindow *-down-\u003e StatsDisplay"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "ExpenseListPanel -down-\u003e ExpenseCard"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "BudgetListPanel -down-\u003e BudgetCard"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "ExpenseListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "BudgetListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "StatsDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "ExpenseCard --|\u003e UiPart"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "BudgetCard --|\u003e UiPart"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "ExpenseCard ..\u003e Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "BudgetCard ..\u003e Model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "StatsDisplay ..\u003e Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "ExpenseListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 8,
      "choonx99": 11,
      "-": 52
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState0.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title Initial state"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class State1 as \"__mym1:ExpenseList__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class State2 as \"__mym2:ExpenseList__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class State3 as \"__mym3:ExpenseList__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "hide State2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState1.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"delete 5\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class State1 as \"__mym1:ExpenseList__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class State2 as \"__mym2:ExpenseList__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class State3 as \"__mym3:ExpenseList__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 3,
      "-": 19
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState2.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "title After command \"add /n Coffee\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class State1 as \"__mym1:ExpenseList__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class State2 as \"__mym2:ExpenseList__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class State3 as \"__mym3:ExpenseList__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 4,
      "-": 16
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState3.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"undo\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class State1 as \"__mym1:ExpenseList__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class State2 as \"__mym2:ExpenseList__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class State3 as \"__mym3:ExpenseList__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState4.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"list\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class State1 as \"__mym1:ExpenseList__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class State2 as \"__mym2:ExpenseList__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class State3 as \"__mym3:ExpenseList__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState5.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"clear\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class State1 as \"__mym1:ExpenseList__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class State2 as \"__mym2:ExpenseList__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class State3 as \"__mym3:ExpenseList__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "note right on link: State mym2 deleted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 4,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "participant \":VersionedExpenseList\" as VersionedExpenseList MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(undo)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(undo)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e AddressBookParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e UndoCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "UndoCommand -\u003e Model : undoExpenseList()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Model -\u003e VersionedExpenseList : undo()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "activate VersionedExpenseList"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "VersionedExpenseList -\u003e VersionedExpenseList :resetData(ReadOnlyExpenseList)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "VersionedExpenseList --\u003e Model :"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "deactivate VersionedExpenseList"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e UndoCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 7,
      "-": 46
    }
  },
  {
    "path": "docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":LogicManager\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":AddressBookParser\" as abp LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Participant \":EditExpenseCommandParser\" as ecp LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Participant \"command:EditExpenseCommand\" as ec LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e logic : execute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "logic -\u003e abp ++: parseCommand(commandText)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "create ecp"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp ++: parse(arguments)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "create ec"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "ecp -\u003e ec ++: index, editPersonDescriptor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "ec --\u003e ecp --"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "ecp --\u003e abp --: command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "abp --\u003e logic --: command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "choonx99": 2,
      "-": 19
    }
  },
  {
    "path": "docs/team/cary-xx.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d Xiu Ziheng - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d\u003d PROJECT: MYMorise"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "MYMorise — Manage Your Money(MYM) is a desktop application for those who prefer tracking personal expenses on their"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "computers. With MYMorise, you can easily see your daily expenses as well as a summary, along with other useful functionalities."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "More importantly, MYMorise is optimized for those who prefer to work with Command Line Interface (CLI) while still"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "having the benefits of a Graphical User Interface (GUI) created with JavaFX. It is written in Java, and has about 20"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "kLoC."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* *Major enhancement*: added *the ability to autocomplete*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "** What it does: Similar to the autocomplete feature in modern IDE, user can press key or click on a selected item to"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "autocomplete"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "** Justification: This feature improves the product significantly because a user can type faster and no longer need"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "to type exactly the same command word. Autocomplete will do this for you."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "analysis of Javafx component as well as searching logic. The implementation too was challenging because several parts"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "need to be combined together and some checks and fixes are also required towards a bug-free autocomplete feature."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using F3/F4 keys"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "and display history command list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "** What it does: The history command helps user to trace the commands he/she entered since he/she starts the app."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Navigation of history using key is also supported."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "** Justification: This feature improves the product significantly because a user can track his/her input history and"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "navigate to any history command without the need to type again if he/she wants to execute previous command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* *Minor enhancement*: rearrange GUI layout and draw piechart for displaying statistics."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003dxiu%20ziheng\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dCary-Xx\u0026tabRepo\u003dAY1920S1-CS2103-T14-4%2Fmain%5Bmaster%5D[Functional code]][https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003dxiu%20ziheng\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dCary-Xx\u0026tabRepo\u003dAY1920S1-CS2103-T14-4%2Fmain%5Bmaster%5D[Test code]]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "*** Set up travis, coverall,etc"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "*** Managed releases `v1.2` - `v1.4` (5 releases) on GitHub"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "*** Managed all PRs on team repo"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "*** Set up base for the app: https://github.com/AY1920S1-CS2103-T14-4/main/pull/24[#24]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "*** Improve existing code quality: https://github.com/AY1920S1-CS2103-T14-4/main/pull/79[#79],"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "https://github.com/AY1920S1-CS2103-T14-4/main/pull/89[#89]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "*** Fix existing bugs: https://github.com/AY1920S1-CS2103-T14-4/main/pull/87[#87],"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "https://github.com/AY1920S1-CS2103-T14-4/main/pull/148[#148]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "*MYMorise -- Manage Your Money(MYM)* is a desktop application for those who *prefer tracking personal expenses on their"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "computers*. With MYMorise, you can easily see your daily expenses as well as a summary, along with other useful"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "functionalities. More importantly, MYMorise is *optimized for those who prefer to work with Command Line Interface (CLI)* while still having the benefits of a *Graphical User Interface"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "(GUI)*. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "****"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "*Things to note in MYMorise:*"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* Expense - refers to the cost incurred in or required for something which the user would like to record"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* Budget - refers to an estimate of income and expenditure for a set period of time."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* Default expense list - refers to all expenses that do not fall into any budgets in MYMorise."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* The amounts used in MYMorise can only work for numbers up to 2 decimal places."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* MYMorise\u0027s GUI consists of 3 display panels:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    The left panel - displays all expenses recorded in MYMorise. User commands do not reference from this panel and should not be made based on this panel. Commands made should reference from the centre panel. The purpose of this panel is solely for displaying all expenses recorded only."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    The centre panel - displays the current view requested by user. All commands made are in relative to the content displayed in this panel. That is, if a user enters the command `listBudgets` or `view 1`, this panel will reflect the content requested. Subsequent commands such as `editExpense` and `editBudget` will reference from this panel. On start up, the centre panel displays the default expense list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    The right panel - displays the visual graphics of the content shown in the centre panel only."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "****"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ".  Download the latest `MYMorise.jar`."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ".  Copy the jar file to the folder you want to use as the home folder for MYMorise."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ".  Run `java -jar path_to_folder/MYMorise.jar` in your CLI. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d\u003d\u003d Autocomplete"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Equip with IDE-like autocomplete function for faster input and"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "enables users to quickly fill in command arguments with"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "autocomplete suggestions."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Suggestions include commonly used words in MYMorise and users may customize the suggestion list by changing the"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "`vocabulary.txt`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "When the user types, if there are suggestions for a certain input, user can press kbd:[tab] to autofill the first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "suggestion or press kbd:[DOWN] and kbd:[UP] to navigate between suggestions and then press kbd:[tab] or kbd:[enter]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "to autofill the selected item. User may also just kbd:[click] on an item to autofill."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d\u003d\u003d Retrieve the history of the commands executed: `history`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Returns the list of history commands executed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Press kbd:[F3] to navigate to previous input; Press kbd:[F4] to navigate to next input;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Use keyboard to navigate through the history will only take effect when the focus is in `TextField`."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "kbd:[UP] and kbd:[DOWN] cannot be used here to navigate through the history since they are used to navigate through"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "the autocomplete suggestions."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "// tag::saving[]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Expense and Budget data are saved in the hard disk automatically after any command that changes the data."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "// end::saving[]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d\u003d\u003d Locating expenses by name: `find` `[coming in v2.0]`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Finds all expenses by name, date, tag. +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Format: `find [n/NAME] [d/DATE] [t/TAG]`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "****"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* Search by name and tag is case insensitive. e.g hans will match Hans"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* Search by date must use the date format `dd/MM/yyyy`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* Only the fields provided are searched."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* Only whole words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "****"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* `find n/Coffee` +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Returns `coffee` and `Starbucks Coffee`."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* `find n/Cheesecake` +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Returns any expense having names `Cheesecake`, eg: `Strawberry Cheesecake`, `Blueberry Cheesecake`."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d\u003d\u003d AutoComplete Feature"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Autocomplete is facilitated by several parts."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "The logic part is implemented through `java.seedu.address.logic.search` package which contains `AutoComplete` and"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "`BinarySearch`."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "The model is constructed through `java.seedu.address.model.autocomplete` which contains `AutoCompleteModel` and `Word`."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "The Ui part is implemented through `java.seedu.address.ui.QueryCard` on top of `CommandBox`."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Given below is an example usage scenario and how the autocomplete mechanism behaves at each step. (p.s. details are"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "omitted)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Step 1. The user launches MYMorise and the user will be prompted to enter a command as shown in the command box."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Step 2. User enter `a` and the listener is triggered. Then `AutoComplete#initAc()` and"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "`AutoComplete#getSuggestions()` is invoked."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Step 3. `initAc()` calls `AutoComplete#readWordsFromFile()` which reads the vocabulary from our local dictionary to get"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "the database and then construct an `AutocompleteModel` with the vocabulary read."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Step 4. `getSuggestions(input)` calls `AutocompleteModel#allMatches()` which utilises the improved version of binary"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "search algorithm `BinarySearch`. The algorithm will return the first and last index of potential matched results."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Since the result is based on a pre-order for sorting, all the words inside this range will be the qualified ones."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Step 5. The listview of `QueryCard` will be updated based on the words and weights given and attached to the"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "`TextField`."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "The following sequence diagram shows how autocomplete operation works:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "image::AutocompleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "The following activity diagram summarizes what happens when a user enter something new."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "image::AutocompleteActivityDiagram.png[]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How Autocomplete works"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "In terms of the retrieving suggestion list, an enhanced binary search algorithm is used. Since a word (which"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "represents a autocomplete term) has a name and weight, the default \"vocabulary\" will be first sort based on weight"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "and for same weight, sort alphanumerically."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "In terms of replacing the target term to the `TextField`, 2 approaches are proposed"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* **Approach 1 (current choice)**: 2 listeners were added. 1) 1st listener for `TextFormatter`, this is especially"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "utilised"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "to retrieving the updated cursor position, which is where it outperforms. 2) 2nd listener for"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "`TextInputControl`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "to detect the text change of `TextField`. Then combined with previously returned caret position, we can replace the"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "corresponding position with target term (the one user selected)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "* **Approach 2**. 1 listener for `caretProperty` is added to detect the change of position of caret (i.e., cursor)."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "This approach is simpler with regard to logic but more complicated during implementation. Since caret position change"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "does not necessarily mean textField change, therefore extra check would be required, also resulting in"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "potential inaccuracy."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "In terms of user interaction, different listeners are added for different valid actions (e.g. press TAB, ENTER and"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "navigate using UP and DOWN) to make user benefit by typing faster."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d\u003d\u003d History Feature"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "History is mainly facilitated by `CommandHistory` with `HistoryPointer`. When the app starts, a `CommandHistory`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "instance is created and any command executed (no matter valid or not) will be saved to a list of history commands."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "And when the user calls the `history`, the overall history list will display on the `resultDisplayPanel`. And when"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "user press *F3* and *F4* to navigate through the history list, the `HistoryPointer` will point to corresponding"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "history."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "Similar to Section 3.1, the history displayed on `textField` is facilitated by `KeyEventListener`. When the keyinput"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "event of *F3* or *F4* is triggered, it will navigate to previous input and next input correspondingly."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "The following class diagram illustrates the interaction between `historyCommand` and other parts:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "image::HistoryClassDiagram.png[]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "The following sequence diagram illustrates the flow of how history commands works:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "image::HistorySequenceDiagram.png[]"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 188,
      "-": 34
    }
  },
  {
    "path": "docs/team/choonx99.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d Ng Choon Wah - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d\u003d PROJECT: MYMorise"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "include::overview.adoc[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* *Major enhancement*: added the ability to create/edit and delete budgets"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "** What it does: allows the user to better manage their expenses by having customizable budgets to track their expenses for them."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "** Justification: This feature is fundamental in an application that tracks expenses. It is important for users to be able to track how much they are spending according to how much has been set aside (budget)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis on every aspect of the app and design alternatives. The implementation too was challenging as it required changes to all existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "** Credits: AddressBook Level 3"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* *Minor enhancements*:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "*** Updated certain existing commands to work well with the major enhancement without creating separate commands. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "These commands include: AddExpense, Delete, Clear, ListDefaultExpenses, EditExpenseCommand. +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Example: Delete command will be able to delete an expense or a budget depending on what the user is viewing instead of creating a separate DeleteBudget command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "*** link:https://github.com/AY1920S1-CS2103-T14-4/main/pull/25[#25] Refactored AddressBook test to MYMorise test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "*** link:https://github.com/AY1920S1-CS2103-T14-4/main/pull/151[#151] Updated the GUI color scheme"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "*** link:https://github.com/AY1920S1-CS2103-T14-4/main/pull/143[#143] Wrote additional tests for existing features to increase coverage from 52% to 60%"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "*** link:https://github.com/AY1920S1-CS2103-T14-4/main/pull/9[#9], link:https://github.com/AY1920S1-CS2103-T14-4/main/pull/18[#18],"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "link:https://github.com/AY1920S1-CS2103-T14-4/main/pull/62[#62], link:https://github.com/AY1920S1-CS2103-T14-4/main/pull/76[#76]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Consistent updates to User Guide, App icon and refactoring it from AddressBook to MYMorise"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d\u003d Code Contributed"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Full code contributed can be found at link:https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003dchoonx99\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[RepoSense]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "*Budget Feature*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d\u003d\u003d Listing all budgets in the budget list : `listBudgets`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Shows a list of all budgets. +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Format: `listBudgets`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "An example is provided to show how the listBudgets command will result after the call."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "image::ListBudgetUI.png[]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d\u003d\u003d Viewing a budget : `view`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Views an existing budget in the budget list. +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Format: `view INDEX`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "****"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* Views the expenses stored in the budget, and shows the amount of money left in the budget."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "****"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "An example is provided to show how the View command will result after the call."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "image::ViewBudgetUI.png[]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d\u003d\u003d Adding a budget : `budget`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Specifies a budget for a period beginning from the specified start date to an end date. +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Format: `budget n/NAME a/AMOUNT [c/CURRENCY] d/STARTDATE ed/ENDDATE`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "****"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* Sets a budget for a period beginning from STARTDATE (dd/MM/yyyy) to ENDDATE (dd/MM/yyyy) (inclusive). All expenses made during"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": "that period after the budget is set, will be included into the budget and the budget will deduct the expense"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "to indicate how much funds are left available to spend."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* Only expenses made that fall into the budget period after the budget is set will"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": "be included into the budget. Expenses created before the budget is set but falls into the budget period"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choonx99"
        },
        "content": "will not be included into the budget. They will remain in the default expense list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* Budgets may not have overlapping dates. +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Example: There is an existing budget with"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "start date 12/1/2019 and end date 18/1/2019, then new budgets to be added cannot have start date and/or"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": "end dates from 12/1/2019 to 18/1/2019 (inclusive)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choonx99"
        },
        "content": "****"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choonx99"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": "A budget with no currency specified will have the default currency set."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choonx99"
        },
        "content": "User may input time in the format \"HHMM\" in the [d/DATE] portion to specify current date with specified time"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* `budget n/Japan Travel a/4000 c/USD d/9/10/2019 ed/19/10/2019` +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Sets a budget of SGD4000 for the period from Wed, 9th Oct 2019 to Sat, 19th Oct 2019."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* `budget n/January 2019 Budget a/800 c/SGD d/1/1/2019 ed/31/1/2019` +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Sets a budget of SGD800 for the period from Tue, 1st Jan 2019 to Thu, 31st Jan 2019."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choonx99"
        },
        "content": "An example is provided to show how the budget command will result after the call."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choonx99"
        },
        "content": "image::AddBudgetUI.png[]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d\u003d\u003d Editing a budget : `editBudget`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Edits an existing budget in the budget list. +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Format: `editBudget INDEX [n/NAME] [a/AMOUNT] [c/CURRENCY]…`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "choonx99"
        },
        "content": "****"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* Edits the budget at the specified `INDEX`. The index refers to the index number shown in the displayed budget list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "choonx99"
        },
        "content": "The index *must be a positive integer* 1, 2, 3, …​ The index is relative to what is displayed on the GUI rather than"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "choonx99"
        },
        "content": "the actual index of the budget in MYMorise."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "choonx99"
        },
        "content": "****"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* `editBudget 1 n/Japan Travel a/4000` +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Edits the name and the amount of the first budget to `Japan Travel` and `4000` respectively."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* `editBudget 2 c/USD` +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Edits the currency of the second budget to `USD` only. Other fields remain unchanged."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d\u003d\u003d Budget Feature"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "choonx99"
        },
        "content": "The Budget feature allows users to track their expenses in relation to the budget set. Expenses created by the user after a budget is set and falls into a budget period will"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "choonx99"
        },
        "content": "automatically be added into that budget."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "choonx99"
        },
        "content": "The feature allows the user to view a list of all the budgets created in the app. From the list of budgets, users may view any specific budget"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "choonx99"
        },
        "content": "showing all the expenses allocated into the budget, along with the amount left in the budget."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Users may add, delete, edit a budget as well as the expenses inside the budget."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "choonx99"
        },
        "content": "The `BudgetList` stores all the budgets created in the App. To facilitate the adding, deleting and editing of budgets, the BudgetList provides a"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "choonx99"
        },
        "content": "few operations such as: +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "choonx99"
        },
        "content": "`BudgetList#addBudget(budget)` - Add a new budget into the list of budgets in the budget list. +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "choonx99"
        },
        "content": "`BudgetList#setBudget(budget, editedBudget)` - Edit a current existing budget to a different budget +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "choonx99"
        },
        "content": "`BudgetList#removeBudget(budget)` - Remove a specified budget"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Given below is an activity diagram to show how a budget is added."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "choonx99"
        },
        "content": "image::AddBudgetActivityDiagram.png[]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Given below is an activity diagram to show how an expense is added after the implementation of budget."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "choonx99"
        },
        "content": "image::AddExpenseActivityDiagram.png[]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Given below is a sequence diagram to show when a Delete command is called."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "choonx99"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Given below is a class diagram of a Budget."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "choonx99"
        },
        "content": "image::BudgetClassDiagram.png[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Notice that the budget consists of 2 Amounts and 2 Dates. +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "choonx99"
        },
        "content": "The 2 Amounts refer to the Budget Amount set by the user and the Budget Amount"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "choonx99"
        },
        "content": "currently left after deducting all expenses in the budget. +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "choonx99"
        },
        "content": "The 2 Dates refer to the Start Date of the Budget and the End Date of the budget. All expenses added after the budget is created,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "choonx99"
        },
        "content": "and fall within this 2 dates, will be automatically added into the budget."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "choonx99"
        },
        "content": "Given below is an example of a object diagram of a newly created Budget."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "choonx99"
        },
        "content": "image::BudgetObjectDiagram.png[]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "choonx99"
        },
        "content": "The Budget consists of an ExpenseList which holds all expenses added into the Budget."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "choonx99"
        },
        "content": "There were 2 main design choices we had to choose from for the implementation of the Budget Feature. +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "choonx99"
        },
        "content": "*Aspect: A single source of truth* +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "choonx99"
        },
        "content": "The model consists of an expense list and a budget list."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "choonx99"
        },
        "content": "- *Alternative 1:* Have a master expense list to store all expenses created and a budget list that consist of an internal"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "choonx99"
        },
        "content": "expense list that stores copies of the expenses from master expense list that fall into the budget. In this option, commands that affect expenses, will require"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "choonx99"
        },
        "content": "an update in the master expense list and the expense lists inside budgets affected. +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    * Pros: Easy to implement, easy to keep track of a overall expenses."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* Cons: Multiple objects of the same expense. An update to an expense in the overall expense list will require a same update"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "choonx99"
        },
        "content": "to the same expense located in the budget. May result in bugs when commands affect expenses."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "choonx99"
        },
        "content": "- *Alternative 2:* Have a default expense list that stores only expenses that do not fall into a budget, and a budget list that consist"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "choonx99"
        },
        "content": "of an internal expense list that stores the expenses that fall into a budget when the expense is added or edited. In this option, there is only"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "choonx99"
        },
        "content": "1 copy of any expense created by the user. Any edit or delete of an expense affects directly to the original expense object."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* Pros: Achieve a single source of truth. Does not introduce possible bugs that may be present if there were multiple copies of the same expense."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "choonx99"
        },
        "content": "* Cons: More complex to implement. In order to view all expenses in the app, the program will have to loop through the default expense list"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "choonx99"
        },
        "content": "and the expense lists of every single budget."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "choonx99"
        },
        "content": "*Alternative 2* was chosen. Reason is because a single source of truth would eliminate duplicate entries of the same data. This would"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "choonx99"
        },
        "content": "also reduce the possibility of bugs that may come with duplicate entries."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "choonx99": 159,
      "muhammadaljunied": 1,
      "-": 32
    }
  },
  {
    "path": "docs/team/limxuanhui.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d PROJECT: MyMorise"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "include::overview.adoc[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 2,
      "-": 70
    }
  },
  {
    "path": "docs/team/muhammadaljunied.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d Muhammad Aljunied - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d PROJECT: MyMorise"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "include::overview.adoc[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* *Major enhancement*: added *the ability for expenses in foreign currencies to be stored and converted*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "** What it does: when an expense is added to MyMorise, the system can automatically convert the amount specified in the expense relative to the currency that was specified in the expense."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "** Justification: This feature improves user experience significantly for managing expenses as the user no longer needs to convert a foreign currency manually back into their home(base) currency."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "** Highlights: This enhancement affects 80% of all functionality of the application as all amounts added to the system may need to be converted to ensure correct computations."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "This required careful planning as as soon as it is implemented, I anticipated a large number of regressions from existing implementations as well as regressions as the other components of the app are implemented."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "The exchange rate for converting the expense\u0027s amount from its base amount to the specified currency is retrieved from the exchange data and stored together with the Expense."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "The reason for this is to ensure that an expense retains its converted value based on the rate at the time it was added, regardless of when the computation is being done."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "As currecy exchange rates are non-constant data, there is a small dependence on retrieving more updated data by making an API call in the form of a HTTP GET request to a publicly available endpoint."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "To ensure MyMorise remains responsive while the call is made, the HTTP Request is executed asynchronously with a strict 5 second timeout (a successful request should not take longer than 5 seconds)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "The fallback in poor/lack of internet conditions is a pre-loaded exchange rate stored in JSON. A successful response stores the exchange rate to the file system for the next run to use if there is no internet connection in subsequent runs, which mitigates conversion-error margins slightly."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "** Credits: _The idea to add it came from a \"if I was using this app\" brainstorming session, however I must credit Budgeting/Finance Apps I had downloaded on Android that I played around, specifically http://wally.me/[WallyNext]_"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* *Minor enhancement*: added support for storing currencies."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003daljunied\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dmuhammadaljunied\u0026tabRepo\u003dAY1920S1-CS2103-T14-4%2Fmain%5Bmaster%5D[Functional code]] [https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003daljunied\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dmuhammadaljunied\u0026tabRepo\u003dAY1920S1-CS2103-T14-4%2Fmain%5Bmaster%5D[Test code]]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d\u003d PRs"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* UG \u0026 DG edits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "https://github.com/AY1920S1-CS2103-T14-4/main/pull/12[#12],"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "https://github.com/AY1920S1-CS2103-T14-4/main/pull/84[#84],"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Implement Currency to Expense"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "https://github.com/AY1920S1-CS2103-T14-4/main/pull/64[#64],"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "https://github.com/AY1920S1-CS2103-T14-4/main/pull/77[#77],"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Bugfixes"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "https://github.com/AY1920S1-CS2103-T14-4/main/pull/144[#144],"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "https://github.com/AY1920S1-CS2103-T14-4/main/pull/150[#150],"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "https://github.com/AY1920S1-CS2103-T14-4/main/pull/156[#156],"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "https://github.com/AY1920S1-CS2103-T14-4/main/pull/159[#159],"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "https://github.com/AY1920S1-CS2103-T14-4/main/pull/161[#161],"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "https://github.com/AY1920S1-CS2103-T14-4/main/pull/163[#163]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "https://github.com/AY1920S1-CS2103-T14-4/main/pull/165[#165]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Exchange data http support"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "https://github.com/AY1920S1-CS2103-T14-4/main/pull/145[#145]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* UI Edits"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "https://github.com/AY1920S1-CS2103-T14-4/main/pull/147[#147]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Refactors for team"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "https://github.com/AY1920S1-CS2103-T14-4/main/pull/149[#149]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Testcases"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "https://github.com/AY1920S1-CS2103-T14-4/main/pull/7156[#156]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Initial format and structure of user guide together with all discussed User Stories"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* stores a `BudgetList` object that represents the user\u0027s budgets."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* stores an `ExpenseList` object that represents the user\u0027s untagged expenses."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* stores an `ExchangeData` object that represents the foreign exchange rates for conversion of currencies."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cExpense\u003e` and an unmodifiable `ObservableList\u003cBudget\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to either list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* can save `Budget` objects in json format and read it back."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* can save `Expense` objects in json format and read it back."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* can read `Exchange` objects in json format."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d Currency Conversion"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "The Currency conversion is achieved by having a default base currency that all expenses and budgets use if one is not specified. The expenses that are stored"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "with a different currency can be converted from the base currency and back. Every time a currency is specified, the present day exchange rate is stored with the expense. This"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "is to ensure that the expense value is timeless."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "This was implemented in the `java.seedu.address.model.exchangedata` package, which contains `ExchangeDataSingleton`, `ExchangeData`, and `Rates`. These classes facilitate retrieval of exchange rates that will be requested from various parts of the app, namely `Expense` and `Budget`."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Step 1*"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "The foreign currency exchange rates are downloaded for the app to use from http://exchangeratesapi.io/[ExchangeRatesAPI.io] using their endpoint `https://api.exchangeratesapi.io/latest?base\u003dSGD`. The endpoint returns the data in JSON format, which works well with the existing JSON based storage used for `Expense` and `Budget`. This was implemented in the `java.seedu.address.commons.utils` package containing `HttpsClientUtil` which facilitates the Asynchronous calls to the endpoint to update the local copy of the foreign currency exchange rates upon app startup."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Step 2*"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "The JSON response is persisted on disk. A default data-set of exchange rates will be generated at runtime (but not stored) in the case of unstable or no internet access if one is not yet present. If one was present however a more recent one could not be downloaded, the existing data will be reused."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Step 3*"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "If the exchange data is present as a JSON, it will first be loaded into its JSON reflection class `JsonAdaptedExchangeData` which depends on `JsonAdaptedRates`. These classes assist in the conversions of the JSON to the Model Class `ExchangeData`."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    Presently, ExchangeData is also stored in the StorageManager which was intended to be used to store multiple instances of ExchangeData to load historical exchange rates when the user does an edit, however this proved to be infeasible to implement within the course of the project."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Step 4*"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "The `ExchangeDataSingleton` is updated with the new  `ExchangeData` using the `ExchangeDataSingleton#updateInstance`. The reason for using the Singleton pattern in this case was to ensure that one and only one instance of `ExchangeData` is being referenced to retrieve data at any point in time. Since it is also required to be accessed by `Expense` and `Budget`."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Step 5*"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "Conversions are done in `Expense#getConvertedAmount` for conversion back into the base currency (SGD) and `Expense#getConvertedAmount(Currency currency)` for conversions to any other currency. As most transactions in the app that require the conversion of currency involve an expense (including recomputing `amountLeft` of `Budget`), the computation is done in the expense. The following are the instance where the currency is converted:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Whenever an expense is displayed on the `ExpenseCard` or `CommandResult`, its converted value will be computed and displayed together with its conversion rate and original amount."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "The following sequence diagram shows how currency conversion works:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "image::CurrencyConversionSequenceDiagram.png[]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "There were 3 main design choices we had to choose from for the implementation of the Currency Conversion Feature. +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "- *Alternative 1:* Do not store currency rates when expenses are added with a selected currency and simply store the currency. +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    * Pros: Easy to implement, recompute the amount of the expense based on the present day currency exchange rate."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Cons: If there was a crash in any currency, the expense amount will no longer be timeless. For instance, if an expense of of 10 MYR was stored today and was converted to 3 SGD (converted at 3.33), then the exchange rate became 2.0 the following day, the budget would reflect the amount left wrongly when it was recomputed the next day."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "- *Alternative 2:* Persist all the exchange rates to file every time the app is launched to ensure that the user\u0027s expenses are computed based on the exchange rate that was on that specific day. The specific exchange rate used is not stored in the expense itself."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Pros: Achieve timeless expense which will provide the most accurate values when computing the budget amount left."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Cons: Slightly harder to implement as there are multiple sources for exchange rate data based on dates. This will also bloat the amount of space requirement of the app as time persists."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "- *Alternative 3:* Store the specific exchange rate used together with the expense whenever it is added, update the exchange rates daily and only persist the latest rates."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Pros: Achieve timeless expense which will provide the most accurate values when computing the budget amount left, without the need to store historical exchange rates. Reduced space used and single source of truth for computing exchange rates."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "* Cons: Expenses added in the past that have their currencies changed will not be able to use the exchange rate of that specific day."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "*Alternative 3* was chosen as it was a balance between the cons across all 3 considerations, and the timelessness of an expense carries more weight than the unlikely event that the user would need to alter the currency of a past expense."
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 118,
      "-": 29
    }
  },
  {
    "path": "docs/team/overview.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "MYMorise — Manage Your Money(MYM) is a desktop application for those who prefer tracking personal expenses on their"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "computers. With MYMorise, you can easily see your daily expenses as well as a summary, along with other useful functionalities."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "More importantly, MYMorise is optimized for those who prefer to work with Command Line Interface (CLI) while still"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "having the benefits of a Graphical User Interface (GUI) created with JavaFX. It is written in Java, and has about 20 kLoC."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "choonx99": 1,
      "muhammadaljunied": 4
    }
  },
  {
    "path": "docs/tutorials/TracingCode.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Tracing a Command Execution Path"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/tracing"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "part of the effort to write new code.  ...[Therefore,] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "path through the code base. One easy way to trace an execution path is to use a debugger to step through the code."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you will be using the IntelliJ IDEA\u0027s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture sequence diagram from the developer guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows _between_ the main components. That is, it does not show details of"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "the execution path _inside_ each component. By hiding those details, the diagram succeeds in informing the reader"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "about the overall execution path of a command without overwhelming the reader with too much details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Read the _Architecture_ section of the DG"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting a break point"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "user input i.e., somewhere in the UI component, and then trace through how the execution proceeds through the UI component."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "However, the execution path through a GUI is often somewhat obscure due to various _event-driven mechanisms_"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "`seedu.address.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the `Search for target by name` feature. `Navigate` \u003e `Symbol`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "image::Execute.png[]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we\u0027re looking for. However, it is just an"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "`Interface`. Let\u0027s delve further and find the implementation of the interface by using the `Find Usages` feature in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ IDEA."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".`Find Usages` tool window. `Edit` \u003e `Find` \u003e `Find Usages`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::FindUsages.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo! `MainWindow#executeCommand()` seems to be exactly what we\u0027re looking for!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "image:LeftGutter.png[]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tracing the execution path"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[a/ADDRESS] [t/TAG]...` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".Taking notes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Over the course of the debugging session, you will encounter every major component in the application. Try to jot down"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". To start the debugging session, simply `Run` \u003e `Debug Main`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". The Debugger tool window should show up and look something like this:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:DebuggerStep1.png[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the `Show execution point` feature to jump to the line of code that we stopped at:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "image:ShowExecutionPoint.png[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". We are interested in the `logic.execute(commandText)` portion of that line so let\u0027s `Step in` into that method call:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepInto.png[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ". We end up in `LogicManager#execute()`. Let\u0027s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".LogicManager#execute()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     //Logging, safe to ignore"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     CommandResult commandResult;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     //Parse user input from String to a Command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     //Executes the Command and stores the result"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         // since it\u0027s being stored here."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     return commandResult;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ". `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let\u0027s take a closer"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "look at each one."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` the logging code since it is of no interest to us now."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepOver.png[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "`commandWord` and `arguments` :"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image:Variables.png[]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ". We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into the `switch`, we obviously stop at"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "choonx99"
        },
        "content": "case EditExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    return new EditExpenseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "choonx99"
        },
        "content": ". Let\u0027s see what `EditExpenseCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "obtain the arguments and index required."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".Stepping out"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them!"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ". The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "`editPersonDesciptor` through the `Variable` tool window."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image:EditCommand.png[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence diagram below shows the details of the execution path through the Logic component."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Does the execution path you traced in the code so far matches with the diagram?"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".Tracing an `edit` command through the Logic component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicSequenceDiagram.png[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ". Now let\u0027s see what happens when we call `command#execute()`!"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "choonx99"
        },
        "content": ".EditExpenseCommand#execute()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ". As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ". We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ". Again, it appears that the heavy lifting is delegated. Let\u0027s take a look at ``JsonSerializableAddressBook``\u0027s"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "constructor."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".JsonSerializableAddressBook#JsonSerializableAddressBook()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": " * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    persons.addAll("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        source.getPersonList()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "              .stream()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "              .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "              .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ". It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ". We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into ``resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());``, we end up in:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".ResultDisplay#setFeedbackToUser()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ". Finally, we step through until we reach the end of `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "this tutorial, you learned more about the inner workings of AddressBook and how the various components mesh together"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "to form one cohesive product."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".What\u0027s next?"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "do further tracing for the given commands to find exactly what happens."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ". In this tutorial, we traced the \"happy path\" (i.e., no errors). What do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "instead? What exceptions do you think will be thrown(if any), where will the exceptions be thrown and where will they be"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "handled?"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".. `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ". What components will you have to modify to perform the following enhancements to the application?"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".. Make command words case-insensitive"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".. Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".. Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new command"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new field to `Person`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new entity to the address book"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      }
    ],
    "authorContributionMap": {
      "choonx99": 4,
      "-": 254
    }
  },
  {
    "path": "src/main/java/seedu/address/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 5,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static seedu.address.model.commons.Currency.DEFAULT_BASE_CURRENCY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.concurrent.ExecutionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.commons.util.HttpsClientUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.BudgetList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ExpenseList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ReadOnlyBudgetList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.exchangedata.ExchangeData;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.exchangedata.ExchangeDataSingleton;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.storage.BudgetListStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.storage.ExchangeDataStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.storage.ExpenseListStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.storage.JsonBudgetListStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.storage.JsonExchangeDataStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.storage.JsonExpenseListStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 4, 0, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing MYMorise ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        ExpenseListStorage expenseListStorage \u003d new JsonExpenseListStorage(userPrefs.getExpenseListFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        BudgetListStorage budgetListStorage \u003d new JsonBudgetListStorage(userPrefs.getBudgetListFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        ExchangeDataStorage exchangeDataStorage \u003d new JsonExchangeDataStorage(userPrefs.getExchangeDataFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        storage \u003d new StorageManager(expenseListStorage, budgetListStorage, exchangeDataStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s expense list and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * The data from the sample expense list will be used instead if {@code storage}\u0027s expense list is not found,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * or an empty expense list will be used instead if errors occur when reading {@code storage}\u0027s expense list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Optional\u003cReadOnlyExpenseList\u003e expenseListOptional;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Optional\u003cExchangeData\u003e exchangeDataOptional;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Optional\u003cReadOnlyBudgetList\u003e budgetListOptional;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        ReadOnlyExpenseList initialData;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        ExchangeData initialExchangeData;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ReadOnlyBudgetList initialBudgets;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            //Ensure data folder exists"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            if (!Files.exists(Path.of(\"data\"))) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                    Files.createDirectory(Path.of(\"data\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            // Download updated data"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                HttpsClientUtil.getLatestExchangeData(DEFAULT_BASE_CURRENCY);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            } catch (ExecutionException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            // Read from file"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            exchangeDataOptional \u003d storage.readExchangeData();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            if (!exchangeDataOptional.isPresent()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                logger.info(\"Data file not found/corrupted. Will be starting with a sample ExchangeData\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            initialExchangeData \u003d exchangeDataOptional.orElseGet(SampleDataUtil::getSampleExchangeData);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            ExchangeDataSingleton.updateInstance(initialExchangeData);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty ExpenseList\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            initialExchangeData \u003d SampleDataUtil.getSampleExchangeData();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ExpenseList\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            initialExchangeData \u003d SampleDataUtil.getSampleExchangeData();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            expenseListOptional \u003d storage.readExpenseList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            if (!expenseListOptional.isPresent()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample ExpenseList\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            initialData \u003d expenseListOptional.orElseGet(SampleDataUtil::getSampleExpenseList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty ExpenseList\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            initialData \u003d new ExpenseList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ExpenseList\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            initialData \u003d new ExpenseList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            budgetListOptional \u003d storage.readBudgetList();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            if (!budgetListOptional.isPresent()) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample BudgetList\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            initialBudgets \u003d budgetListOptional.orElseGet(SampleDataUtil::getSampleBudgetList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty BudgetList\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            initialBudgets \u003d new BudgetList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty BudgetList\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            initialBudgets \u003d new BudgetList();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return new ModelManager(initialData, initialBudgets, initialExchangeData, userPrefs);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default config properties\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default user prefs\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ExpenseList\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        logger.info(\"Starting ExpenseList \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping MYMorise ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 15,
      "choonx99": 23,
      "muhammadaljunied": 50,
      "-": 163
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 700;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 1350;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 2,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 2,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX \u003d \"The expense index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String MESSAGE_INVALID_BUDGET_DISPLAYED_INDEX \u003d \"The budget index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MESSAGE_EXPENSES_LISTED_OVERVIEW \u003d \"%1$d expenses listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MESSAGE_EXPENSE_LISTED_OVERVIEW \u003d \"%1$d expense listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 3,
      "choonx99": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 1,
      "-": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause   of the main exception"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 1,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 3,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 2,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/HttpsClientUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.net.URI;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.net.http.HttpClient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.net.http.HttpRequest;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.net.http.HttpResponse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.concurrent.CompletableFuture;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.concurrent.ExecutionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Handles all HTTP/S Requests"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class HttpsClientUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static HttpClient client \u003d HttpClient.newBuilder()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        .version(HttpClient.Version.HTTP_1_1)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public HttpsClientUtil() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static boolean getLatestExchangeData(String base) throws ExecutionException, InterruptedException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        // Build request"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        HttpRequest request \u003d HttpRequest.newBuilder()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .uri(URI.create(\"https://api.exchangeratesapi.io/latest?base\u003d\" + base))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .timeout(Duration.ofSeconds(5))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .header(\"Content-Type\", \"application/json\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .GET()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        // Validatation"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        CompletableFuture\u003cBoolean\u003e isSuccess \u003d CompletableFuture.supplyAsync(() -\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            Files.exists(Path.of(\"data/exchangedata.json\")));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        // Async call to endpoint"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return client.sendAsync(request, HttpResponse.BodyHandlers.ofFile(Paths.get(\"data/exchangedata.json\")))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .thenApply(HttpResponse::body)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .thenCompose(path -\u003e isSuccess).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath                   cannot be null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e      The generic type to create an instance of"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 4,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 2,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/CommandHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Stores the history of commands executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final ObservableList\u003cString\u003e userInputHistory \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final ObservableList\u003cString\u003e unmodifiableUserInputHistory \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            FXCollections.unmodifiableObservableList(userInputHistory);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public CommandHistory() {}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public CommandHistory(CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        userInputHistory.addAll(commandHistory.userInputHistory);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void add(String userInput) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        userInputHistory.add(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns an unmodifiable view of {@code userInputHistory}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return unmodifiableUserInputHistory;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return userInputHistory.equals(other.userInputHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return userInputHistory.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ReadOnlyBudgetList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns the ExpenseList."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @see Model#getExpenseList()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ReadOnlyExpenseList getExpenseList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns an unmodifiable view of the list of expenses"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ObservableList\u003cExpense\u003e getExpenses();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of expenses"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ObservableList\u003cExpense\u003e getFilteredExpenseList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of all expenses including those in budgets"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    //    ObservableList\u003cExpense\u003e getFilteredFullExpenseList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns the user prefs\u0027 expense list file path."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    Path getExpenseListFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns the BudgetList."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @see Model#getBudgetList()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    ReadOnlyBudgetList getBudgetList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of budgets"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    ObservableList\u003cBudget\u003e getFilteredBudgetList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns the user prefs\u0027 budget list file path."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    Path getBudgetListFilePath();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ObservableList\u003cExpense\u003e updateExpenses();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 27,
      "choonx99": 17,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.logic.parser.MymParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ReadOnlyBudgetList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final MymParser mymParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        mymParser \u003d new MymParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            Command command \u003d mymParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            storage.saveExpenseList(model.getExpenseList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            storage.saveBudgetList(model.getBudgetList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ReadOnlyExpenseList getExpenseList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return model.getExpenseList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ObservableList\u003cExpense\u003e getExpenses() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return model.getExpenses();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ObservableList\u003cExpense\u003e updateExpenses() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return model.initExpenses();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    //    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    //    public ObservableList\u003cExpense\u003e getFilteredFullExpenseList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    //        return model.getFilteredFullExpenseList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Path getExpenseListFilePath() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return model.getExpenseListFilePath();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ReadOnlyBudgetList getBudgetList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return model.getBudgetList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return model.getFilteredBudgetList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public Path getBudgetListFilePath() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return model.getBudgetListFilePath();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 32,
      "choonx99": 21,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddBudgetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CURRENCY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ViewState;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Adds a budget into the budget list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class AddBudgetCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"budget\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a budget to the budget list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                                                            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                                                            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                                                            + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                                                            + \"[\" + PREFIX_CURRENCY + \"CURRENCY] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                                                            + PREFIX_DATE + \"START-DATE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                                                            + PREFIX_END_DATE + \"END-DATE...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                                                            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                                                            + PREFIX_NAME + \"Japan Travel \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                                                            + PREFIX_AMOUNT + \"2000.00 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                                                            + PREFIX_CURRENCY + \"USD \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                                                            + PREFIX_DATE + \"12/12/2019 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                                                            + PREFIX_END_DATE + \"18/12/2019\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New budget added: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BUDGET \u003d \"This budget already exists in the budget list\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String MESSAGE_BUDGET_CLASH \u003d \"This budget period clashes with another budget\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String MESSAGE_START_BEFORE_END_ERROR \u003d \"The budget end date has to be after its start date\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private final Budget toAdd;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Creates an AddBudgetCommand to add the specified {@code Budget}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public AddBudgetCommand(Budget budget) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        toAdd \u003d budget;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (toAdd.getEndDate().localDate.isBefore(toAdd.getStartDate().localDate)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new CommandException(MESSAGE_START_BEFORE_END_ERROR);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (model.hasBudget(toAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BUDGET);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (model.hasBudgetPeriodClash(toAdd)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new CommandException(MESSAGE_BUDGET_CLASH);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        model.addBudget(toAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        model.setViewState(ViewState.BUDGETLIST);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return new CommandResult(null, model.getFilteredBudgetList(), null, String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            || (other instanceof AddBudgetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            \u0026\u0026 toAdd.equals(((AddBudgetCommand) other).toAdd));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 4,
      "choonx99": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddExpenseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CURRENCY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ViewState;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Adds an expense to the expense list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class AddExpenseCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"expense\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an expense to the expense list. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            + \"[\" + PREFIX_CURRENCY + \"CURRENCY] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            + PREFIX_NAME + \"Textbook \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            + PREFIX_AMOUNT + \"23.50 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            + PREFIX_CURRENCY + \"USD \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            + PREFIX_DATE + \"1245 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            + PREFIX_TAG + \"education \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New expense added: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXPENSE \u003d \"This expense already exists in the expense list\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String MESSAGE_ADD_ERROR \u003d \"An error occurred while trying to add the expense\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final Expense toAdd;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Creates an AddExpenseCommand to add the specified {@code Expense}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public AddExpenseCommand(Expense expense) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        toAdd \u003d expense;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ViewState viewState \u003d model.getViewState();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (model.hasExpense(toAdd)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        model.addExpense(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (viewState.equals(ViewState.DEFAULT_EXPENSELIST)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return new CommandResult(model.getFilteredExpenseList(), null, null,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } else if (viewState.equals(ViewState.BUDGETLIST)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return new CommandResult(null, model.getFilteredBudgetList(), null,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } else if (viewState.equals(ViewState.EXPENSELIST_IN_BUDGET)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            Budget lastViewedBudget \u003d model.getLastViewedBudget();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return new CommandResult(model.getExpenseListFromBudget(lastViewedBudget), null, lastViewedBudget,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new CommandException(MESSAGE_ADD_ERROR);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                || (other instanceof AddExpenseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddExpenseCommand) other).toAdd));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 20,
      "choonx99": 25,
      "muhammadaljunied": 5,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.BudgetList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ExpenseList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ViewState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Clears all Expenses/Budgets."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String MESSAGE_CLEAR_EXPENSES_SUCCESS \u003d \"Expense list has been cleared!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String MESSAGE_CLEAR_BUDGETS_SUCCESS \u003d \"Budget list has been cleared!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String MESSAGE_CLEAR_EXPENSES_IN_BUDGET_SUCCESS \u003d \"Budget: %1$s has been cleared!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String MESSAGE_CLEAR_ERROR \u003d \"An error occurred while trying to clear list\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ViewState viewState \u003d model.getViewState();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (viewState.equals(ViewState.DEFAULT_EXPENSELIST)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            model.setExpenseList(new ExpenseList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return new CommandResult(model.getFilteredExpenseList(), null,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                null, MESSAGE_CLEAR_EXPENSES_SUCCESS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } else if (viewState.equals(ViewState.EXPENSELIST_IN_BUDGET)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            Budget lastViewedBudget \u003d model.getLastViewedBudget();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            lastViewedBudget.setExpenseListInBudget(new ExpenseList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return new CommandResult(model.getExpenseListFromBudget(lastViewedBudget), null, lastViewedBudget,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                String.format(MESSAGE_CLEAR_EXPENSES_IN_BUDGET_SUCCESS, lastViewedBudget.getName()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } else if (viewState.equals(ViewState.BUDGETLIST)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            model.setBudgetList(new BudgetList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return new CommandResult(null, model.getFilteredBudgetList(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                null, MESSAGE_CLEAR_BUDGETS_SUCCESS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new CommandException(MESSAGE_CLEAR_ERROR);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 4,
      "choonx99": 26,
      "muhammadaljunied": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @param history history of user inputs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history) throws CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 3,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Used for access expenseList inside a budget."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final ObservableList\u003cExpense\u003e expenseList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Used for access budgetList."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final ObservableList\u003cBudget\u003e budgetList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Used only access target budget."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final Budget budget;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.budgetList \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.expenseList \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.budget \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public CommandResult(ObservableList\u003cExpense\u003e expenseList, ObservableList\u003cBudget\u003e budgetList, Budget budget,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                         String feedbackToUser, boolean showHelp,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                         boolean exit) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.budgetList \u003d budgetList;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.expenseList \u003d expenseList;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code expenseList}, {@code viewState}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public CommandResult(ObservableList\u003cExpense\u003e expenseList, ObservableList\u003cBudget\u003e budgetList, Budget budget,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                         String feedbackToUser) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this(expenseList, budgetList, budget, feedbackToUser, false, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ObservableList\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return expenseList;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ObservableList\u003cBudget\u003e getBudgetList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return budgetList;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Budget getBudget() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return budget;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 63,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ViewState;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Deletes an expense identified using it\u0027s displayed index from the expense list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        + \": Deletes the item identified by the index number used in the displayed list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MESSAGE_DELETE_EXPENSE_SUCCESS \u003d \"Deleted Expense: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String MESSAGE_DELETE_BUDGET_SUCCESS \u003d \"Deleted Budget: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String MESSAGE_DELETE_ERROR \u003d \"An error occurred while trying to delete the item\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ViewState viewState \u003d model.getViewState();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Budget lastViewedBudget \u003d model.getLastViewedBudget();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (viewState.equals(ViewState.DEFAULT_EXPENSELIST)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            List\u003cExpense\u003e lastShownList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            Expense expenseToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            model.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return new CommandResult(model.getFilteredExpenseList(), null, null,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                String.format(MESSAGE_DELETE_EXPENSE_SUCCESS, expenseToDelete));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } else if (viewState.equals(ViewState.BUDGETLIST)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            List\u003cBudget\u003e lastShownList \u003d model.getFilteredBudgetList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_BUDGET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            Budget budgetToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            model.deleteBudget(budgetToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return new CommandResult(null, model.getFilteredBudgetList(), null,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                String.format(MESSAGE_DELETE_BUDGET_SUCCESS, budgetToDelete));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } else if (viewState.equals(ViewState.EXPENSELIST_IN_BUDGET)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            Budget viewingBudget \u003d model.getLastViewedBudget();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            List\u003cExpense\u003e expenseListInsideBudget \u003d viewingBudget.getObservableExpenseList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d expenseListInsideBudget.size()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            Expense expenseToDelete \u003d expenseListInsideBudget.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            viewingBudget.deleteExpenseInBudget(expenseToDelete);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return new CommandResult(model.getExpenseListFromBudget(viewingBudget), null, lastViewedBudget,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                String.format(MESSAGE_DELETE_EXPENSE_SUCCESS, expenseToDelete));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new CommandException(MESSAGE_DELETE_ERROR);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 10,
      "choonx99": 35,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditBudgetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CURRENCY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BUDGETS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ViewState;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Amount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Currency;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Edits the details of an existing budget in the budget list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class EditBudgetCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editBudget\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the budget identified \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        + \"by the index number used in the displayed budget list. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        + \"[\" + PREFIX_AMOUNT + \"AMOUNT] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        + \"[\" + PREFIX_CURRENCY + \"CURRENCY]...\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        + PREFIX_NAME + \"Japan Travel \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        + PREFIX_AMOUNT + \"$5000 \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String MESSAGE_EDIT_BUDGET_SUCCESS \u003d \"Edited Budget: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BUDGET \u003d \"This budget already exists in the budget list.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String MESSAGE_EDIT_BUDGET_ERROR \u003d \"You have to be viewing the budget list \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        + \"first before you can edit a budget\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private final EditBudgetDescriptor editBudgetDescriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @param index                of the budget in the filtered budget list to edit"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @param editBudgetDescriptor details to edit the budget with"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public EditBudgetCommand(Index index, EditBudgetDescriptor editBudgetDescriptor) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        requireNonNull(editBudgetDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.editBudgetDescriptor \u003d new EditBudgetDescriptor(editBudgetDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Creates and returns a {@code Budget} with the details of {@code budgetToEdit}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * edited with {@code editBudgetDescriptor}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static Budget createEditedBudget(Budget budgetToEdit, EditBudgetDescriptor editBudgetDescriptor) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assert budgetToEdit !\u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Name updatedName \u003d editBudgetDescriptor.getName().orElse(budgetToEdit.getName());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Amount updatedAmount \u003d editBudgetDescriptor.getAmount().orElse(budgetToEdit.getAmount());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Currency updatedCurrency \u003d editBudgetDescriptor.getCurrency().orElse(budgetToEdit.getCurrency());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Budget editedBudget \u003d new Budget(updatedName, updatedAmount, updatedAmount, updatedCurrency,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            budgetToEdit.getStartDate(), budgetToEdit.getEndDate(), budgetToEdit.getExpenseList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return editedBudget;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        List\u003cBudget\u003e lastShownList \u003d model.getFilteredBudgetList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BUDGET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Budget budgetToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Budget editedBudget \u003d createEditedBudget(budgetToEdit, editBudgetDescriptor);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (!budgetToEdit.isSameBudget(editedBudget) \u0026\u0026 model.hasBudget(editedBudget)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BUDGET);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        model.setBudget(budgetToEdit, editedBudget);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        model.updateFilteredBudgetList(PREDICATE_SHOW_ALL_BUDGETS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        model.setViewState(ViewState.BUDGETLIST);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return new CommandResult(null, model.getFilteredBudgetList(), null,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            String.format(MESSAGE_EDIT_BUDGET_SUCCESS, editedBudget));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (!(other instanceof EditBudgetCommand)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditBudgetCommand e \u003d (EditBudgetCommand) other;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            \u0026\u0026 editBudgetDescriptor.equals(e.editBudgetDescriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Stores the details to edit the budget with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * corresponding field value of the budget."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static class EditBudgetDescriptor {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        private Amount amount;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        private Currency currency;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public EditBudgetDescriptor() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "choonx99"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "choonx99"
        },
        "content": "         */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public EditBudgetDescriptor(EditBudgetDescriptor toCopy) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            setCurrency(toCopy.currency);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "choonx99"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "choonx99"
        },
        "content": "         */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, amount, currency);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public Optional\u003cCurrency\u003e getCurrency() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return Optional.ofNullable(currency);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        public void setCurrency(Currency currency) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            this.currency \u003d currency;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            if (!(other instanceof EditBudgetDescriptor)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            EditBudgetDescriptor e \u003d (EditBudgetDescriptor) other;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                \u0026\u0026 getAmount().equals(e.getAmount())"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                \u0026\u0026 getCurrency().equals(e.getCurrency());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 29,
      "choonx99": 163,
      "muhammadaljunied": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditExpenseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CURRENCY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ViewState;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Currency;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Edits the details of an existing expense in the expense list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class EditExpenseCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editExpense\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the expense identified \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        + \"by the index number used in the displayed expense list. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        + \"[\" + PREFIX_AMOUNT + \"AMOUNT] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        + \"[\" + PREFIX_CURRENCY + \"CURRENCY] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        + PREFIX_AMOUNT + \"23.50 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        + PREFIX_DATE + \"1245\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MESSAGE_EDIT_EXPENSE_SUCCESS \u003d \"Edited Expense: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXPENSE \u003d \"This expense already exists in the expense list.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String MESSAGE_EDIT_ERROR \u003d \"An error occurred while \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        + \"trying to edit the expense\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String MESSAGE_EDIT_WHEN_NOT_VIEWING_EXPENSELIST_ERROR \u003d \"You have to be viewing an \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        + \"expense list to edit an expense\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final EditExpenseDescriptor editExpenseDescriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @param index                 of the expense in the filtered expense list to edit"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @param editExpenseDescriptor details to edit the expense with"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public EditExpenseCommand(Index index, EditExpenseDescriptor editExpenseDescriptor) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(editExpenseDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.editExpenseDescriptor \u003d new EditExpenseDescriptor(editExpenseDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Creates and returns a {@code Expense} with the details of {@code expenseToEdit}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * edited with {@code editExpenseDescriptor}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static Expense createEditedExpense(Expense expenseToEdit, EditExpenseDescriptor editExpenseDescriptor) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assert expenseToEdit !\u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Name updatedName \u003d editExpenseDescriptor.getName().orElse(expenseToEdit.getName());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Amount updatedAmount \u003d editExpenseDescriptor.getAmount().orElse(expenseToEdit.getAmount());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Currency updatedCurrency \u003d editExpenseDescriptor.getCurrency().orElse(expenseToEdit.getCurrency());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Date updatedDate \u003d editExpenseDescriptor.getDate().orElse(expenseToEdit.getDate());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Tag updatedTag \u003d editExpenseDescriptor.getTag().orElse(expenseToEdit.getTag());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return new Expense(updatedName, updatedAmount, updatedCurrency, updatedDate, updatedTag);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ViewState viewState \u003d model.getViewState();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        List\u003cExpense\u003e lastShownList;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Budget lastViewedBudget \u003d model.getLastViewedBudget();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (viewState.equals(ViewState.DEFAULT_EXPENSELIST)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            lastShownList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } else if (viewState.equals(ViewState.EXPENSELIST_IN_BUDGET)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            lastShownList \u003d lastViewedBudget.getObservableExpenseList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new CommandException(MESSAGE_EDIT_WHEN_NOT_VIEWING_EXPENSELIST_ERROR);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Expense expenseToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Expense editedExpense \u003d createEditedExpense(expenseToEdit, editExpenseDescriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (!expenseToEdit.isSameExpense(editedExpense) \u0026\u0026 model.hasExpense(editedExpense)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Optional\u003cBudget\u003e b1 \u003d model.getBudgetExpenseFallsInto(expenseToEdit);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Optional\u003cBudget\u003e b2 \u003d model.getBudgetExpenseFallsInto(editedExpense);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (b1.isPresent() \u0026\u0026 b2.isPresent() \u0026\u0026 b1.get().equals(b2.get())) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            // both expenses fall in same budget"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            b1.get().setExpenseInBudget(expenseToEdit, editedExpense);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else if (b1.isEmpty() \u0026\u0026 b2.isEmpty()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            // both expenses do not fall in any budget"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            model.setExpense(expenseToEdit, editedExpense);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else if (b1.isPresent() \u0026\u0026 b2.isEmpty()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            // toEdit falls in budget, edited doesn\u0027t"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            b1.get().deleteExpenseInBudget(expenseToEdit);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            model.addExpense(editedExpense);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else if (b1.isEmpty()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            // toEdit doesn\u0027t fall in budget, edited does"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            model.deleteExpense(expenseToEdit);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            b2.get().addExpenseIntoBudget(editedExpense);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else if (!b1.get().equals(b2.get())) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            // both expenses in different budget"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            b1.get().deleteExpenseInBudget(expenseToEdit);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            b2.get().addExpenseIntoBudget(editedExpense);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new CommandException(MESSAGE_EDIT_ERROR);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (lastViewedBudget !\u003d null) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            lastViewedBudget.recalculateAmountLeft();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (viewState.equals(ViewState.DEFAULT_EXPENSELIST)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return new CommandResult(model.getFilteredExpenseList(), null,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                null, String.format(MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return new CommandResult(model.getExpenseListFromBudget(b1.get()), null, lastViewedBudget,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                String.format(MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (!(other instanceof EditExpenseCommand)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditExpenseCommand e \u003d (EditExpenseCommand) other;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u0026\u0026 editExpenseDescriptor.equals(e.editExpenseDescriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Stores the details to edit the expense with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * corresponding field value of the expense."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static class EditExpenseDescriptor {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        private Amount amount;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        private Currency currency;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        private Tag tag;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        public EditExpenseDescriptor() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        public EditExpenseDescriptor(EditExpenseDescriptor toCopy) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            setCurrency(toCopy.currency);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            setTag(toCopy.tag);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, amount, currency, date, tag);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        public Optional\u003cCurrency\u003e getCurrency() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            return Optional.ofNullable(currency);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        public void setCurrency(Currency currency) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            this.currency \u003d currency;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        public void setDate(Date date) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        public Optional\u003cTag\u003e getTag() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            return Optional.ofNullable(tag);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "         */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        public void setTag(Tag tag) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            this.tag \u003d tag;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            if (!(other instanceof EditExpenseDescriptor)) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            EditExpenseDescriptor e \u003d (EditExpenseDescriptor) other;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                \u0026\u0026 getAmount().equals(e.getAmount())"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                \u0026\u0026 getCurrency().equals(e.getCurrency())"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                \u0026\u0026 getTag().equals(e.getTag());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 86,
      "choonx99": 40,
      "muhammadaljunied": 30,
      "-": 118
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting MYMorise as requested ...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Finds and lists all expenses in expense list whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all expenses whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" coffee lunch\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        model.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        int size \u003d model.getFilteredExpenseList().size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            String.format(size \u003c\u003d 1 ? Messages.MESSAGE_EXPENSE_LISTED_OVERVIEW"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                : Messages.MESSAGE_EXPENSES_LISTED_OVERVIEW, size));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 9,
      "muhammadaljunied": 1,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 2,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        ArrayList\u003cString\u003e previousCommands \u003d new ArrayList\u003c\u003e(history.getHistory());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListBudgetsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BUDGETS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ViewState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Lists all expenses in the Budget to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class ListBudgetsCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listBudgets\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all budgets\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        model.updateFilteredBudgetList(PREDICATE_SHOW_ALL_BUDGETS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        model.setViewState(ViewState.BUDGETLIST);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return new CommandResult(null, model.getFilteredBudgetList(), null, MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 3,
      "choonx99": 22,
      "muhammadaljunied": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListDefaultExpensesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ViewState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Lists all expenses in the expense list to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class ListDefaultExpensesCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listDefaultExpenses\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all expenses\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        model.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        model.setViewState(ViewState.DEFAULT_EXPENSELIST);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return new CommandResult(model.getFilteredExpenseList(), null,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            null, MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 6,
      "choonx99": 6,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewBudgetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ViewState;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Views a budget identified using it\u0027s displayed index from the budget list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class ViewBudgetCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        + \": Views the budget identified by the index number used in the displayed list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String MESSAGE_VIEW_BUDGET_SUCCESS \u003d \"You are viewing the budget: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String MESSAGE_VIEW_ERROR \u003d \"You have to be viewing the budget list \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        + \"first before you can view a budget\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ViewBudgetCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        List\u003cBudget\u003e lastShownList \u003d model.getFilteredBudgetList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BUDGET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Budget budgetToView \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        model.setLastViewedBudget(budgetToView);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        model.setViewState(ViewState.EXPENSELIST_IN_BUDGET);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return new CommandResult(model.getExpenseListFromBudget(budgetToView), null, budgetToView,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            String.format(MESSAGE_VIEW_BUDGET_SUCCESS, budgetToView));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            || (other instanceof ViewBudgetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((ViewBudgetCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 7,
      "choonx99": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddBudgetCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CURRENCY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.AddBudgetCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ExpenseList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Currency;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Parses input arguments and creates a new AddBudgetCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class AddBudgetCommandParser implements Parser\u003cAddBudgetCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddBudgetCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * and returns an AddBudgetCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public AddBudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AMOUNT, PREFIX_CURRENCY, PREFIX_DATE, PREFIX_END_DATE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_AMOUNT, PREFIX_DATE, PREFIX_END_DATE)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddBudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Currency currency \u003d ParserUtil.parseCurrency(argMultimap);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Date startDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Date endDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_END_DATE).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Budget budget \u003d new Budget(name, amount, amount, currency, startDate, endDate, new ExpenseList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return new AddBudgetCommand(budget);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 4,
      "choonx99": 47,
      "muhammadaljunied": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddExpenseCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CURRENCY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Amount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Currency;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Parses input arguments and creates a new AddExpenseCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class AddExpenseCommandParser implements Parser\u003cAddExpenseCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public AddExpenseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AMOUNT, PREFIX_CURRENCY, PREFIX_DATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_AMOUNT)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Currency currency \u003d ParserUtil.parseCurrency(argMultimap);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Tag tag \u003d ParserUtil.parseTag(argMultimap);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Expense expense \u003d new Expense(name, amount, currency, date, tag);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return new AddExpenseCommand(expense);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 7,
      "choonx99": 6,
      "muhammadaljunied": 18,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final Prefix PREFIX_AMOUNT \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final Prefix PREFIX_CURRENCY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final Prefix PREFIX_END_DATE \u003d new Prefix(\"ed/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 2,
      "choonx99": 1,
      "muhammadaljunied": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditBudgetCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CURRENCY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.EditBudgetCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.EditBudgetCommand.EditBudgetDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Parses input arguments and creates a new EditBudgetCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class EditBudgetCommandParser implements Parser\u003cEditBudgetCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditBudgetCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * and returns an EditBudgetCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public EditBudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AMOUNT, PREFIX_CURRENCY);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditBudgetCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditBudgetDescriptor editBudgetDescriptor \u003d new EditBudgetDescriptor();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            editBudgetDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            editBudgetDescriptor.setAmount(ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CURRENCY).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            editBudgetDescriptor.setCurrency(ParserUtil.parseCurrency(argMultimap));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (!editBudgetDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new ParseException(EditBudgetCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return new EditBudgetCommand(index, editBudgetDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 3,
      "choonx99": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditExpenseCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CURRENCY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.EditExpenseCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.EditExpenseCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Parses input arguments and creates a new EditExpenseCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class EditExpenseCommandParser implements Parser\u003cEditExpenseCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditExpenseCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * and returns an EditExpenseCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public EditExpenseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AMOUNT, PREFIX_CURRENCY, PREFIX_DATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditExpenseCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        EditExpenseDescriptor editExpenseDescriptor \u003d new EditExpenseDescriptor();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            editExpenseDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            editExpenseDescriptor.setAmount(ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CURRENCY).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            editExpenseDescriptor.setCurrency(ParserUtil.parseCurrency(argMultimap));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            editExpenseDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            editExpenseDescriptor.setTag(ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (!editExpenseDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new ParseException(EditExpenseCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return new EditExpenseCommand(index, editExpenseDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 14,
      "choonx99": 9,
      "muhammadaljunied": 7,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MymParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.AddBudgetCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.EditBudgetCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.EditExpenseCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.ListBudgetsCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.ListDefaultExpensesCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.ViewBudgetCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public class MymParser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        case AddExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return new AddExpenseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        case EditExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return new EditExpenseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        case ListDefaultExpensesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return new ListDefaultExpensesCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        case ViewBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return new ViewBudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        case ListBudgetsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return new ListBudgetsCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        case EditBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return new EditBudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        case AddBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return new AddBudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 5,
      "choonx99": 24,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CURRENCY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Currency;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.exchangedata.ExchangeDataSingleton;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Parses a {@code String amount} into a {@code Amount}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @throws ParseException if the given {@code amount} is invalid."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static Amount parseAmount(String amount) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        String trimmedAmount \u003d amount.trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (!Amount.isValidAmount(trimmedAmount)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new ParseException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return new Amount(trimmedAmount);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Parses a {@code String currency} into a {@code Currency}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @throws ParseException if the given {@code currency} is invalid."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static Currency parseCurrency(String currency) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        requireNonNull(currency);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        String trimmedCurrency \u003d currency.trim().toUpperCase();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (!Currency.isValidCurrency(trimmedCurrency)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            || !ExchangeDataSingleton.getInstance().isValidCurrency(trimmedCurrency)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            throw new ParseException(Currency.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return new Currency(trimmedCurrency, ExchangeDataSingleton.getInstance().getRates().getRate(trimmedCurrency));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Parses a {@code ArgumentMultiMap argMultiMap} into an {@code Currency}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @throws ParseException if the given {@code currency} is invalid."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static Currency parseCurrency(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Optional\u003cString\u003e currencyField \u003d argMultimap.getValue(PREFIX_CURRENCY);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        String currency;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (!currencyField.isPresent()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            currency \u003d \"SGD\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            currency \u003d currencyField.get();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return parseCurrency(currency);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Parses a {@code String date} into an {@code Date}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            if (!Date.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                throw new ParseException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new ParseException(\"Input date contains \" + e.getCause().getMessage());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return new Date(trimmedDate);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Parses a {@code ArgumentMultiMap argMultiMap} into an {@code Date}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static Date parseDate(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Optional\u003cString\u003e dateField \u003d argMultimap.getValue(PREFIX_DATE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        String date;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (!dateField.isPresent()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            LocalDateTime currentDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy Hmm\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            date \u003d currentDateTime.format(formatter);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            date \u003d dateField.get();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return parseDate(date);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Parses a {@code ArgumentMultiMap argMultiMap} into an {@code Date}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static Tag parseTag(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Optional\u003cString\u003e tagField \u003d argMultimap.getValue(PREFIX_TAG);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        String tag;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (!tagField.isPresent()) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            tag \u003d \"\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            tag \u003d tagField.get();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return parseTag(tag);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 42,
      "muhammadaljunied": 42,
      "-": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewBudgetCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.ViewBudgetCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Parses input arguments and creates a new ViewBudgetCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class ViewBudgetCommandParser implements Parser\u003cViewBudgetCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewBudgetCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * and returns a ViewBudgetCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ViewBudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return new ViewBudgetCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewBudgetCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 2,
      "choonx99": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/search/AutoComplete.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.logic.search;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.autocomplete.AutoCompleteModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.autocomplete.Word;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Main controller class to execute the searching logic"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public class AutoComplete {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static final int numOfSug \u003d 10;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static AutoCompleteModel acModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static Word[] matchedResults;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static boolean displayWeights;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public AutoComplete() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        matchedResults \u003d new Word[numOfSug];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        displayWeights \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Read word storage from txt"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @param is path for the library of words"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @return the suggestions to be shown in textField"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static Word[] importDictionary(InputStream is) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Word[] queries \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            BufferedReader reader \u003d new BufferedReader(new InputStreamReader(is));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            int lines \u003d Integer.parseInt(reader.readLine());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            queries \u003d new Word[lines];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            for (int i \u003d 0; i \u003c lines; i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                String line \u003d reader.readLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                if (line \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    System.err.println(\"Could not read line \" + (i + 1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    System.exit(1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                int tab \u003d line.indexOf(\u0027\\t\u0027);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                if (tab \u003d\u003d -1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    System.err.println(\"No tab character in line \" + (i + 1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    System.exit(1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                long weight \u003d Long.parseLong(line.substring(0, tab).trim());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                String query \u003d line.substring(tab + 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                queries[i] \u003d new Word(query, weight);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            System.err.println(\"Could not read or parse input file \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            System.exit(1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return queries;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Initialize an autocomplete model"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static void initAc() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        InputStream in \u003d MainApp.class.getResourceAsStream(\"/data/vocabulary.txt\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Word[] data \u003d importDictionary(in);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        acModel \u003d new AutoCompleteModel(data);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Makes a call to the implementation of AutoCompleteModel to get"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * suggestions for the currently entered text."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @param text string to search for"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static List\u003cString\u003e getSuggestions(String text) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        List\u003cString\u003e suggestions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        // don\u0027t search for suggestions if there is no input"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (text.length() \u003e 0) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            // get all matching words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            Word[] allResults \u003d acModel.allMatches(text);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            if (allResults \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                throw new NullPointerException(\"allMatches() is null\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            if (allResults.length \u003e numOfSug) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                matchedResults \u003d Arrays.copyOfRange(allResults, 0, numOfSug);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                matchedResults \u003d allResults;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            if (!displayWeights) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                for (Word matchedResult : matchedResults) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    suggestions.add(matchedResult.getQuery());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return suggestions;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/search/BinarySearch.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.logic.search;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Utility class to find the first and the last index of key using Binary Search."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public class BinarySearch {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Searches the specified array for the specified value using modification of binary"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * search algorithm and returns the index of the first key in list[] that equals the search key,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * or -1 if no such key were found."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @param list       - the array of keys to be searched"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @param key        - the value to be searched for"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @param comparator - the comparator by which array is ordered"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @return - the index of the last key in list that equals the search key, -1 if not found"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @throws NullPointerException - if list is null"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @throws NullPointerException - if key is null"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @throws NullPointerException - if comparator is null"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static \u003cT\u003e int firstIndexOf(T[] list, T key, Comparator\u003cT\u003e comparator) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (list \u003d\u003d null || key \u003d\u003d null || comparator \u003d\u003d null) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (list.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (comparator.compare(list[0], key) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        int lo \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        int hi \u003d list.length - 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        while (lo \u003c\u003d hi) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            int mid \u003d lo + (hi - lo) / 2;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            int cmp \u003d comparator.compare(list[mid], key);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            if (cmp \u003e\u003d 1) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                hi \u003d mid - 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            } else if (cmp \u003c\u003d -1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                lo \u003d mid + 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            } else if (comparator.compare(list[mid - 1], list[mid]) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                hi \u003d mid - 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                return mid;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Searches the specified array for the specified value using modification of binary"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * search algorithm and returns the index of the last key in list[] that equals the search key,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * or -1 if no such key were found."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @param list       - the array of keys to be searched"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @param key        - the value to be searched for"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @param comparator - the comparator by which array is ordered"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @return - the index of the last key in list that equals the search key, -1 if not found"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @throws NullPointerException - if list is null"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @throws NullPointerException - if key is null"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @throws NullPointerException - if comparator is null"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static \u003cT\u003e int lastIndexOf(T[] list, T key, Comparator\u003cT\u003e comparator) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (list \u003d\u003d null || key \u003d\u003d null || comparator \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (list.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (comparator.compare(list[list.length - 1], key) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return list.length - 1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        int lo \u003d 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        int hi \u003d list.length - 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        while (lo \u003c\u003d hi) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            int mid \u003d lo + (hi - lo) / 2;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            int cmp \u003d comparator.compare(list[mid], key);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            if (cmp \u003e\u003d 1) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                hi \u003d mid - 1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            } else if (cmp \u003c\u003d -1) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                lo \u003d mid + 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            } else if (comparator.compare(list[mid + 1], list[mid]) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                lo \u003d mid + 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                return mid;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/model/BudgetList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.budget.UniqueBudgetList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Wraps all data at the budgetList level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Duplicates are not allowed (by .isSameBudget comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class BudgetList implements ReadOnlyBudgetList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private final UniqueBudgetList budgets;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */ {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        budgets \u003d new UniqueBudgetList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public BudgetList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Creates an BudgetList using the Budgets in the {@code toBeCopied}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public BudgetList(ReadOnlyBudgetList toBeCopied) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Replaces the contents of the budget list with {@code budgets}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * {@code budgets} must not contain duplicate budgets."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setBudgets(List\u003cBudget\u003e budgets) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.budgets.setBudgets(budgets);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Resets the existing data of this {@code BudgetList} with {@code newData}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void resetData(ReadOnlyBudgetList newData) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        setBudgets(newData.getBudgetList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    //// budget-level operations"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns true if a budget with the same identity as {@code budget} exists in the budget list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public boolean hasBudget(Budget budget) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return budgets.contains(budget);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Adds a budget to the budget list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * The budget must not already exist in the budget list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void addBudget(Budget p) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        budgets.add(p);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Replaces the given budget {@code target} in the list with {@code editedBudget}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * {@code target} must exist in the budget list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * The budget identity of {@code editedBudget} must not be the same as another existing budget in the budget"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setBudget(Budget target, Budget editedBudget) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        requireNonNull(editedBudget);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        budgets.setBudget(target, editedBudget);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Removes {@code key} from this {@code BudgetList}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * {@code key} must exist in the budget list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void removeBudget(Budget key) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        budgets.remove(key);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public Optional\u003cBudget\u003e getBudgetExpenseFallsInto(Expense expense) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Optional\u003cBudget\u003e toReturn \u003d Optional.empty();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        List\u003cBudget\u003e lastShownList \u003d getBudgetList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        for (Budget budget : lastShownList) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            if (budget.isDateWithinBudgetPeriod(expense.getDate())) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                toReturn \u003d Optional.of(budget);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Checks whether a new budget to be added clashes with any existing budget period."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @param newBudget a valid budget."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @return a boolean value."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public boolean hasBudgetPeriodClash(Budget newBudget) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        List\u003cBudget\u003e lastShownList \u003d getBudgetList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        for (Budget budget : lastShownList) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            if (budget.isDateWithinBudgetPeriod(newBudget.getStartDate())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    || budget.isDateWithinBudgetPeriod(newBudget.getEndDate())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    || budget.doesOtherBudgetOverlap(newBudget)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return budgets.asUnmodifiableObservableList().size() + \" budgets\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ObservableList\u003cBudget\u003e getBudgetList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return budgets.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            || (other instanceof BudgetList // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            \u0026\u0026 budgets.equals(((BudgetList) other).budgets));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return budgets.hashCode();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 152
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ExpenseList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.UniqueExpenseList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Wraps all data at the expenseList level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Duplicates are not allowed (by .isSameExpense comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public class ExpenseList implements ReadOnlyExpenseList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final UniqueExpenseList expenses;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */ {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        expenses \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ExpenseList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Creates an ExpenseList using the Expenses in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ExpenseList(ReadOnlyExpenseList toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Replaces the contents of the expense list with {@code expenses}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * {@code expenses} must not contain duplicate expenses."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void setExpenses(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.expenses.setExpenses(expenses);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Resets the existing data of this {@code ExpenseList} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void resetData(ReadOnlyExpenseList newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        setExpenses(newData.getExpenseList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //// expense-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns true if a expense with the same identity as {@code expense} exists in the expense list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return expenses.contains(expense);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Adds a expense to the expense list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * The expense must not already exist in the expense list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void addExpense(Expense p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        expenses.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Replaces the given expense {@code target} in the list with {@code editedExpense}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * {@code target} must exist in the expense list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * The expense identity of {@code editedExpense} must not be the same as another existing expense in the expense"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(editedExpense);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        expenses.setExpense(target, editedExpense);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Removes {@code key} from this {@code ExpenseList}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * {@code key} must exist in the expense list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void removeExpense(Expense key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        expenses.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return expenses.asUnmodifiableObservableList().size() + \" expenses\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ObservableList\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return expenses.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            || (other instanceof ExpenseList // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u0026\u0026 expenses.equals(((ExpenseList) other).expenses));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return expenses.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 119,
      "choonx99": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.exchangedata.ExchangeData;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    Predicate\u003cExpense\u003e PREDICATE_SHOW_ALL_EXPENSES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    Predicate\u003cBudget\u003e PREDICATE_SHOW_ALL_BUDGETS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ViewState getViewState();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setViewState(ViewState viewState);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public Budget getLastViewedBudget();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void setLastViewedBudget(Budget budget);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns the user prefs\u0027 expense list file path."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    Path getExpenseListFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Sets the user prefs\u0027 expense list file path."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    void setExpenseListFilePath(Path expenseListFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns the ExpenseList"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ReadOnlyExpenseList getExpenseList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Replaces expense list data with the data in {@code expenseList}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    void setExpenseList(ReadOnlyExpenseList expenseList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Returns the user prefs\u0027 exchangeData file path."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    Path getExchangeDataFilePath();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Sets the user prefs\u0027 exchangeData file path."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    void setExchangeDataFilePath(Path exchangeDataFilePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Replaces exchange data with the data in {@code exchangeData}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    void setExchangeData(ExchangeData exchangeData);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Returns the ExchangeData"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    ExchangeData getExchangeData();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns true if an expense with the same identity as {@code expense} exists in the expense list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    boolean hasExpense(Expense expense);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Deletes the given expense."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * The expense must exist in the expense list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    void deleteExpense(Expense target);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Adds the given expense."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * {@code expense} must not already exist in the expense list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    void addExpense(Expense expense);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ObservableList\u003cExpense\u003e getExpenses();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    void updateFilteredExpenses(Predicate\u003cExpense\u003e predicate);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Replaces the given expense {@code target} with {@code editedExpense}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * {@code target} must exist in the expense list."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * The expense identity of {@code editedExpense} must not be the same as"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * another existing expense in the expense list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    void setExpense(Expense target, Expense editedExpense);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns an unmodifiable view of the filtered expense list"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ObservableList\u003cExpense\u003e getFilteredExpenseList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Updates the filter of the filtered expense list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns the user prefs\u0027 budget list file path."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    Path getBudgetListFilePath();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Sets the user prefs\u0027 budget list file path."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    void setBudgetListFilePath(Path expenseListFilePath);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns the BudgetList"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ReadOnlyBudgetList getBudgetList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Replaces budget list data with the data in {@code budgetList}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    void setBudgetList(ReadOnlyBudgetList budgetList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns true if a budget with the same identity as {@code budget} exists in the budget list."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    boolean hasBudget(Budget budget);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Deletes the given budget."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * The budget must exist in the budget list."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    void deleteBudget(Budget target);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Adds the given budget."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * {@code budget} must not already exist in the budget list."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    void addBudget(Budget budget);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Replaces the given budget {@code target} with {@code editedBudget}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * {@code target} must exist in the budget list."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * The budget identity of {@code editedBudget} must not be the same as"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * another existing budget in the budget list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    void setBudget(Budget target, Budget editedBudget);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns an unmodifiable view of the filtered budget list"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    ObservableList\u003cBudget\u003e getFilteredBudgetList();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Updates the filter of the filtered budget list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    void updateFilteredBudgetList(Predicate\u003cBudget\u003e predicate);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    boolean hasBudgetPeriodClash(Budget newBudget);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    Optional\u003cBudget\u003e getBudgetExpenseFallsInto(Expense expense);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    boolean expenseFallsIntoABudget(Expense expense);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ObservableList\u003cExpense\u003e getExpenseListFromBudget(Budget budgetToView);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ObservableList\u003cExpense\u003e initExpenses();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 54,
      "choonx99": 61,
      "muhammadaljunied": 15,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.exchangedata.ExchangeData;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Represents the in-memory model of the expense list data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static ViewState viewState \u003d ViewState.DEFAULT_EXPENSELIST;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static Budget lastViewedBudget;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private final ExpenseList defaultExpenseList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private final BudgetList budgetList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private final FilteredList\u003cBudget\u003e filteredBudgets;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final FilteredList\u003cExpense\u003e filteredExpenses;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final FilteredList\u003cExpense\u003e expenses;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private ExchangeData exchangeData;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Initializes a ModelManager with the given expenseList, budgetlist and userPrefs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public ModelManager(ReadOnlyExpenseList expenseList, ReadOnlyBudgetList budgetList,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                        ExchangeData exchangeData, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        requireAllNonNull(expenseList, exchangeData, userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        logger.fine(\"Initializing with expense list: \" + expenseList + \", user prefs \" + userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            + \" budget list: \" + budgetList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.defaultExpenseList \u003d new ExpenseList(expenseList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.exchangeData \u003d new ExchangeData(exchangeData);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.budgetList \u003d new BudgetList(budgetList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        filteredExpenses \u003d new FilteredList\u003c\u003e(this.defaultExpenseList.getExpenseList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        filteredBudgets \u003d new FilteredList\u003c\u003e(this.budgetList.getBudgetList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        expenses \u003d new FilteredList\u003c\u003e(initExpenses());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this(new ExpenseList(), new BudgetList(), new ExchangeData(), new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ViewState getViewState() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return viewState;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void setViewState(ViewState state) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        viewState \u003d state;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public Budget getLastViewedBudget() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return lastViewedBudget;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void setLastViewedBudget(Budget budget) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        lastViewedBudget \u003d budget;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Path getExpenseListFilePath() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return userPrefs.getExpenseListFilePath();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void setExpenseListFilePath(Path expenseListFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(expenseListFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        userPrefs.setExpenseListFilePath(expenseListFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Path getExchangeDataFilePath() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return userPrefs.getExchangeDataFilePath();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void setExchangeDataFilePath(Path exchangeDataFilePath) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        requireNonNull(exchangeDataFilePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        userPrefs.setExchangeDataFilePath(exchangeDataFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public Path getBudgetListFilePath() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return userPrefs.getBudgetListFilePath();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setBudgetListFilePath(Path budgetListFilePath) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        requireNonNull(budgetListFilePath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        userPrefs.setBudgetListFilePath(budgetListFilePath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ExpenseList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ReadOnlyExpenseList getExpenseList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return defaultExpenseList;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void setExpenseList(ReadOnlyExpenseList expenseList) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.defaultExpenseList.resetData(expenseList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public ExchangeData getExchangeData() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return exchangeData;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void setExchangeData(ExchangeData exchangeData) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.exchangeData \u003d exchangeData;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Optional\u003cBudget\u003e budget \u003d getBudgetExpenseFallsInto(expense);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return budget.map(value -\u003e value.budgetHasExpense(expense))"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .orElseGet(() -\u003e defaultExpenseList.hasExpense(expense));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void deleteExpense(Expense target) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        defaultExpenseList.removeExpense(target);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Optional\u003cBudget\u003e budget \u003d getBudgetExpenseFallsInto(expense);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (budget.isPresent()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            budget.get().addExpenseIntoBudget(expense);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            defaultExpenseList.addExpense(expense);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            //            updateFilteredExpenses(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireAllNonNull(target, editedExpense);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        defaultExpenseList.setExpense(target, editedExpense);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ObservableList\u003cExpense\u003e getExpenses() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return expenses;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void updateFilteredExpenses(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        expenses.setPredicate(predicate);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Expense List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Expense} backed by the internal list of"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * {@code versionedExpenseList}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return filteredExpenses;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        filteredExpenses.setPredicate(predicate);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return defaultExpenseList.equals(other.defaultExpenseList)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            \u0026\u0026 exchangeData.equals(other.exchangeData)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            \u0026\u0026 filteredExpenses.equals(other.filteredExpenses)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            \u0026\u0026 budgetList.equals(other.budgetList)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            \u0026\u0026 filteredBudgets.equals(other.filteredBudgets);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BudgetList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public ReadOnlyBudgetList getBudgetList() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return budgetList;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void setBudgetList(ReadOnlyBudgetList budgetList) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.budgetList.resetData(budgetList);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public boolean hasBudget(Budget budget) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return budgetList.hasBudget(budget);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void deleteBudget(Budget target) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        budgetList.removeBudget(target);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void addBudget(Budget budget) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        budgetList.addBudget(budget);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        updateFilteredBudgetList(PREDICATE_SHOW_ALL_BUDGETS);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setBudget(Budget target, Budget editedBudget) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        requireAllNonNull(target, editedBudget);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        budgetList.setBudget(target, editedBudget);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public Optional\u003cBudget\u003e getBudgetExpenseFallsInto(Expense expense) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return budgetList.getBudgetExpenseFallsInto(expense);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public boolean expenseFallsIntoABudget(Expense expense) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return getBudgetExpenseFallsInto(expense).isPresent();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ObservableList\u003cExpense\u003e getExpenseListFromBudget(Budget budgetToView) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return budgetToView.getObservableExpenseList();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public boolean hasBudgetPeriodClash(Budget budget) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return budgetList.hasBudgetPeriodClash(budget);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Budget List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Budget} backed by the internal list of"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * {@code versionedExpenseList}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return filteredBudgets;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void updateFilteredBudgetList(Predicate\u003cBudget\u003e predicate) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        filteredBudgets.setPredicate(predicate);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @return all the expenses"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ObservableList\u003cExpense\u003e initExpenses() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        ObservableList\u003cExpense\u003e allExpenses \u003d FXCollections.observableArrayList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        allExpenses.addAll(this.defaultExpenseList.getExpenseList());"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        for (Budget budget : this.budgetList.getBudgetList()) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            allExpenses.addAll(budget.getExpenseList().getExpenseList());"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return allExpenses;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 57,
      "choonx99": 101,
      "muhammadaljunied": 40,
      "-": 126
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyBudgetList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Unmodifiable view of an expense list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public interface ReadOnlyBudgetList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns an unmodifiable view of the expenses list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * This list will not contain any duplicate expenses."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    ObservableList\u003cBudget\u003e getBudgetList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyExpenseList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Unmodifiable view of an expense list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public interface ReadOnlyExpenseList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns an unmodifiable view of the expenses list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * This list will not contain any duplicate expenses."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ObservableList\u003cExpense\u003e getExpenseList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    Path getExpenseListFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private Path expenseListFilePath \u003d Paths.get(\"data\", \"expenselist.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private Path exchangeDataFilePath \u003d Paths.get(\"data\", \"exchangedata.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Path budgetListFilePath \u003d Paths.get(\"data\", \"budgetlist.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        setExpenseListFilePath(newUserPrefs.getExpenseListFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Path getExpenseListFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return expenseListFilePath;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void setExpenseListFilePath(Path expenseListFilePath) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(expenseListFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.expenseListFilePath \u003d expenseListFilePath;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Path getExchangeDataFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return exchangeDataFilePath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void setExchangeDataFilePath(Path exchangeDataFilePath) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        requireNonNull(exchangeDataFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.exchangeDataFilePath \u003d exchangeDataFilePath;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public Path getBudgetListFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return budgetListFilePath;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setBudgetListFilePath(Path budgetListFilePath) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        requireNonNull(budgetListFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.budgetListFilePath \u003d budgetListFilePath;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            \u0026\u0026 expenseListFilePath.equals(o.expenseListFilePath)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            \u0026\u0026 exchangeDataFilePath.equals(o.exchangeDataFilePath)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            \u0026\u0026 budgetListFilePath.equals(o.budgetListFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return Objects.hash(guiSettings, expenseListFilePath, budgetListFilePath, exchangeDataFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + expenseListFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        sb.append(\"\\nExchange data file location : \" + exchangeDataFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        sb.append(\"\\n                           \" + budgetListFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 10,
      "choonx99": 10,
      "muhammadaljunied": 12,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ViewState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * ViewState Enumerates the 3 different states for views available to be rendered in the UI."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public enum ViewState {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    DEFAULT_EXPENSELIST,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    EXPENSELIST_IN_BUDGET,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    BUDGETLIST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 7,
      "muhammadaljunied": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/autocomplete/AutoCompleteModel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.model.autocomplete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.logic.search.BinarySearch;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Given the data and the query, this class is for searching for words in the data"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * starting with the given query and returns the array in descending order w.r.t weight."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public class AutoCompleteModel {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final Word[] dataCopy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Initialize an AutoCompleteModel using array of words."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @param data - the array of queries"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @throws NullPointerException - if queries \u003d\u003d null"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public AutoCompleteModel(Word[] data) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (data \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new NullPointerException(\"Data cannot be null\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        dataCopy \u003d Arrays.copyOf(data, data.length);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Arrays.sort(dataCopy);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Return all words that start with the given query, in descending order of weight."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Query should be non-null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @param query - query to be searched for"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @return - array of words that match the given query in descending order"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @throws NullPointerException - if query \u003d\u003d null"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Word[] allMatches(String query) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (query \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new NullPointerException(\"Query cannot be null\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Word queryWord \u003d new Word(query, 100);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        int firstIndex \u003d BinarySearch.firstIndexOf(dataCopy, queryWord, Word.compareCharSeq(query.length()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        // NOT FOUND"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (firstIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return new Word[0];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        int lastIndex \u003d BinarySearch.lastIndexOf(dataCopy, queryWord, Word.compareCharSeq(query.length()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        int range \u003d lastIndex - firstIndex + 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Word[] allMatches \u003d new Word[range];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        int j \u003d 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        for (int i \u003d firstIndex; i \u003c\u003d lastIndex; i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            allMatches[j++] \u003d dataCopy[i];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Arrays.sort(allMatches, Word.compareWeightDescending());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return allMatches;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/autocomplete/Word.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.model.autocomplete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Word is an immutable data type that represents an autocomplete object."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * A query string and an associated integer weight(optional)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Represents single search word with the query and the weight."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public class Word implements Comparable\u003cWord\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final String query;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final long weight;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Word() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.query \u003d null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.weight \u003d -1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Initializes a word with the specified query and the weight."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Word should be non-null and weight must be non-negative."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @param query  - the query to be searched for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @param weight - the corresponding weight of the query"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @throws NullPointerException     - if query \u003d\u003d null"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @throws IllegalArgumentException - if weight \u003c 0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Word(String query, long weight) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (query \u003d\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new NullPointerException(\"Word can\u0027t be null\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (weight \u003c 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new IllegalArgumentException(\"Weight must be non-negative\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.query \u003d query;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns comparator to compare words in lexicographic order using"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * only the first r characters of each query. Parameter r should be non-negative."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @return -1 if first r characters of this are less than the first r characters of that"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * 0 if first r characters of this are equal to the first r characters of that"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * 1 if first r characters of this are larger than to the first r characters of that"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static Comparator\u003cWord\u003e compareCharSeq(int len) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (len \u003c 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new IllegalArgumentException(\"length must be non-negative, but was \" + len);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return (t1, t2) -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            String q1 \u003d truncateTarget(t1.query, len);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            String q2 \u003d truncateTarget(t2.query, len);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return Integer.compare(q1.compareToIgnoreCase(q2), 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        };"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * For comparing first R chars"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @param targetString Desc string to compare"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @param len"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static String truncateTarget(String targetString, int len) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        final int endIndex \u003d Math.min(targetString.length(), len);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return targetString.substring(0, endIndex);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns comparator for comparing words using their corresponding weights."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static Comparator\u003cWord\u003e compareWeightDescending() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return Comparator.comparingLong(Word::getWeight).reversed();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public long getWeight() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return weight;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public String getQuery() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return query;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns a string representation of this word in the following format:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * the weight, followed by a tab, followed by the query."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return weight + \"\\t\" + query;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Compares two words in lexicographic order."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @return -1 if this is (less than) that"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * 0 if this (is the same as) that"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * 1 if this (is larger than) that"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public int compareTo(Word word) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        int cmp \u003d this.query.toLowerCase().compareTo(word.query.toLowerCase());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (cmp \u003c\u003d -1) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else if (cmp \u003e\u003d 1) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 114
    }
  },
  {
    "path": "src/main/java/seedu/address/model/budget/Budget.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ExpenseList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Amount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Currency;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.exchangedata.ExchangeDataSingleton;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Represents an expense in the expense list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class Budget {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private final Currency currency;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    // Data Fields"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private final Date startDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private final Date endDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private final Amount amount;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    // Expense List"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private final ExpenseList expenseList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private Amount amountLeft;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private boolean budgetAmountPositive;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Budget(Name name, Amount amount, Amount amountLeft, Currency currency, Date startDate, Date endDate,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                  ExpenseList expenseList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        requireAllNonNull(name, amount, startDate, endDate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.currency \u003d currency;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.amountLeft \u003d amountLeft;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.expenseList \u003d expenseList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        recalculateAmountLeft();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public Amount getAmountLeft() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return amountLeft;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public Currency getCurrency() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return currency;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public Date getStartDate() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public Date getEndDate() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ExpenseList getExpenseList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return expenseList;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ObservableList\u003cExpense\u003e getObservableExpenseList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return expenseList.getExpenseList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setExpenseListInBudget(ReadOnlyExpenseList expenseList) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.expenseList.resetData(expenseList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        recalculateAmountLeft();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Adds an expense into the expenselist inside the budget."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @param expense an expense to be added into a budget."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void addExpenseIntoBudget(Expense expense) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expenseList.addExpense(expense);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        recalculateAmountLeft();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @param expense target expense in the budget"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void deleteExpenseInBudget(Expense expense) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expenseList.removeExpense(expense);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        recalculateAmountLeft();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public boolean budgetHasExpense(Expense expense) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return expenseList.hasExpense(expense);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public boolean isBudgetPositive() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return this.budgetAmountPositive;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Checks whether a given date falls within any budget period."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @param date a valid date."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @return a boolean value."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public boolean isDateWithinBudgetPeriod(Date date) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return !date.localDate.isBefore(startDate.localDate) \u0026\u0026 !date.localDate.isAfter(endDate.localDate);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Checks if a budget overlaps with the current instance of the budget."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param otherBudget Budget to compare with"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @return a boolean value."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public boolean doesOtherBudgetOverlap(Budget otherBudget) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return otherBudget.getStartDate().localDate.isBefore(this.startDate.localDate)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            \u0026\u0026 otherBudget.getEndDate().localDate.isAfter(this.endDate.localDate);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Recalculates the amountLeft in budget after an expense is added into the budget."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * This is to prevent accidental amendments directly in the data file to result in wrong amount left."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void recalculateAmountLeft() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        double amountLeft \u003d this.amount.getValue();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        for (Expense expense : expenseList.getExpenseList()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            amountLeft -\u003d expense.getConvertedAmount(currency);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (amountLeft \u003c\u003d 0.0) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            this.amountLeft \u003d new Amount(String.format(\"%.2f\", 0 - amountLeft));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            this.budgetAmountPositive \u003d false;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            this.amountLeft \u003d new Amount(String.format(\"%.2f\", amountLeft));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            this.budgetAmountPositive \u003d true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Amount getConvertedAmount() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        double amountAsTarget \u003d amount.getValue() / ExchangeDataSingleton.getInstance()"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            .getRates().getRate(currency.name);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return new Amount(String.format(\"%.2f\", amountAsTarget));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns true if both budgets are equal."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * This uses a stronger notion of equality between two budgets."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public boolean isSameBudget(Budget otherBudget) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return this.equals(otherBudget);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setExpenseInBudget(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.expenseList.setExpense(target, editedExpense);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns true if both budgets have the same identity and data fields."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * This defines a stronger notion of equality between two budgets."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (!(other instanceof Budget)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Budget otherBudget \u003d (Budget) other;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return otherBudget.getName().equals(getName())"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            \u0026\u0026 otherBudget.getAmount().equals(getAmount())"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            \u0026\u0026 otherBudget.getCurrency().equals(getCurrency())"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            \u0026\u0026 otherBudget.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            \u0026\u0026 otherBudget.getEndDate().equals(getEndDate());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return Objects.hash(name, amount, startDate, endDate);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        builder.append(\"\\n\")"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            .append(\"Name: \" + getName())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            .append(\"\\n\")"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            .append(\"Amount: \" + getAmount())"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            .append(\" \" + getCurrency())"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            .append(\"\\n\")"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            .append(\"Start: \" + getStartDate())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            .append(\"\\n\")"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            .append(\"End: \" + getEndDate())"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            .append(\"\\n\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 21,
      "choonx99": 185,
      "muhammadaljunied": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/budget/UniqueBudgetList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.budget.exceptions.BudgetNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.budget.exceptions.DuplicateBudgetException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * A list of budgets that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * A budget is considered unique by comparing using {@code Budget#isSameBudget(Budget)}. As such, adding and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * budgets uses Budget#isSameBudget(Budget) for equality so as to ensure that the budget being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * unique in terms of identity in the UniqueBudgetList. However, the removal of a budget uses Budget#equals"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * (Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * as to ensure that the budget with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * @see Budget#isSameBudget(Budget)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class UniqueBudgetList implements Iterable\u003cBudget\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private final ObservableList\u003cBudget\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private final ObservableList\u003cBudget\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns true if the list contains an equivalent budget as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public boolean contains(Budget toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameBudget);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Adds a budget to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * The budget must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void add(Budget toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new DuplicateBudgetException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Replaces the budget {@code target} in the list with {@code editedBudget}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * The budget identity of {@code editedBudget} must not be the same as another existing budget in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setBudget(Budget target, Budget editedBudget) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        requireAllNonNull(target, editedBudget);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new BudgetNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (!target.isSameBudget(editedBudget) \u0026\u0026 contains(editedBudget)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new DuplicateBudgetException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        internalList.set(index, editedBudget);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Removes the equivalent budget from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * The budget must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void remove(Budget toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new BudgetNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setBudgets(UniqueBudgetList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Replaces the contents of this list with {@code budgets}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * {@code budgets} must not contain duplicate budgets."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setBudgets(List\u003cBudget\u003e budgets) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        requireAllNonNull(budgets);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (!budgetsAreUnique(budgets)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new DuplicateBudgetException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        internalList.setAll(budgets);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ObservableList\u003cBudget\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public Iterator\u003cBudget\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                       || (other instanceof UniqueBudgetList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                                   \u0026\u0026 internalList.equals(((UniqueBudgetList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns true if {@code budgets} contains only unique budgets."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private boolean budgetsAreUnique(List\u003cBudget\u003e budgets) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        for (int i \u003d 0; i \u003c budgets.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            for (int j \u003d i + 1; j \u003c budgets.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                if (budgets.get(i).isSameBudget(budgets.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 139
    }
  },
  {
    "path": "src/main/java/seedu/address/model/budget/exceptions/BudgetNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.model.budget.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Signals that the operation is unable to find the specified budget."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class BudgetNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/budget/exceptions/DuplicateBudgetException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.model.budget.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Signals that the operation will result in duplicate Budgets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * (Budgets are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class DuplicateBudgetException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public DuplicateBudgetException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        super(\"Operation would result in duplicate budgets\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/commons/Amount.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Represents the amount of an expense in the MYMorise."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAmount(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public class Amount {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The amount should not be blank, \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        + \" should contain only numbers, up to 12 digits and 2 decimal places.\\n\" + \"No currency prefix is needed and\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        + \" it must be a positive value.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\d]{1,12}[.]??[\\\\d]{0,2}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Constructs an {@code Amount}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @param amount A valid amount."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Amount(String amount) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        checkArgument(isValidAmount(amount), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        value \u003d convertToTwoDecimal(amount);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns if a given string is a valid amount."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static boolean isValidAmount(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 Double.parseDouble(test) !\u003d 0.0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public double getValue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return Double.parseDouble(value.replaceAll(\"[^\\\\d.]\", \"\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public String convertToTwoDecimal(String value) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return String.format(\"%.2f\", Double.parseDouble(value));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            || (other instanceof Amount // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u0026\u0026 value.equals(((Amount) other).value)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 48,
      "choonx99": 12,
      "muhammadaljunied": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/commons/Currency.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Represents the currency of an expense in the MyMorise."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCurrency(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class Currency {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String DEFAULT_BASE_CURRENCY \u003d \"SGD\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Currency specified is invalid or unsupported. Refer to UserGuide\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        + \" for list of supported currencies.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"([a-zA-Z]){3}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private Double rate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Currency() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        name \u003d DEFAULT_BASE_CURRENCY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rate \u003d 1.0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Constructs a {@code Currency}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param currency A valid currency."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Currency(String currency) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        requireNonNull(currency);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        checkArgument(isValidCurrency(currency), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.name \u003d currency.toUpperCase();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.rate \u003d 1.0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Constructs a {@code Currency}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param currency A valid currency."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param rate     A valid rate."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Currency(String currency, Double rate) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        requireNonNull(currency);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        checkArgument(isValidCurrency(currency), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.name \u003d currency.toUpperCase();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.rate \u003d rate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Returns if a given string is a valid currency."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static boolean isValidCurrency(String test) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Double getRate() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return rate;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return name + \" @ \" + String.format(\"%.3f\", rate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            || (other instanceof Currency // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            \u0026\u0026 name.equals(((Currency) other).name)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/commons/Date.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Represents the date of an expense in the MYMorise."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Date should be of the format Hmm or HHmm or dd/MM/yyyy Hmm or \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        + \"d/MM/yyyy Hmm or dd/MM/yyyy or d/MM/yyyy\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String HMM_REGEX \u003d \"\\\\d{3}\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String HHMM_REGEX \u003d \"\\\\d{4}\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String DMYYYY_REGEX \u003d \"[\\\\d]{1}[/][\\\\d]{1}[/][\\\\d]{4}\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String DMMYYYY_REGEX \u003d \"[\\\\d]{1}[/][\\\\d]{2}[/][\\\\d]{4}\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String DDMYYYY_REGEX \u003d \"[\\\\d]{2}[/][\\\\d]{1}[/][\\\\d]{4}\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String DDMMYYYY_REGEX \u003d \"[\\\\d]{2}[/][\\\\d]{2}[/][\\\\d]{4}\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String DMYYYYHMM_REGEX \u003d \"[\\\\d]{1}[/][\\\\d]{1}[/][\\\\d]{4}\\\\s[\\\\d]{3}\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String DMMYYYYHMM_REGEX \u003d \"[\\\\d]{1}[/][\\\\d]{2}[/][\\\\d]{4}\\\\s[\\\\d]{3}\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String DDMYYYYHMM_REGEX \u003d \"[\\\\d]{2}[/][\\\\d]{1}[/][\\\\d]{4}\\\\s[\\\\d]{3}\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String DDMMYYYYHMM_REGEX \u003d \"[\\\\d]{2}[/][\\\\d]{2}[/][\\\\d]{4}\\\\s[\\\\d]{3}\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String DMYYYYHHMM_REGEX \u003d \"[\\\\d]{1}[/][\\\\d]{1}[/][\\\\d]{4}\\\\s[\\\\d]{4}\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String DMMYYYYHHMM_REGEX \u003d \"[\\\\d]{1}[/][\\\\d]{2}[/][\\\\d]{4}\\\\s[\\\\d]{4}\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String DDMYYYYHHMM_REGEX \u003d \"[\\\\d]{2}[/][\\\\d]{1}[/][\\\\d]{4}\\\\s[\\\\d]{4}\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String DDMMYYYYHHMM_REGEX \u003d \"[\\\\d]{2}[/][\\\\d]{2}[/][\\\\d]{4}\\\\s[\\\\d]{4}\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public final String rawValue;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public final LocalDate localDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Constructs an {@code Date}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Date() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        rawValue \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        value \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        localDate \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Constructs an {@code Date}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        rawValue \u003d date;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        value \u003d convertDate(date);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        localDate \u003d value.length() \u003e 11"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            ? LocalDate.parse(value, DateTimeFormatter.ofPattern(\"dd MMM yyyy, hh:mma\"))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            : LocalDate.parse(value, DateTimeFormatter.ofPattern(\"dd MMM yyyy\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Constructs an {@code Date}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @param rawDate     A valid rawDate."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @param ifConverted Status to determine whether to convert the date"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Date(String rawDate, boolean ifConverted) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(rawDate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        checkArgument(isValidDate(rawDate), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        rawValue \u003d rawDate;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        value \u003d ifConverted ? convertDate(rawDate) : rawDate;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        localDate \u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns if a given string is a valid date."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return !test.equals(convertDate(test));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Transform a given string to a date"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Supported format: Hmm, HHmm, d/M/yyyy, d/MM/yyyy, dd/M/yyyy, dd/MM/yyyy,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * d/M/yyyy Hmm, d/MM/yyyy Hmm, dd/M/yyyy Hmm, dd/MM/yyyy Hmm,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * d/M/yyyy HHmm, d/MM/yyyy HHmm, dd/M/yyyy HHmm, dd/MM/yyyy HHmm,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * e.g. 1/12/2019, 1/12/2019 1845, 10/12/2019, 10/12/2019 1845, 1245"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @param date given string"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @return converted date"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static String convertDate(String date) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        DateTimeFormatter formatter;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        LocalTime newTime;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        LocalDate newDate;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        LocalDateTime newDateTime;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        String datePattern \u003d \"dd MMM yyyy\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String dateTimePattern \u003d \"dd MMM yyyy, hh:mma\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (date.matches(HMM_REGEX)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            formatter \u003d DateTimeFormatter.ofPattern(\"Hmm\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            newTime \u003d LocalTime.parse(date, formatter);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return appendDate(newTime).format(DateTimeFormatter.ofPattern(dateTimePattern));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else if (date.matches(HHMM_REGEX)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            formatter \u003d DateTimeFormatter.ofPattern(\"Hmm\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            newTime \u003d LocalTime.parse(date, formatter);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return appendDate(newTime).format(DateTimeFormatter.ofPattern(dateTimePattern));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else if (date.matches(DMYYYY_REGEX)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            newDate \u003d LocalDate.parse(date, formatter);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return newDate.format(DateTimeFormatter.ofPattern(datePattern));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else if (date.matches(DMMYYYY_REGEX)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            newDate \u003d LocalDate.parse(date, formatter);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return newDate.format(DateTimeFormatter.ofPattern(datePattern));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else if (date.matches(DDMYYYY_REGEX)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            formatter \u003d DateTimeFormatter.ofPattern(\"dd/M/yyyy\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            newDate \u003d LocalDate.parse(date, formatter);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return newDate.format(DateTimeFormatter.ofPattern(datePattern));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else if (date.matches(DDMMYYYY_REGEX)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            newDate \u003d LocalDate.parse(date, formatter);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return newDate.format(DateTimeFormatter.ofPattern(datePattern));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else if (date.matches(DMYYYYHMM_REGEX)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy Hmm\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            newDateTime \u003d LocalDateTime.parse(date, formatter);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return newDateTime.format(DateTimeFormatter.ofPattern(dateTimePattern));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else if (date.matches(DMMYYYYHMM_REGEX)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy Hmm\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            newDateTime \u003d LocalDateTime.parse(date, formatter);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return newDateTime.format(DateTimeFormatter.ofPattern(dateTimePattern));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else if (date.matches(DDMYYYYHMM_REGEX)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            formatter \u003d DateTimeFormatter.ofPattern(\"dd/M/yyyy Hmm\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            newDateTime \u003d LocalDateTime.parse(date, formatter);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return newDateTime.format(DateTimeFormatter.ofPattern(dateTimePattern));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else if (date.matches(DDMMYYYYHMM_REGEX)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy Hmm\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            newDateTime \u003d LocalDateTime.parse(date, formatter);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return newDateTime.format(DateTimeFormatter.ofPattern(dateTimePattern));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else if (date.matches(DMYYYYHHMM_REGEX)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            newDateTime \u003d LocalDateTime.parse(date, formatter);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return newDateTime.format(DateTimeFormatter.ofPattern(dateTimePattern));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else if (date.matches(DMMYYYYHHMM_REGEX)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            newDateTime \u003d LocalDateTime.parse(date, formatter);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return newDateTime.format(DateTimeFormatter.ofPattern(dateTimePattern));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else if (date.matches(DDMYYYYHHMM_REGEX)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            formatter \u003d DateTimeFormatter.ofPattern(\"dd/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            newDateTime \u003d LocalDateTime.parse(date, formatter);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return newDateTime.format(DateTimeFormatter.ofPattern(dateTimePattern));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else if (date.matches(DDMMYYYYHHMM_REGEX)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            newDateTime \u003d LocalDateTime.parse(date, formatter);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return newDateTime.format(DateTimeFormatter.ofPattern(dateTimePattern));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static LocalDateTime appendDate(LocalTime time) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        LocalDate localDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        LocalTime localTime \u003d LocalTime.of(time.getHour(), time.getMinute());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return LocalDateTime.of(localDate, localTime);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u0026\u0026 value.equals(((Date) other).value)); // state check"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 176,
      "choonx99": 6,
      "muhammadaljunied": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/commons/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import org.apache.commons.lang3.StringUtils;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Represents the description of an expense in the expense list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        \"Names may contain anything, and it should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * The first character of the expense must not be a whitespace,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        fullName \u003d StringUtils.capitalize(name);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 6,
      "choonx99": 1,
      "muhammadaljunied": 1,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/commons/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Tests that a {@code Expense}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cExpense\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public boolean test(Expense expense) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(expense.getName().fullName, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 4,
      "muhammadaljunied": 2,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/commons/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Represents a Tag in the expenselist."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^$|\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Tag() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.tagName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.tagName \u003d tagName.equals(\"\") ? \"\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            : tagName.substring(0, 1).toUpperCase() + tagName.substring(1).toLowerCase();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (tagName.equals(\"\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            return \"[untagged]\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            return tagName;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 1,
      "muhammadaljunied": 13,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exchangedata/ExchangeData.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.address.model.exchangedata;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Currency;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Represents the common exchange rates of currencies supported."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Guarantees: details are present and not null."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class ExchangeData {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private final Date lastUpdatedDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private final Currency baseCurrency;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    //Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private final Rates rates \u003d new Rates();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public ExchangeData() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        lastUpdatedDate \u003d new Date(LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        baseCurrency \u003d new Currency();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public ExchangeData(ExchangeData data) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.lastUpdatedDate \u003d data.lastUpdatedDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.baseCurrency \u003d data.baseCurrency;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.rates.getRates().putAll(data.getRates().getRates());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public ExchangeData(Date lastUpdatedDate, Currency baseCurrency, Rates rates) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        requireAllNonNull(lastUpdatedDate, baseCurrency, rates);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.lastUpdatedDate \u003d lastUpdatedDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.baseCurrency \u003d baseCurrency;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.rates.getRates().putAll(rates.getRates());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Date getLastUpdatedDate() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return lastUpdatedDate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Currency getBaseCurrency() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return baseCurrency;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Rates getRates() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return rates;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public boolean isValidCurrency(String currency) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return rates.getSupportedCurrencies().contains(currency);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Returns true if both ExchangeData of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * This defines a weaker notion of equality between two ExchangeData."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public boolean isSameExchangeData(ExchangeData otherExchangeData) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (otherExchangeData \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return otherExchangeData !\u003d null"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            \u0026\u0026 otherExchangeData.getLastUpdatedDate().equals(getLastUpdatedDate())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            \u0026\u0026 otherExchangeData.getBaseCurrency().equals(getBaseCurrency());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Returns true if both ExchangeData have the same identity and data fields."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * This defines a stronger notion of equality between two ExchangeData."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (!(other instanceof ExchangeData)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        ExchangeData otherExchangeData \u003d (ExchangeData) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return otherExchangeData.getLastUpdatedDate().equals(getLastUpdatedDate())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            \u0026\u0026 otherExchangeData.getBaseCurrency().equals(getBaseCurrency())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            \u0026\u0026 otherExchangeData.getRates().equals(getRates());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return Objects.hash(lastUpdatedDate, baseCurrency, rates);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        builder.append(\"\\n\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .append(\"Base Currency: \")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .append(getBaseCurrency())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .append(\"\\n\")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .append(\"Last Updated: \")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .append(getLastUpdatedDate())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .append(\"\\n\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .append(rates.toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exchangedata/ExchangeDataSingleton.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.address.model.exchangedata;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * ExchangeDataSingleton is the single source of truth for all currency conversions in MyMorise."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * @code ExchangeDataStorage is not accessible from the Expense Object, thus this singleton acts"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * as the intermediary to allow access to rates for conversion."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * NOTE:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Ideally, ExchangeStorage can be refactored out in this trivial application, however is left in place"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * in case backdated currency conversions is planned."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Supposing this evolves into an internet dependant application, the storage of old forex rates will be"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * redundant as they would be accessible from the endpoint MyMorise presently retrieves data from upon startup."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class ExchangeDataSingleton {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static ExchangeData instance \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static ExchangeData getInstance() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            instance \u003d new ExchangeData(SampleDataUtil.getSampleExchangeData());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Updates the Singleton instance with the updated forex data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param newExchangeData The new ExchangeData to replace the Singleton with."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @return returns a reference to the new Singleton Instance."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static ExchangeData updateInstance(ExchangeData newExchangeData) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        instance \u003d new ExchangeData(newExchangeData);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 3,
      "muhammadaljunied": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exchangedata/Rates.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.address.model.exchangedata;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Represents the Map of Currencies to their rates based on FOREX."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Guarantees: details are present and not null."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class Rates {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Represents the rates of currencies."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Guarantees: immutable."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    //Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private final Map\u003cString, Double\u003e rates \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Rates() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        requireAllNonNull(rates);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Map\u003cString, Double\u003e getRates() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return rates;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void addRate(String key, Double value) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.put(key, value);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Double getRate(String key) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return rates.get(key);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public List\u003cString\u003e getSupportedCurrencies() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return rates.keySet()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .map(String::new)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Returns true if both exchangeRates have the same identity and data fields."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * This defines a stronger notion of equality between two exchangeRates."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Rates toCompare \u003d (Rates) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return (toCompare.getRates().keySet().equals(this.getRates().keySet())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            \u0026\u0026 new ArrayList\u003c\u003e(toCompare.getRates().values()).equals("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            new ArrayList\u003c\u003e(this.getRates().values()))); //Arraylist Compare values"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return Objects.hash(rates);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        builder.append(\"\\n\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .append("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                rates.keySet().stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                    .map(key -\u003e key + \": \" + rates.get(key))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                    .collect(Collectors.joining(\"\\n\"))"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            );"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/Expense.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static seedu.address.model.commons.Currency.DEFAULT_BASE_CURRENCY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Amount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Currency;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.exchangedata.ExchangeDataSingleton;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Represents an expense in the expense list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class Expense implements Comparable\u003cExpense\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final Amount amount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private final Currency currency;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    // Data Fields"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private final Tag tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Expense(Name name, Amount amount, Currency currency, Date date, Tag tag) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        requireAllNonNull(name, amount, currency, date, tag);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.currency \u003d currency;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public double getConvertedAmount() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return amount.getValue() / currency.getRate();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public double getConvertedAmount(Currency targetCurrency) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        // Convert back to base"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        double amountAsBase \u003d amount.getValue() / currency.getRate();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        double amountAsTarget \u003d amountAsBase * ExchangeDataSingleton.getInstance()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .getRates().getRate(targetCurrency.name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return amountAsTarget;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public boolean isForeign() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return !currency.name.equals(DEFAULT_BASE_CURRENCY);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Currency getCurrency() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return currency;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Tag getTag() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return tag;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns true if both expenses of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * This defines a weaker notion of equality between two expenses."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public boolean isSameExpense(Expense otherExpense) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (otherExpense \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return otherExpense !\u003d null"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u0026\u0026 otherExpense.getName().equals(getName())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u0026\u0026 otherExpense.getAmount().equals(getAmount())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u0026\u0026 otherExpense.getCurrency().equals(getCurrency())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u0026\u0026 otherExpense.getDate().equals(getDate());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns true if both expenses have the same identity and data fields."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * This defines a stronger notion of equality between two expenses."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (!(other instanceof Expense)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Expense otherExpense \u003d (Expense) other;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return otherExpense.getName().equals(getName())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u0026\u0026 otherExpense.getAmount().equals(getAmount())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            \u0026\u0026 otherExpense.getCurrency().equals(getCurrency())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u0026\u0026 otherExpense.getDate().equals(getDate())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            \u0026\u0026 otherExpense.getTag().equals(getTag());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public int compareTo(Expense other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (date.localDate.isBefore(other.getDate().localDate)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } else if (date.localDate.isAfter(other.getDate().localDate)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return Objects.hash(name, amount, currency, date, tag);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        builder.append(\"\\n\")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            .append(\"Name: \" + getName())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .append(\"\\n\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (isForeign()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            builder.append(\"Amount: \" + String.format(\"%.2f\", getConvertedAmount()))"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                .append(\" \" + DEFAULT_BASE_CURRENCY)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                .append(\" (\" + String.format(\"%.2f\", getAmount().getValue()))"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                .append(\" \" + getCurrency().toString())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                .append(\")\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            builder.append(\"Amount: \" + getAmount())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                .append(\" \" + getCurrency().name);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        builder.append(\"\\n\")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            .append(\"Date: \" + getDate())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .append(\"\\n\")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .append(\"Tag: \" + getTag());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Return Comparator to sort data automatically"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static class SortByDate implements Comparator\u003cExpense\u003e {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        public int compare(Expense a, Expense b) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return a.compareTo(b);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 100,
      "choonx99": 14,
      "muhammadaljunied": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/UniqueExpenseList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.exceptions.DuplicateExpenseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.exceptions.ExpenseNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * A list of expenses that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * A expense is considered unique by comparing using {@code Expense#isSameExpense(Expense)}. As such, adding and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * expenses uses Expense#isSameExpense(Expense) for equality so as to ensure that the expense being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * unique in terms of identity in the UniqueExpenseList. However, the removal of a expense uses Expense#equals"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * (Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * as to ensure that the expense with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * @see Expense#isSameExpense(Expense)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public class UniqueExpenseList implements Iterable\u003cExpense\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final ObservableList\u003cExpense\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final ObservableList\u003cExpense\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns true if the list contains an equivalent expense as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public boolean contains(Expense toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameExpense);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Adds a expense to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * The expense must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void add(Expense toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new DuplicateExpenseException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Replaces the expense {@code target} in the list with {@code editedExpense}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * The expense identity of {@code editedExpense} must not be the same as another existing expense in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireAllNonNull(target, editedExpense);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new ExpenseNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (!target.isSameExpense(editedExpense) \u0026\u0026 contains(editedExpense)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new DuplicateExpenseException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        internalList.set(index, editedExpense);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Removes the equivalent expense from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * The expense must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void remove(Expense toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new ExpenseNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void setExpenses(UniqueExpenseList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Replaces the contents of this list with {@code expenses}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * {@code expenses} must not contain duplicate expenses."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void setExpenses(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireAllNonNull(expenses);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (!expensesAreUnique(expenses)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new DuplicateExpenseException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        internalList.setAll(expenses);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ObservableList\u003cExpense\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Iterator\u003cExpense\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            || (other instanceof UniqueExpenseList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueExpenseList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns true if {@code expenses} contains only unique expenses."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private boolean expensesAreUnique(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        for (int i \u003d 0; i \u003c expenses.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            for (int j \u003d i + 1; j \u003c expenses.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                if (expenses.get(i).isSameExpense(expenses.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 139
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/exceptions/DuplicateExpenseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.model.expense.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Signals that the operation will result in duplicate Expenses"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * (Expenses are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public class DuplicateExpenseException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public DuplicateExpenseException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        super(\"Operation would result in duplicate expenses\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/exceptions/ExpenseNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.model.expense.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Signals that the operation is unable to find the specified expense."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public class ExpenseNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.BudgetList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ExpenseList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ReadOnlyBudgetList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Amount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Currency;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.exchangedata.ExchangeData;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.exchangedata.Rates;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Contains utility methods for populating {@code ExpenseList} with sample data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static ExchangeData exchangeRates \u003d getSampleExchangeData();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static Expense[] getSampleExpenses() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return new Expense[] {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Expense(new Name(\"Coffee\"), new Amount(\"1.8\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new Currency(\"SGD\", getRate(\"SGD\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new Date(\"1245\"), new Tag(\"food\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Expense(new Name(\"Textbook\"), new Amount(\"23.50\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new Currency(\"CHF\", getRate(\"CHF\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new Date(\"930\"), new Tag(\"education\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Expense(new Name(\"Earphone\"), new Amount(\"45\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new Currency(\"USD\", getRate(\"USD\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                new Date(\"10/12/2019 1800\"), new Tag(\"utility\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Expense(new Name(\"Hang out\"), new Amount(\"50\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new Currency(\"SGD\", getRate(\"SGD\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new Date(\"15/12/2019 2100\"), new Tag(\"\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Expense(new Name(\"Travel to Paris\"), new Amount(\"50000\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                new Currency(\"KRW\", getRate(\"KRW\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new Date(\"25/12/2019 800\"), new Tag(\"travel\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Expense(new Name(\"Gift for duke\"), new Amount(\"30\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new Currency(\"SGD\", getRate(\"SGD\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new Date(\"1/11/2019\"), new Tag(\"gifts\")),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Expense(new Name(\"Gift for duchess\"), new Amount(\"100\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new Currency(\"EUR\", getRate(\"EUR\")),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new Date(\"8/12/2019\"), new Tag(\"gifts\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Expense(new Name(\"Phone charger\"), new Amount(\"30\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new Currency(\"MYR\", getRate(\"MYR\")),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new Date(\"8/8/2019\"), new Tag(\"utility\")),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Expense(new Name(\"Television\"), new Amount(\"433\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new Currency(\"MXN\", getRate(\"MXN\")),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new Date(\"13/5/2019\"), new Tag(\"\")),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Expense(new Name(\"Japanese mocha\"), new Amount(\"990\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new Currency(\"JPY\", getRate(\"JPY\")),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new Date(\"19/4/2019\"), new Tag(\"food\")),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Expense(new Name(\"Philippine Coffee\"), new Amount(\"6435\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new Currency(\"PHP\", getRate(\"PHP\")),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new Date(\"22/3/2019\"), new Tag(\"food\")),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Expense(new Name(\"Another Gift for duke\"), new Amount(\"30\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new Currency(\"SGD\", getRate(\"SGD\")),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new Date(\"1/11/2019\"), new Tag(\"gifts\"))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static double getRate(String country) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return exchangeRates.getRates().getRate(country);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static ExchangeData getSampleExchangeData() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Rates rates \u003d new Rates();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"CAD\", 0.9631651648);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"HKD\", 5.764322831);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"ISK\", 91.6266526343);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"PHP\", 37.5228573308);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"DKK\", 4.9140301256);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"HUF\", 217.0492665921);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"CZK\", 16.8585147668);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"GBP\", 0.5652173913);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"RON\", 3.1299085707);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"SEK\", 7.0585410774);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"IDR\", 10335.5193054003);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"INR\", 52.0745905413);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"BRL\", 3.0295994212);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"RUB\", 46.791620075);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"HRK\", 4.8923238834);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"JPY\", 79.7803065185);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"THB\", 22.2350851806);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"CHF\", 0.7236729593);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"EUR\", 0.6577649148);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"MYR\", 3.0723541406);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"BGN\", 1.2864566204);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"TRY\", 4.2785634414);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"CNY\", 5.1979872394);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"NOK\", 6.6853910412);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"NZD\", 1.1466157995);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"ZAR\", 10.8420048675);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"USD\", 0.7349207393);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"MXN\", 14.0761691771);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"SGD\", 1.0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"AUD\", 1.0682102217);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"ILS\", 2.5971189897);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"KRW\", 861.0405840952);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"PLN\", 2.8144445175);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        ExchangeData exchangeData \u003d new ExchangeData("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            new Date("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            ), new Currency(\"SGD\"), rates);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return exchangeData;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static ReadOnlyExpenseList getSampleExpenseList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        ExpenseList sampleEl \u003d new ExpenseList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        for (Expense sampleExpense : getSampleExpenses()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            sampleEl.addExpense(sampleExpense);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return sampleEl;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static Budget[] getSampleBudgets() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return new Budget[] {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Budget(new Name(\"Japan Travel\"), new Amount(\"100000.00\"), new Amount(\"100000.00\"),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new Currency(\"JPY\", getRate(\"JPY\")), new Date(\"12/12/2019\"),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new Date(\"18/12/2019\"), getJapanTravelExpenseList()),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Budget(new Name(\"Business Budget\"), new Amount(\"2000.00\"), new Amount(\"2000.00\"),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new Currency(\"USD\", getRate(\"USD\")), new Date(\"10/5/2019\"),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new Date(\"18/5/2019\"), getBusinessBudgetExpenseList()),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Budget(new Name(\"January 19 Budget\"), new Amount(\"500.00\"), new Amount(\"1000.00\"),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new Currency(\"SGD\", getRate(\"SGD\")), new Date(\"1/1/2019\"),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new Date(\"31/1/2019\"), getJanuaryBudgetExpenseList()),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Budget(new Name(\"Wedding Budget\"), new Amount(\"40000.00\"), new Amount(\"40000.00\"),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new Currency(\"SGD\", getRate(\"SGD\")), new Date(\"5/7/2019\"),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new Date(\"12/7/2019\"), getWeddingBudgetExpenseList()),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Budget(new Name(\"Family Travel in SG\"), new Amount(\"600.00\"), new Amount(\"600.00\"),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new Currency(\"SGD\", getRate(\"SGD\")), new Date(\"24/6/2019\"),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new Date(\"24/6/2019\"), getFamilyTravelExpenseList()),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        };"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static ExpenseList getJapanTravelExpenseList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ExpenseList japanTravel \u003d new ExpenseList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        japanTravel.addExpense(new Expense(new Name(\"Japanese Coffee\"), new Amount(\"1000\"),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Currency(\"JPY\", getRate(\"JPY\")), new Date(\"12/12/2019\"), new Tag(\"food\")));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        japanTravel.addExpense(new Expense(new Name(\"Japanese Ramen\"), new Amount(\"7900\"),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Currency(\"JPY\", getRate(\"JPY\")), new Date(\"13/12/2019\"), new Tag(\"food\")));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        japanTravel.addExpense(new Expense(new Name(\"Bus fare\"), new Amount(\"800\"),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Currency(\"JPY\", getRate(\"JPY\")),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Date(\"13/12/2019\"), new Tag(\"transport\")));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        japanTravel.addExpense(new Expense(new Name(\"Hotel\"), new Amount(\"5000\"),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Currency(\"JPY\", getRate(\"JPY\")),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Date(\"12/12/2019\"), new Tag(\"accommodation\")));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        japanTravel.addExpense(new Expense(new Name(\"Temple and Shrine\"), new Amount(\"12000\"),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Currency(\"JPY\", getRate(\"JPY\")),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Date(\"14/12/2019\"), new Tag(\"adventure\")));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        japanTravel.addExpense(new Expense(new Name(\"Mountain climbinb\"), new Amount(\"17000\"),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Currency(\"JPY\", getRate(\"JPY\")),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Date(\"12/12/2019\"), new Tag(\"adventure\")));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return japanTravel;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final ExpenseList getWeddingBudgetExpenseList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ExpenseList weddingBudget \u003d new ExpenseList();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        weddingBudget.addExpense(new Expense(new Name(\"Balloons\"), new Amount(\"500\"),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Currency(\"SGD\", getRate(\"SGD\")),"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Date(\"6/7/2019\"), new Tag(\"decoration\")));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        weddingBudget.addExpense(new Expense(new Name(\"Flowers\"), new Amount(\"700\"),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Currency(\"SGD\", getRate(\"SGD\")),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Date(\"7/7/2019\"), new Tag(\"decoration\")));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        weddingBudget.addExpense(new Expense(new Name(\"Hotel\"), new Amount(\"985\"),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Currency(\"SGD\", getRate(\"SGD\")),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Date(\"7/7/2019\"), new Tag(\"accomodation\")));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        weddingBudget.addExpense(new Expense(new Name(\"Photoshoot\"), new Amount(\"1200\"),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Currency(\"SGD\", getRate(\"SGD\")), new Date(\"9/7/2019\"), new Tag(\"\")));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        weddingBudget.addExpense(new Expense(new Name(\"Attire\"), new Amount(\"700\"),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Currency(\"SGD\", getRate(\"SGD\")), new Date(\"10/7/2019\"), new Tag(\"rent\")));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return weddingBudget;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final ExpenseList getJanuaryBudgetExpenseList() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ExpenseList januaryBudget \u003d new ExpenseList();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        januaryBudget.addExpense(new Expense(new Name(\"Toys for child\"), new Amount(\"50\"),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Currency(\"SGD\", getRate(\"SGD\")), new Date(\"3/1/2019\"), new Tag(\"toy\")));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        januaryBudget.addExpense(new Expense(new Name(\"Expensive chicken rice\"), new Amount(\"40\"),"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Currency(\"SGD\", getRate(\"SGD\")), new Date(\"7/1/2019\"), new Tag(\"food\")));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        januaryBudget.addExpense(new Expense(new Name(\"Table\"), new Amount(\"120\"),"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Currency(\"SGD\", getRate(\"SGD\")), new Date(\"4/1/2019\"), new Tag(\"furniture\")));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        januaryBudget.addExpense(new Expense(new Name(\"Laptop\"), new Amount(\"1500\"),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Currency(\"SGD\", getRate(\"SGD\")), new Date(\"13/1/2019\"), new Tag(\"\")));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        januaryBudget.addExpense(new Expense(new Name(\"Phone bill\"), new Amount(\"40\"),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Currency(\"SGD\", getRate(\"SGD\")), new Date(\"23/1/2019\"), new Tag(\"bill\")));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        januaryBudget.addExpense(new Expense(new Name(\"Phone card\"), new Amount(\"20\"),"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Currency(\"SGD\", getRate(\"SGD\")), new Date(\"16/1/2019\"), new Tag(\"\")));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        januaryBudget.addExpense(new Expense(new Name(\"Chair\"), new Amount(\"100\"),"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Currency(\"SGD\", getRate(\"SGD\")),"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Date(\"18/1/2019\"), new Tag(\"furniture\")));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return januaryBudget;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final ExpenseList getBusinessBudgetExpenseList() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ExpenseList businessBudget \u003d new ExpenseList();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        businessBudget.addExpense(new Expense(new Name(\"Business lunch\"), new Amount(\"150\"),"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Currency(\"USD\", getRate(\"USD\")), new Date(\"12/5/2019\"), new Tag(\"food\")));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        businessBudget.addExpense(new Expense(new Name(\"Travel\"), new Amount(\"30\"),"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Currency(\"USD\", getRate(\"USD\")), new Date(\"13/5/2019\"), new Tag(\"travel\")));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        businessBudget.addExpense(new Expense(new Name(\"Supplier expenditure\"), new Amount(\"200\"),"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Currency(\"USD\", getRate(\"USD\")), new Date(\"15/5/2019\"), new Tag(\"\")));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        businessBudget.addExpense(new Expense(new Name(\"Bribery\"), new Amount(\"50\"),"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Currency(\"USD\", getRate(\"USD\")), new Date(\"11/5/2019\"), new Tag(\"\")));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        businessBudget.addExpense(new Expense(new Name(\"Business Taxes\"), new Amount(\"1150\"),"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Currency(\"USD\", getRate(\"USD\")), new Date(\"11/5/2019\"), new Tag(\"tax\")));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return businessBudget;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final ExpenseList getFamilyTravelExpenseList() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ExpenseList familyTravelBudget \u003d new ExpenseList();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        familyTravelBudget.addExpense(new Expense(new Name(\"Family lunch\"), new Amount(\"70\"),"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Currency(\"SGD\", getRate(\"SGD\")), new Date(\"24/6/2019\"), new Tag(\"food\")));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        familyTravelBudget.addExpense(new Expense(new Name(\"Taxi\"), new Amount(\"40\"),"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Currency(\"SGD\", getRate(\"SGD\")),"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Date(\"24/6/2019\"), new Tag(\"transport\")));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        familyTravelBudget.addExpense(new Expense(new Name(\"Tickets to Gardens by the Bay\"), new Amount(\"150\"),"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Currency(\"SGD\", getRate(\"SGD\")), new Date(\"24/6/2019\"), new Tag(\"tickets\")));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        familyTravelBudget.addExpense(new Expense(new Name(\"Jurong East Swimming Pool\"), new Amount(\"10\"),"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Currency(\"SGD\", getRate(\"SGD\")), new Date(\"24/6/2019\"), new Tag(\"tickets\")));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        familyTravelBudget.addExpense(new Expense(new Name(\"Singapore Zoo tickets\"), new Amount(\"40\"),"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new Currency(\"SGD\", getRate(\"SGD\")), new Date(\"24/6/2019\"), new Tag(\"tickets\")));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return familyTravelBudget;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static ReadOnlyBudgetList getSampleBudgetList() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        BudgetList sampleBl \u003d new BudgetList();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        for (Budget sampleBudget : getSampleBudgets()) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            sampleBl.addBudget(sampleBudget);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return sampleBl;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 13,
      "choonx99": 155,
      "muhammadaljunied": 53,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/BudgetListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.BudgetList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ReadOnlyBudgetList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Represents a storage for {@link BudgetList}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public interface BudgetListStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    Path getBudgetListFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns BudgetList data as a {@link ReadOnlyBudgetList}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    Optional\u003cReadOnlyBudgetList\u003e readBudgetList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @see #getBudgetListFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    Optional\u003cReadOnlyBudgetList\u003e readBudgetList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Saves the given {@link ReadOnlyBudgetList} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @param budgetList cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    void saveBudgetList(ReadOnlyBudgetList budgetList) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @see #saveBudgetList(ReadOnlyBudgetList)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    void saveBudgetList(ReadOnlyBudgetList budgetList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ExchangeDataStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.exchangedata.ExchangeData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Represents a storage for {@link ExchangeData}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public interface ExchangeDataStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    Path getExchangeDataFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Returns ExchangeData data as a {@link ExchangeData}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    Optional\u003cExchangeData\u003e readExchangeData() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @see #getExchangeDataFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    Optional\u003cExchangeData\u003e readExchangeData(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ExpenseListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ExpenseList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Represents a storage for {@link ExpenseList}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public interface ExpenseListStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    Path getExpenseListFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns ExpenseList data as a {@link ReadOnlyExpenseList}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    Optional\u003cReadOnlyExpenseList\u003e readExpenseList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @see #getExpenseListFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    Optional\u003cReadOnlyExpenseList\u003e readExpenseList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Saves the given {@link ReadOnlyExpenseList} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @param expenseList cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    void saveExpenseList(ReadOnlyExpenseList expenseList) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @see #saveExpenseList(ReadOnlyExpenseList)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    void saveExpenseList(ReadOnlyExpenseList expenseList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedBudget.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ExpenseList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Amount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Currency;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Jackson-friendly version of {@link Budget}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "class JsonAdaptedBudget {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"%s field of a budget is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private final String amountLeft;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private final String currency;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private final String startDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private final String endDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private final JsonSerializableExpenseList expenseList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Constructs a {@code JsonAdaptedBudget} with the given budget details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public JsonAdaptedBudget(@JsonProperty(\"name\") String name, @JsonProperty(\"amount\") String amount,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                             @JsonProperty(\"amountLeft\") String amountLeft,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                             @JsonProperty(\"currency\") String currency,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                             @JsonProperty(\"startDate\") String startDate,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                             @JsonProperty(\"endDate\") String endDate,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                             @JsonProperty(\"expenseList\") JsonSerializableExpenseList expenseList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.amountLeft \u003d amountLeft;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.currency \u003d currency;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.expenseList \u003d expenseList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Converts a given {@code Budget} into this class for Jackson use."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public JsonAdaptedBudget(Budget source) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        amount \u003d source.getAmount().value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        amountLeft \u003d source.getAmountLeft().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        currency \u003d source.getCurrency().name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        startDate \u003d source.getStartDate().rawValue;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        endDate \u003d source.getEndDate().rawValue;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expenseList \u003d new JsonSerializableExpenseList(source.getExpenseList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Converts this Jackson-friendly adapted budget object into the model\u0027s {@code Budget} object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted budget."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public Budget toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (amount \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (!Amount.isValidAmount(amount)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new IllegalValueException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        final Amount modelAmount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (amountLeft \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (!Amount.isValidAmount(amountLeft)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new IllegalValueException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        final Amount modelAmountLeft \u003d new Amount(amountLeft);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (currency \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                Currency.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (!Currency.isValidCurrency(currency)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new IllegalValueException(Currency.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        final Currency modelCurrency \u003d new Currency(currency);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (!Date.isValidDate(startDate)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        final Date modelStartDate \u003d new Date(startDate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (!Date.isValidDate(endDate)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        final Date modelEndDate \u003d new Date(endDate);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (expenseList \u003d\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                ExpenseList.class.getSimpleName()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return new Budget(modelName, modelAmount, modelAmountLeft, modelCurrency, modelStartDate, modelEndDate,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new ExpenseList(expenseList.toModelType()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 2,
      "choonx99": 117,
      "muhammadaljunied": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedCurrency.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Currency;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Jackson-friendly version of {@link Currency}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class JsonAdaptedCurrency {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"%s field of an expense is missing!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private final double rate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Constructs a {@code JsonAdaptedCurrency} with the given expense details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public JsonAdaptedCurrency(@JsonProperty(\"name\") String name, @JsonProperty(\"rate\") double rate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.rate \u003d rate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Converts a given {@code Currency} into this class for Jackson use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public JsonAdaptedCurrency(Currency source) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        name \u003d source.name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rate \u003d source.getRate();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Converts this Jackson-friendly adapted expense object into the model\u0027s {@code Currency} object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted currency."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Currency toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, String.class.getSimpleName()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (!Currency.isValidCurrency(name)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            throw new IllegalValueException(Currency.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        final String modelName \u003d name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (rate \u003c\u003d 0.0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            throw new IllegalValueException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        final double modelRate \u003d rate;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return new Currency(modelName, modelRate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedExchangeData.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Currency;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.exchangedata.ExchangeData;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.exchangedata.Rates;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Jackson-friendly version of {@link ExchangeData}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class JsonAdaptedExchangeData {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"%s field of an exchangeRates is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private final String lastUpdatedDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private final String baseCurrency;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private final JsonAdaptedRates rates;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Constructs a {@code JsonAdaptedexchangeRates} with the given exchangeRates details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public JsonAdaptedExchangeData(@JsonProperty(\"date\") String lastUpdatedDate,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                                   @JsonProperty(\"base\") String baseCurrency,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                                   @JsonProperty(\"rates\") JsonAdaptedRates rates) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.lastUpdatedDate \u003d lastUpdatedDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.baseCurrency \u003d baseCurrency;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.rates \u003d rates;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Converts this Jackson-friendly adapted ExchangeRates object into the model\u0027s {@code ExchangeRates} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted ExchangeRates."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public ExchangeData toModelType() throws IllegalValueException, IOException, ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        final Rates modelRates \u003d rates.toModelType();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (lastUpdatedDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        SimpleDateFormat formaterFrom \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        SimpleDateFormat formaterTo \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (!Date.isValidDate(formaterTo.format(formaterFrom.parse(lastUpdatedDate)))) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        final Date modelDate \u003d new Date(formaterTo.format(formaterFrom.parse(lastUpdatedDate)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (baseCurrency \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                Currency.class.getSimpleName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (!Currency.isValidCurrency(baseCurrency)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            throw new IllegalValueException(Currency.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        final Currency modelCurrency \u003d new Currency(baseCurrency);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return new ExchangeData(modelDate, modelCurrency, modelRates);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedExpense.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Currency;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Jackson-friendly version of {@link Expense}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "class JsonAdaptedExpense {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"%s field of an expense is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private final JsonAdaptedCurrency currency;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private final String tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Constructs a {@code JsonAdaptedExpense} with the given expense details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public JsonAdaptedExpense(@JsonProperty(\"name\") String name, @JsonProperty(\"amount\") String amount,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                              @JsonProperty(\"currency\") JsonAdaptedCurrency currency, @JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                              @JsonProperty(\"tag\") String tag) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.currency \u003d currency;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Converts a given {@code Expense} into this class for Jackson use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public JsonAdaptedExpense(Expense source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        amount \u003d source.getAmount().value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        currency \u003d new JsonAdaptedCurrency(source.getCurrency());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        date \u003d source.getDate().rawValue;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        tag \u003d source.getTag().tagName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Converts this Jackson-friendly adapted expense object into the model\u0027s {@code Expense} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted expense."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Expense toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (currency \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                MISSING_FIELD_MESSAGE_FORMAT, Currency.class.getSimpleName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (currency.toModelType() \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                MISSING_FIELD_MESSAGE_FORMAT, Currency.class.getSimpleName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        final Currency modelCurrency \u003d currency.toModelType();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (amount \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (!Amount.isValidAmount(amount)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new IllegalValueException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        final Amount modelAmount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (!Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (tag \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                MISSING_FIELD_MESSAGE_FORMAT, Tag.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (!Tag.isValidTagName(tag)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        final Tag modelTag \u003d new Tag(tag);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return new Expense(modelName, modelAmount, modelCurrency, modelDate, modelTag);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 68,
      "muhammadaljunied": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedRates.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.exchangedata.Rates;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Jackson-friendly version of {@link Rates}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class JsonAdaptedRates {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"%s field of an Rates is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private final Map\u003cString, Double\u003e rates;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Constructs a {@code JsonAdaptedRates} with the given Rates details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public JsonAdaptedRates(Map\u003cString, Double\u003e rates) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.rates \u003d rates;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Converts this Jackson-friendly adapted Rates object into the model\u0027s {@code Rates} object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Rates."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Rates toModelType() throws IllegalValueException, IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Rates modelRates \u003d new Rates();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        modelRates.getRates().putAll(rates);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return modelRates;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 1,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonBudgetListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ReadOnlyBudgetList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * A class to access BudgetList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class JsonBudgetListStorage implements BudgetListStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonBudgetListStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public JsonBudgetListStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public Path getBudgetListFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public Optional\u003cReadOnlyBudgetList\u003e readBudgetList() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return readBudgetList(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Similar to {@link #readBudgetList()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public Optional\u003cReadOnlyBudgetList\u003e readBudgetList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Optional\u003cJsonSerializableBudgetList\u003e jsonBudgetList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                filePath, JsonSerializableBudgetList.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (!jsonBudgetList.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return Optional.of(jsonBudgetList.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void saveBudgetList(ReadOnlyBudgetList addressBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        saveBudgetList(addressBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Similar to {@link #saveBudgetList(ReadOnlyBudgetList)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void saveBudgetList(ReadOnlyBudgetList budgetList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        requireNonNull(budgetList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableBudgetList(budgetList), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonExchangeDataStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.exchangedata.ExchangeData;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * A class to access ExchangeData stored as a json file on the hard disk."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class JsonExchangeDataStorage implements ExchangeDataStorage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonExchangeDataStorage.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public JsonExchangeDataStorage(Path filePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Path getExchangeDataFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Optional\u003cExchangeData\u003e readExchangeData() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return readExchangeData(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Similar to {@link #readExchangeData()}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Optional\u003cExchangeData\u003e readExchangeData(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Optional\u003cJsonAdaptedExchangeData\u003e jsonExchangeData \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            filePath, JsonAdaptedExchangeData.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (jsonExchangeData.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            return Optional.of(jsonExchangeData.get().toModelType());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } catch (IllegalValueException | ParseException ive) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonExpenseListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * A class to access ExpenseList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public class JsonExpenseListStorage implements ExpenseListStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonExpenseListStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public JsonExpenseListStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Path getExpenseListFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Optional\u003cReadOnlyExpenseList\u003e readExpenseList() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return readExpenseList(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Similar to {@link #readExpenseList()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Optional\u003cReadOnlyExpenseList\u003e readExpenseList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Optional\u003cJsonSerializableExpenseList\u003e jsonExpenseList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                filePath, JsonSerializableExpenseList.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (!jsonExpenseList.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return Optional.of(jsonExpenseList.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void saveExpenseList(ReadOnlyExpenseList expenseList) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        saveExpenseList(expenseList, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Similar to {@link #saveExpenseList(ReadOnlyExpenseList)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void saveExpenseList(ReadOnlyExpenseList expenseList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        requireNonNull(expenseList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableExpenseList(expenseList), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 18,
      "choonx99": 2,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableBudgetList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.BudgetList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ReadOnlyBudgetList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * An Immutable BudgetList that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "@JsonRootName(value \u003d \"budgetlist\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "class JsonSerializableBudgetList {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BUDGET \u003d \"Budgets list contains duplicate budget(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private final List\u003cJsonAdaptedBudget\u003e budgets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Constructs a {@code JsonSerializableBudgetList} with the given budgets."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public JsonSerializableBudgetList(@JsonProperty(\"budgets\") List\u003cJsonAdaptedBudget\u003e budgets) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.budgets.addAll(budgets);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Converts a given {@code ReadOnlyBudgetList} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableBudgetList}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public JsonSerializableBudgetList(ReadOnlyBudgetList source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        budgets.addAll(source.getBudgetList().stream().map(JsonAdaptedBudget::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Converts this budget list into the model\u0027s {@code BudgetList} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public BudgetList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        BudgetList budgetList \u003d new BudgetList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        for (JsonAdaptedBudget jsonAdaptedBudget : budgets) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            Budget budget \u003d jsonAdaptedBudget.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            if (budgetList.hasBudget(budget)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_BUDGET);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            budgetList.addBudget(budget);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return budgetList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableExpenseList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ExpenseList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * An Immutable ExpenseList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "@JsonRootName(value \u003d \"expenselist\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "class JsonSerializableExpenseList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXPENSE \u003d \"Expenses list contains duplicate expense(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final List\u003cJsonAdaptedExpense\u003e expenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Constructs a {@code JsonSerializableExpenseList} with the given expenses."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public JsonSerializableExpenseList(@JsonProperty(\"expenses\") List\u003cJsonAdaptedExpense\u003e expenses) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.expenses.addAll(expenses);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Converts a given {@code ReadOnlyExpenseList} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableExpenseList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public JsonSerializableExpenseList(ReadOnlyExpenseList source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        expenses.addAll(source.getExpenseList().stream().map(JsonAdaptedExpense::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Converts this expense list into the model\u0027s {@code ExpenseList} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ExpenseList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        ExpenseList expenseList \u003d new ExpenseList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        for (JsonAdaptedExpense jsonAdaptedExpense : expenses) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            Expense expense \u003d jsonAdaptedExpense.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            if (expenseList.hasExpense(expense)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            expenseList.addExpense(expense);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return expenseList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 58,
      "choonx99": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ReadOnlyBudgetList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.exchangedata.ExchangeData;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public interface Storage extends ExpenseListStorage, BudgetListStorage, ExchangeDataStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    Path getExpenseListFilePath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    Optional\u003cReadOnlyExpenseList\u003e readExpenseList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    Optional\u003cExchangeData\u003e readExchangeData() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    void saveExpenseList(ReadOnlyExpenseList expenseList) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    Path getBudgetListFilePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    Optional\u003cReadOnlyBudgetList\u003e readBudgetList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    void saveBudgetList(ReadOnlyBudgetList budgetList) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 3,
      "choonx99": 8,
      "muhammadaljunied": 3,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ReadOnlyBudgetList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.exchangedata.ExchangeData;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Manages storage of ExpenseList data in local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private ExpenseListStorage expenseListStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private ExchangeDataStorage exchangeDataStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private BudgetListStorage budgetListStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public StorageManager(ExpenseListStorage expenseListStorage, BudgetListStorage budgetListStorage,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                          ExchangeDataStorage exchangeDataStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.expenseListStorage \u003d expenseListStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.exchangeDataStorage \u003d exchangeDataStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.budgetListStorage \u003d budgetListStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ExpenseList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Path getExpenseListFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return expenseListStorage.getExpenseListFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Path getExchangeDataFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return exchangeDataStorage.getExchangeDataFilePath();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Optional\u003cExchangeData\u003e readExchangeData() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return exchangeDataStorage.readExchangeData();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Optional\u003cExchangeData\u003e readExchangeData(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return exchangeDataStorage.readExchangeData(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Optional\u003cReadOnlyExpenseList\u003e readExpenseList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return expenseListStorage.readExpenseList(filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Optional\u003cReadOnlyExpenseList\u003e readExpenseList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return readExpenseList(expenseListStorage.getExpenseListFilePath());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void saveExpenseList(ReadOnlyExpenseList expenseList) throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        saveExpenseList(expenseList, expenseListStorage.getExpenseListFilePath());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void saveExpenseList(ReadOnlyExpenseList expenseList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        expenseListStorage.saveExpenseList(expenseList, filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BudgetList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public Path getBudgetListFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return budgetListStorage.getBudgetListFilePath();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public Optional\u003cReadOnlyBudgetList\u003e readBudgetList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return readBudgetList(budgetListStorage.getBudgetListFilePath());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public Optional\u003cReadOnlyBudgetList\u003e readBudgetList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return budgetListStorage.readBudgetList(filePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void saveBudgetList(ReadOnlyBudgetList budgetList) throws IOException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        saveBudgetList(budgetList, budgetListStorage.getBudgetListFilePath());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void saveBudgetList(ReadOnlyBudgetList budgetList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        budgetListStorage.saveBudgetList(budgetList, filePath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 13,
      "choonx99": 22,
      "muhammadaljunied": 20,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BudgetCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * An UI component that displays information of a {@code Budget}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class BudgetCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final String FXML \u003d \"BudgetCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public final Budget budget;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Label amount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Label amountLeft;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Label currency;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private Label currencyLeft;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Label startDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Label endDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public BudgetCard(Budget budget, int displayedIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        name.setText(budget.getName().fullName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        amount.setText(budget.getAmount().value);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        currency.setText(budget.getCurrency().name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        currencyLeft.setText(budget.getCurrency().name);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        startDate.setText(budget.getStartDate().value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        endDate.setText(budget.getEndDate().value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (budget.isBudgetPositive()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            amountLeft.setText(budget.getAmountLeft().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            amountLeft.setText(\u0027-\u0027 + budget.getAmountLeft().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            amountLeft.setStyle(\"-fx-text-fill: #FF0000\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (!(other instanceof BudgetCard)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        BudgetCard card \u003d (BudgetCard) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            \u0026\u0026 budget.equals(card.budget);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 2,
      "choonx99": 69,
      "muhammadaljunied": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BudgetListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Panel containing the list of budgets."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class BudgetListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final String FXML \u003d \"BudgetListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(BudgetListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private ListView\u003cBudget\u003e budgetListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public BudgetListPanel(ObservableList\u003cBudget\u003e budgetList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        budgetListView.setItems(budgetList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        budgetListView.setCellFactory(listView -\u003e new BudgetListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Budget} using a {@code BudgetCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    class BudgetListViewCell extends ListCell\u003cBudget\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        protected void updateItem(Budget budget, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            super.updateItem(budget, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            if (empty || budget \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                setGraphic(new BudgetCard(budget, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 1,
      "choonx99": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.function.UnaryOperator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.scene.control.TextFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.logic.search.AutoComplete;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static final char separatorSpace \u003d \u0027 \u0027;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static final char separatorSlash \u003d \u0027/\u0027;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final List\u003cString\u003e history;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private int caretPos \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private int anchorPos \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private String newText;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private HistoryPointer historyPointer;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private ListView\u003cString\u003e acSuggestions;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, List\u003cString\u003e history) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.history \u003d history;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        historyPointer \u003d new HistoryPointer(history);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        handleHistoryNavigation();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        caretChangeListener();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        autoCompleteListener();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    Following is another approach for autocomplete, therefore commented out"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //     * Handles the autofill event"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //    private void autoCompleteListener() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //        AutoComplete.initAc();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //        commandTextField.textProperty().addListener(new ChangeListener\u003cString\u003e() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //            @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //            public void changed(ObservableValue\u003c? extends String\u003e observable,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                                String oldText, String newText) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                // Following will return previous caret position"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                commandTextField.getCaretPosition();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                commandTextField.caretPositionProperty().addListener(new ChangeListener\u003cNumber\u003e() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                    public void changed(ObservableValue\u003c? extends Number\u003e observable, Number oldCursor,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                                        Number newCursor) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                        if (newCursor.intValue() \u003e\u003d 1) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                            String targetText \u003d commandTextField.getText(0, newCursor.intValue());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                            int indexSpace \u003d targetText.lastIndexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                            int indexSlash \u003d targetText.lastIndexOf(\u0027/\u0027);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                            String[] terms \u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                            if (indexSpace \u003e indexSlash) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                                terms \u003d newText.split(\" \");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                            } else if (indexSpace \u003c indexSlash) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                                terms \u003d newText.split(\"/\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ////                if (identifier \u003d\u003d \u0027/\u0027) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ////                    terms \u003d newValue.split(\"/\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ////                } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ////                    terms \u003d newValue.split(\" \");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ////                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ////                String latestQuery \u003d terms[terms.length - 1];"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ////                        String queryFirst \u003d termsSpace[termsSpace.length - 1];"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ////                        String querySecond \u003d termsSlash[termsSlash.length - 1];"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                            String latestQuery \u003d terms \u003d\u003d null ? newText : terms[terms.length - 1];"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ////                int tst \u003d commandTextField.getCaretPosition();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ////                ObservableList\u003cString\u003e suggestions \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ////                    FXCollections.observableArrayList(AutoComplete.getSuggestions(latestQuery));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ////                            ObservableList\u003cString\u003e suggestionsFirst \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ////                                FXCollections.observableArrayList(AutoComplete.getSuggestions(queryFirst));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ////                            ObservableList\u003cString\u003e suggestionsSecond \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ////                                FXCollections.observableArrayList(AutoComplete.getSuggestions(querySecond));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ////                            List\u003cString\u003e suggestions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ////                            suggestions.addAll(AutoComplete.getSuggestions(queryFirst));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ////                            suggestions.addAll(AutoComplete.getSuggestions(querySecond));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ////                            Set\u003cString\u003e suggestionSet \u003d new HashSet\u003c\u003e(suggestions);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ////                            suggestions \u003d suggestions.stream().distinct().collect(Collectors.toList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ////                            ObservableList\u003cString\u003e suggestionsFinal \u003d FXCollections.observableArrayList"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ////                            (suggestions);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ////                acSuggestions.setItems(suggestions);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                            ObservableList\u003cString\u003e suggestions \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                                FXCollections.observableArrayList(AutoComplete.getSuggestions(latestQuery));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                            acSuggestions.setItems(suggestions);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                            acSuggestions.setCellFactory(listView -\u003e new AutocompleteListViewCell());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                            commandTextField.setOnKeyPressed(new EventHandler\u003cKeyEvent\u003e() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                                @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                                public void handle(KeyEvent event) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                                    if (event.getCode() \u003d\u003d KeyCode.DOWN) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                                        acSuggestions.requestFocus();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                                        acSuggestions.getSelectionModel().selectFirst();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                                    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                                }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                            });"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                            acSuggestions.setOnMouseClicked(new EventHandler\u003cMouseEvent\u003e() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                                @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                                public void handle(MouseEvent event) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                                    setTextField(latestQuery, newCursor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                                    acSuggestions.getItems().clear();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                            });"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                            acSuggestions.setOnKeyPressed(new EventHandler\u003cKeyEvent\u003e() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                                @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                                public void handle(KeyEvent event) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                                    if (event.getCode() \u003d\u003d KeyCode.ENTER) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                                        setTextField(latestQuery, newCursor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                                        acSuggestions.getItems().clear();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                                    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                            });"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ////                            Platform.runLater(new Runnable() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ////                                @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ////                                public void run() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ////                                    commandTextField.positionCaret(commandTextField.getLength());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ////                                }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    ////                            });"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                });"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //        });"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //    private void caretListener() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //        commandTextField.caretPositionProperty().addListener(new ChangeListener\u003cNumber\u003e() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //            @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //            public void changed(ObservableValue\u003c? extends Number\u003e observable, Number oldValue, Number newValue) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //                caretPos \u003d newValue.intValue();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //        });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //      }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Detect change of caret position. This method is used for retrieving the cursor position."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private void caretChangeListener() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        TextFormatter\u003c?\u003e formatter \u003d new TextFormatter\u003c\u003e((UnaryOperator\u003cTextFormatter.Change\u003e) change -\u003e {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            if (commandTextField.isFocused()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                // Hack \"UP\" and \"DOWN\" key"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                if ((change.isContentChange() || change.getAnchor() !\u003d change.getControlNewText().length()) \u0026\u0026 ("
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    change.isContentChange() || change.getAnchor() !\u003d 0)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    anchorPos \u003d change.getAnchor();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    caretPos \u003d change.getCaretPosition();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    newText \u003d change.getControlNewText();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    acSuggestions.getItems().clear();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return change;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        });"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        commandTextField.setTextFormatter(formatter);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Handles the autofill event"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private void autoCompleteListener() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        AutoComplete.initAc();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        commandTextField.textProperty().addListener((observable, oldText, newText) -\u003e {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            if (caretPos \u003e\u003d 1) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                String targetText \u003d newText.substring(0, Math.min(anchorPos, caretPos));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                String latestQuery;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                // Customized Separators"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                int indexSpace \u003d targetText.lastIndexOf(separatorSpace);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                int indexSlash \u003d targetText.lastIndexOf(separatorSlash);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                String[] terms \u003d null;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                // Ignore separator"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                if (indexSpace \u003d\u003d targetText.length() - 1 || indexSlash \u003d\u003d targetText.length() - 1) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                if (indexSpace \u003e indexSlash) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    terms \u003d targetText.split(\" \");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                } else if (indexSpace \u003c indexSlash) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    terms \u003d targetText.split(\"/\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                if (terms \u003d\u003d null) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    latestQuery \u003d targetText;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                } else if (terms.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    latestQuery \u003d terms[terms.length - 1];"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                ObservableList\u003cString\u003e suggestions \u003d"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    FXCollections.observableArrayList(AutoComplete.getSuggestions(latestQuery));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                acSuggestions.setItems(suggestions);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                acSuggestions.setCellFactory(listView -\u003e new AutocompleteListViewCell());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                /*"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                Press DOWN to navigate to suggestion list."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                Press TAB to autocomplete the first word."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                 */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                commandTextField.setOnKeyPressed(event -\u003e {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    if (event.getCode() \u003d\u003d KeyCode.DOWN) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                        if (!(acSuggestions.getItems().isEmpty())) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                            acSuggestions.requestFocus();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                            acSuggestions.getSelectionModel().selectFirst();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    } else if (event.getCode() \u003d\u003d KeyCode.TAB) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                        acSuggestions.requestFocus();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                        setFirstEntry(latestQuery);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                        acSuggestions.getItems().clear();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                });"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                /*"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                Click on the word to autofill"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                 */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                acSuggestions.setOnMouseClicked(event -\u003e {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    if (acSuggestions.getSelectionModel().getSelectedItem() !\u003d null) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                        setTextField(latestQuery);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                        acSuggestions.getItems().clear();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                });"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                /*"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                Press ENTER or TAB when a word is selected to autofill"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                acSuggestions.setOnKeyPressed(event -\u003e {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    if (event.getCode() \u003d\u003d KeyCode.ENTER || event.getCode() \u003d\u003d KeyCode.TAB) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                        setTextField(latestQuery);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                        acSuggestions.getItems().clear();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                });"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        });"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Update textField based on the query and caret position"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @param currentQuery target query to be replaced"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private void setTextField(String currentQuery) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(newText);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        int diffLength \u003d caretPos - currentQuery.length();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (caretPos \u003d\u003d anchorPos) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            sb.replace(diffLength, caretPos,"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                acSuggestions.getSelectionModel().getSelectedItem());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        int newCaretPos \u003d diffLength + acSuggestions.getSelectionModel().getSelectedItem().length();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        commandTextField.setText(sb.toString());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        commandTextField.requestFocus();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        A bit of hack to force the caret appear at updated position"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "         */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        commandTextField.positionCaret(newCaretPos);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Automatically set the first word to textField"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @param currentQuery target query to be filled"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private void setFirstEntry(String currentQuery) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(newText);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        acSuggestions.getSelectionModel().selectFirst();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        int diffLength \u003d caretPos - currentQuery.length();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (caretPos \u003d\u003d anchorPos) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            sb.replace(diffLength, caretPos,"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                acSuggestions.getSelectionModel().getSelectedItem());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        int newCaretPos \u003d diffLength + acSuggestions.getSelectionModel().getSelectedItem().length();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        commandTextField.setText(sb.toString());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        commandTextField.requestFocus();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        A bit of hack to force the caret appear at updated position"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "         */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        commandTextField.positionCaret(newCaretPos);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            historyPointer.next();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Initializes a history pointer."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        historyPointer \u003d new HistoryPointer(history);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        historyPointer.add(\"\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Handles the key for navigating history, {@code keyCombination}."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private void handleHistoryNavigation() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 KeyCombination.valueOf(\"F3\").match(event)) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                navigateToPreviousInput();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            } else if (event.getTarget() instanceof TextInputControl \u0026\u0026 KeyCombination.valueOf(\"F4\").match(event)) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                navigateToNextInput();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        });"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assert historyPointer !\u003d null;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (!historyPointer.hasPrevious()) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        getHistory(historyPointer.previous());"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assert historyPointer !\u003d null;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (!historyPointer.hasNext()) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        getHistory(historyPointer.next());"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private void getHistory(String text) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Query} using a {@code QueryCard}."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class AutocompleteListViewCell extends ListCell\u003cString\u003e {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        protected void updateItem(String query, boolean empty) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            super.updateItem(query, empty);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            if (empty || query \u003d\u003d null) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                setGraphic(new QueryCard(query).getRoot());"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 354,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExpenseCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * An UI component that displays information of a {@code Expense}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public class ExpenseCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static final String FXML \u003d \"ExpenseCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on ExpenseList level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public final Expense expense;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private Label amount;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private Label currency;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ExpenseCard(Expense expense, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.expense \u003d expense;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        name.setText(expense.getName().fullName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (expense.isForeign()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            amount.setText(String.format(\"%.2f\", expense.getConvertedAmount()) + \" SGD\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            currency.setText(\"(\" + expense.getAmount() + expense.getCurrency().toString() + \")\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            amount.setText(expense.getAmount().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            currency.setText(expense.getCurrency().name);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        date.setText(expense.getDate().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (expense.getTag().tagName.equals(\"\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        tags.getChildren().add(new Label(expense.getTag().tagName));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (!(other instanceof ExpenseCard)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        ExpenseCard card \u003d (ExpenseCard) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u0026\u0026 expense.equals(card.expense);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 16,
      "muhammadaljunied": 13,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExpenseListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Panel containing the list of expenses."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public class ExpenseListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static final String FXML \u003d \"ExpenseListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ExpenseListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private ListView\u003cExpense\u003e expenseListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ExpenseListPanel(ObservableList\u003cExpense\u003e expenseList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        expenseListView.setItems(expenseList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        expenseListView.setCellFactory(listView -\u003e new ExpenseListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Expense} using a {@code ExpenseCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    class ExpenseListViewCell extends ListCell\u003cExpense\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        protected void updateItem(Expense expense, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            super.updateItem(expense, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            if (empty || expense \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                setGraphic(new ExpenseCard(expense, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s1-cs2103-t14-4.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HistoryPointer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * This class is used to point to an element in the history list and iterate through the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public class HistoryPointer {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private List\u003cString\u003e historyLists;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Constructs {@code HistoryPointer} which is backed by a defensive copy of {@code list}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * The cursor points to the last element in {@code list}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public HistoryPointer(List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.historyLists \u003d new ArrayList\u003c\u003e(list);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        index \u003d this.historyLists.size() - 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Appends {@code element} to the end of the list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void add(String history) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        historyLists.add(history);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns true if calling {@code #next()} does not throw a {@code NoSuchElementException}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public boolean hasNext() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        int nextIndex \u003d index + 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return isWithinBounds(nextIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns true if calling {@code #previous()} does not throw a {@code NoSuchElementException}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public boolean hasPrevious() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        int previousIndex \u003d index - 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return isWithinBounds(previousIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns true if calling {@code #current()} does not throw a {@code NoSuchElementException}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public boolean hasCurrent() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return isWithinBounds(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private boolean isWithinBounds(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c historyLists.size();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Points to the next element in the list and advances the cursor position."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @throws NoSuchElementException if there is no more next element in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public String next() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (!hasNext()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return historyLists.get(++index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Points the previous element in the list and moves the cursor position backwards."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @throws NoSuchElementException if there is no more previous element in the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public String previous() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (!hasPrevious()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return historyLists.get(--index);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Returns the current element in the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * @throws NoSuchElementException if the list is empty."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public String current() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (!hasCurrent()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return historyLists.get(index);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (!(other instanceof HistoryPointer)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        HistoryPointer iterator \u003d (HistoryPointer) other;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return historyLists.equals(iterator.historyLists) \u0026\u0026 index \u003d\u003d iterator.index;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private ExpenseListPanel expenseListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private BudgetListPanel budgetListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private StatsDisplay statsDisplay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private StackPane leftListPanelPlaceHolder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private StackPane rightListPanelPlaceHolder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private StackPane statsDisplayPlaceHolder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private Text expenseListTitle;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private Text resultListTitle;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        expenseListPanel \u003d new ExpenseListPanel(logic.getFilteredExpenseList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        leftListPanelPlaceHolder.getChildren().add(expenseListPanel.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        expenseListPanel \u003d new ExpenseListPanel(logic.getFilteredExpenseList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        rightListPanelPlaceHolder.getChildren().add(expenseListPanel.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        statsDisplay \u003d new StatsDisplay();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        statsDisplay.setDisplayDataExpenses(logic.getFilteredExpenseList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        statsDisplayPlaceHolder.getChildren().add(statsDisplay.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        //StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getExpenseListFilePath());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        //statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ExpenseListPanel getExpenseListPanel() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return expenseListPanel;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public BudgetListPanel getBudgetListPanel() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return budgetListPanel;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            // List Expenses on Right panel"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            if (commandResult.getExpenseList() !\u003d null \u0026\u0026 commandResult.getBudgetList() \u003d\u003d null) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                expenseListPanel \u003d new ExpenseListPanel(commandResult.getExpenseList());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                rightListPanelPlaceHolder.getChildren().add(expenseListPanel.getRoot());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                if (commandResult.getBudget() !\u003d null) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    statsDisplay.setDisplayDataBudgetWithExpenses(commandResult.getExpenseList(),"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                        commandResult.getBudget());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                    resultListTitle.setText(commandResult.getBudget().getName().toString());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    statsDisplay.setDisplayDataExpenses(commandResult.getExpenseList());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                    resultListTitle.setText(\"Default Expenses\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                // List Budget on Right panel"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            } else if (commandResult.getExpenseList() \u003d\u003d null \u0026\u0026 commandResult.getBudgetList() !\u003d null) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                budgetListPanel \u003d new BudgetListPanel(commandResult.getBudgetList());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                rightListPanelPlaceHolder.getChildren().add(budgetListPanel.getRoot());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                statsDisplay.setDisplayDataBudgets(commandResult.getBudgetList());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                resultListTitle.setText(\"All Budgets\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            expenseListPanel \u003d new ExpenseListPanel(logic.updateExpenses());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            //Update Left panel with all expenses."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            leftListPanelPlaceHolder.getChildren().add(expenseListPanel.getRoot());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 43,
      "choonx99": 1,
      "muhammadaljunied": 13,
      "-": 187
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/QueryCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * An UI component that displays information of a {@code Query}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public class QueryCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static final String FXML \u003d \"QueryCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private HBox apCard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private Label query;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public QueryCard(String word) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        query.setText(word);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatsDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * Class to display the statistics."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public class StatsDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static final String FXML \u003d \"StatsDisplay.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private PieChart piechart;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public StatsDisplay() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void setDisplayDataExpenses(ObservableList\u003cExpense\u003e displayData) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d getPieChartDataFromExpenses(displayData);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        piechart.setData(pieChartData);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        piechart.setLabelLineLength(15.00);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        piechart.setTitle(\"Expenses\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void setDisplayDataBudgets(ObservableList\u003cBudget\u003e displayData) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d getPieChartDataFromBudgets(displayData);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        piechart.setData(pieChartData);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        piechart.setLabelLineLength(15.00);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        piechart.setTitle(\"Budgets\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void setDisplayDataBudgetWithExpenses(ObservableList\u003cExpense\u003e displayData, Budget budget) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d getPieChartDataFromExpensesInBudget(displayData, budget);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        piechart.setData(pieChartData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        piechart.setLabelLineLength(15.00);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        piechart.setLabelsVisible(true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        piechart.setTitle(budget.getName().fullName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ObservableList\u003cPieChart.Data\u003e getPieChartDataFromExpenses(ObservableList\u003cExpense\u003e displayData) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        HashMap\u003cTag, Double\u003e taggedExpenses \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        for (Expense expense : displayData) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            Tag expenseTag \u003d expense.getTag();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            if (taggedExpenses.containsKey(expenseTag)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                Double currentTotalAmount \u003d taggedExpenses.get(expenseTag);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                Double newTotalAmount \u003d currentTotalAmount + expense.getAmount().getValue();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                taggedExpenses.put(expenseTag, newTotalAmount);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                taggedExpenses.put(expenseTag, expense.getAmount().getValue());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        for (Map.Entry\u003cTag, Double\u003e entry : taggedExpenses.entrySet()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            String tagName \u003d entry.getKey().tagName.equals(\"\") ? \"Untagged\" : entry.getKey().tagName;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            Double totalAmount \u003d entry.getValue();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            String name \u003d tagName + \"-\" + String.format(\"%.1f\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                totalAmount / getOverallAmountFromExpenses(displayData) * 100) + \"%\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            PieChart.Data data \u003d new PieChart.Data(name, totalAmount);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            pieChartData.add(data);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return pieChartData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ObservableList\u003cPieChart.Data\u003e getPieChartDataFromExpensesInBudget(ObservableList\u003cExpense\u003e displayData,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                                                                             Budget budget) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        HashMap\u003cTag, Double\u003e taggedExpenses \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        for (Expense expense : displayData) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            Tag expenseTag \u003d expense.getTag();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            if (taggedExpenses.containsKey(expenseTag)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                Double currentTotalAmount \u003d taggedExpenses.get(expenseTag);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                Double newTotalAmount \u003d currentTotalAmount + expense.getAmount().getValue();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                taggedExpenses.put(expenseTag, newTotalAmount);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                taggedExpenses.put(expenseTag, expense.getAmount().getValue());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        if (budget.isBudgetPositive()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            double amountLeft \u003d budget.getAmountLeft().getValue();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            for (Map.Entry\u003cTag, Double\u003e entry : taggedExpenses.entrySet()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                String tagName \u003d entry.getKey().tagName.equals(\"\") ? \"Untagged\" : entry.getKey().tagName;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                Double totalAmount \u003d entry.getValue();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                String name \u003d tagName + \"-\" + String.format(\"%.1f\", ("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    totalAmount / (getOverallAmountFromExpenses(displayData) + amountLeft)) * 100) + \"%\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                PieChart.Data data \u003d new PieChart.Data(name, totalAmount);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                pieChartData.add(data);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            String nameLeft \u003d \"Amount Left\" + \"-\" + String.format(\"%.1f\", ("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                amountLeft / (getOverallAmountFromExpenses(displayData) + amountLeft)) * 100) + \"%\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            PieChart.Data dataLeft \u003d new PieChart.Data(nameLeft, amountLeft);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            pieChartData.add(dataLeft);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            for (Map.Entry\u003cTag, Double\u003e entry : taggedExpenses.entrySet()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                String tagName \u003d entry.getKey().tagName.equals(\"\") ? \"Untagged\" : entry.getKey().tagName;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                Double totalAmount \u003d entry.getValue();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                String name \u003d tagName + \"-\" + String.format(\"%.1f\", ("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    totalAmount / getOverallAmountFromExpenses(displayData)) * 100) + \"%\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                PieChart.Data data \u003d new PieChart.Data(name, totalAmount);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                pieChartData.add(data);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return pieChartData;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ObservableList\u003cPieChart.Data\u003e getPieChartDataFromBudgets(ObservableList\u003cBudget\u003e displayData) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        for (Budget budget : displayData) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            String budgetName \u003d budget.getName().fullName;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            double totalAmount \u003d budget.getConvertedAmount().getValue();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            String name \u003d budgetName + \"-\" + String.format(\"%.1f\","
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                totalAmount / getOverallAmountFromBudgets(displayData) * 100) + \"%\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            PieChart.Data data \u003d new PieChart.Data(name, totalAmount);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            pieChartData.add(data);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return pieChartData;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private double getOverallAmountFromExpenses(ObservableList\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        double total \u003d 0;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        for (Expense expense : expenses) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            total +\u003d expense.getAmount().getValue();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return total;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private double getOverallAmountFromBudgets(ObservableList\u003cBudget\u003e budgets) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        double total \u003d 0;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        for (Budget budget : budgets) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            total +\u003d budget.getConvertedAmount().getValue();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return total;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 125,
      "choonx99": 32,
      "muhammadaljunied": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/expense_list_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/YellowTheme.css\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 20,
      "choonx99": 1,
      "-": 63
    }
  },
  {
    "path": "src/main/resources/data/vocabulary.txt",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "96"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": "1000\texpense"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "1000\tclear"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "1000\tdelete"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "1000\teditExpense"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "1000\texit"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "1000\tfind"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "1000\thelp"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "1000\tlistDefaultExpenses"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "1000\tbudget"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "1000\tview"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "1000\thistory"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "1000\tlistBudgets"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "1000\teditBudget"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tn/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\ta/"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\td/"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tt/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\ted/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\t2019"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\t2018"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\t2017"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\t2016"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\t01"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\t02"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\t03"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\t04"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\t05"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\t06"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\t07"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\t08"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\t09"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\t10"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\t11"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\t12"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\t13"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\t14"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\t15"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\t16"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\t17"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\t18"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\t19"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\t20"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\t21"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\t22"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\t23"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\t24"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\t25"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\t26"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\t27"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\t28"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\t29"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\t30"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\t31"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tCAD"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tHKD"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tISK"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tPHP"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tDKK"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tHUF"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tCZK"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tGBP"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tRON"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tSEK"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tIDR"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tINR"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tBRL"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tRUB"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tHRK"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tJPY"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tTHB"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tCHF"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tEUR"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tMYR"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tBGN"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tTRY"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tCNY"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tNOK"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tNZD"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tZAR"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tUSD"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tMXN"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tSGD"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tAUD"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tILS"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tKRW"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tPLN"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tcoffee"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\ttextbook"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tfood"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\teducation"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tschool"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tbreakfast"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tlunch"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\tdinner"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\ttravel"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "100\thangout"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 91,
      "choonx99": 6
    }
  },
  {
    "path": "src/main/resources/view/BudgetCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            \u003cHBox prefWidth\u003d\"256.0\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    \u003cLabel fx:id\u003d\"amountText\" styleClass\u003d\"cell_small_label\" text\u003d\"Amount Set: \" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    \u003cLabel fx:id\u003d\"amount\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$amount\" \u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                            \u003cInsets left\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    \u003cLabel fx:id\u003d\"currency\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$currency\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                            \u003cInsets left\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            \u003cHBox prefWidth\u003d\"256.0\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    \u003cLabel fx:id\u003d\"amountLeftText\" styleClass\u003d\"cell_small_label\" text\u003d\"Amount Left: \" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    \u003cLabel fx:id\u003d\"amountLeft\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$amountLeft\" \u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                            \u003cInsets left\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    \u003cLabel fx:id\u003d\"currencyLeft\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$currency\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                            \u003cInsets left\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    \u003cLabel fx:id\u003d\"startDateText\" styleClass\u003d\"cell_small_label\" text\u003d\"Start: \" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    \u003cLabel fx:id\u003d\"startDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startDate\" \u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                            \u003cInsets left\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    \u003cLabel fx:id\u003d\"endDateText\" styleClass\u003d\"cell_small_label\" text\u003d\"End: \" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    \u003cLabel fx:id\u003d\"endDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$endDate\" \u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                            \u003cInsets left\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 1,
      "choonx99": 84
    }
  },
  {
    "path": "src/main/resources/view/BudgetListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "  \u003cListView fx:id\u003d\"budgetListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "choonx99": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    \u003cVBox\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        \u003cListView fx:id\u003d\"acSuggestions\" maxHeight\u003d\"80\" prefHeight\u003d\"80\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 6,
      "-": 9
    }
  },
  {
    "path": "src/main/resources/view/ExpenseCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    \u003cLabel fx:id\u003d\"amount\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$amount\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    \u003cLabel fx:id\u003d\"currency\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$currency\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                            \u003cInsets left\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 48
    }
  },
  {
    "path": "src/main/resources/view/ExpenseListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "  \u003cListView fx:id\u003d\"expenseListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-background: #E3D598;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 2,
      "-": 18
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"320\" onCloseRequest\u003d\"#handleExit\" title\u003d\"MYMorise\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        \u003cImage url\u003d\"@/images/expense_list_32.png\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                \u003cURL value\u003d\"@YellowTheme.css\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                \u003cURL value\u003d\"@Piechart.css\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                           maxHeight\u003d\"115\" minHeight\u003d\"115\" prefHeight\u003d\"115\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"150\" minHeight\u003d\"150\" prefHeight\u003d\"150\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                           styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                \u003cHBox VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                    \u003cVBox fx:id\u003d\"expenseList\" maxWidth\u003d\"450\" minWidth\u003d\"320\" prefWidth\u003d\"320\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                          styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                        \u003cText fx:id\u003d\"expenseListTitle\" fill\u003d\"BLACK\" text\u003d\"All Expenses\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                            \u003cfont\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                                \u003cFont size\u003d\"18.0\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                            \u003c/font\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                        \u003c/Text\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"leftListPanelPlaceHolder\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                                \u003cInsets top\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                    \u003cVBox fx:id\u003d\"expenseList2\" maxWidth\u003d\"450\" minWidth\u003d\"320\" prefWidth\u003d\"320\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                          styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                        \u003cText fx:id\u003d\"resultListTitle\" fill\u003d\"BLACK\" text\u003d\"Default Expenses\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                            \u003cfont\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                                \u003cFont size\u003d\"18.0\"/\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                            \u003c/font\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                        \u003c/Text\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"rightListPanelPlaceHolder\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                                \u003cInsets top\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                    \u003cVBox fx:id\u003d\"stats\" minHeight\u003d\"150\" minWidth\u003d\"480\" prefWidth\u003d\"480\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                          HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"statsDisplayPlaceHolder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                \u003c!--                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e--\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 18,
      "choonx99": 11,
      "muhammadaljunied": 29,
      "-": 43
    }
  },
  {
    "path": "src/main/resources/view/Piechart.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ".chart-pie {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    -fx-border-color: derive(-fx-pie-color, -40%);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ".chart-pie-label-line {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    -fx-stroke: #8b4513;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    -fx-fill: #8b4513;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": ".chart-title {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "  -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "  -fx-font-size: 18px;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "  -fx-padding: -50px;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ".chart-pie-label {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-fill: #000000;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    -fx-font-size: 1em;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ".chart-legend {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    -fx-background-color: #fafad2;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ".chart-legend-item {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    -fx-font-size: 10px;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 22,
      "choonx99": 5,
      "muhammadaljunied": 2
    }
  },
  {
    "path": "src/main/resources/view/QueryCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003cHBox id\u003d\"apCard\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    \u003cLabel fx:id\u003d\"query\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$query\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003c/HBox\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 12
    }
  },
  {
    "path": "src/main/resources/view/StatsDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003c?import javafx.scene.chart.PieChart?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    \u003cPieChart fx:id\u003d\"piechart\" VBox.vgrow\u003d\"NEVER\" prefWidth\u003d\"1500\" prefHeight\u003d\"1500\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 7
    }
  },
  {
    "path": "src/main/resources/view/YellowTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-background-color: derive(#DDCB82, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    background-color: #000000; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    -fx-font-family: \"Comic Sans MS\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    -fx-font-family: \"Comic Sans MS\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    -fx-font-family: \"Comic Sans MS\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    -fx-font-family: \"Palatino\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-base: #DDCB82;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-control-inner-background: #DDCB82;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-background-color: #DDCB82;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    -fx-border-color: transparent transparent derive(-fx-base, 80%) transparent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-background-color: derive(#DDCB82, 20%);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-background-color: derive(#DDCB82, 20%);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-background-color: derive(#DDCB82, 20%);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap: 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-background-color: #C5B39A;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-background-color: #EBC685;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-background-color: #FFFFFF;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    -fx-font-family: \"Palatino\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    -fx-font-family: \"Palatino\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-background-color: derive(#DDCB82, 20%);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-background-color: derive(#DDCB82, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-border-color: derive(#DDCB82, 10%);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-background-color: derive(#DDCB82, 30%);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    -fx-font-family: \"Comic Sans MS\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-background-color: derive(#DDCB82, 30%);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-border-color: derive(#DDCB82, 25%);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-background-color: derive(#DDCB82, 30%);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-border-color: derive(#DDCB82, 30%);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-background-color: derive(#DDCB82, 30%);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-background-color: derive(#DDCB82, 50%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-background-color: derive(#DDCB82, 20%);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-background-color: #DDCB82;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-text-fill: #DDCB82;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-border-color: black, black;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-background-color: #DDCB82;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-background-color: #DDCB82;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-background-color: #DDCB82;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-background-color: derive(#DDCB82, 25%);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-fill: black;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-background-color: derive(#DDCB82, 20%);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-background-color: derive(#DDCB82, 50%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-border-color: #E3D598 #E3D598 #000000 #E3D598;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    -fx-font-family: \"Comic Sans MS\";"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-background-color: #EBC685;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "choonx99"
        },
        "content": "#expenseListTitle, #resultListTitle {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    -fx-padding: 10px 10px 10px 10px ;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    -fx-font-family: \"Comic Sans MS\";"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 10,
      "choonx99": 52,
      "-": 291
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        final Index fifthExpenseIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(fifthExpenseIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(fifthExpenseIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(fifthExpenseIndex.equals(fifthExpenseIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(fifthExpenseIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(fifthExpenseIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(fifthExpenseIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 7,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/expense_list_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_VODKA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_VODKA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_VODKA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_ALCOHOL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.VODKA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.ListDefaultExpensesCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.BudgetList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ReadOnlyBudgetList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.storage.JsonBudgetListStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.storage.JsonExchangeDataStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.storage.JsonExpenseListStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonExpenseListStorage expenseListStorage \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new JsonExpenseListStorage(temporaryFolder.resolve(\"expenseList.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        JsonExchangeDataStorage exchangeDataStorage \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            new JsonExchangeDataStorage(temporaryFolder.resolve(\"exchangedata.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonBudgetListStorage budgetListStorage \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new JsonBudgetListStorage(temporaryFolder.resolve(\"budgetList.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        StorageManager storage \u003d new StorageManager(expenseListStorage, budgetListStorage,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            exchangeDataStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String listDefaultExpensesCommand \u003d ListDefaultExpensesCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertCommandSuccess(listDefaultExpensesCommand, ListDefaultExpensesCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        // Setup LogicManager with JsonExpenseListIoExceptionThrowingStub"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        JsonExpenseListStorage expenseListStorage \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            new JsonExpenseListIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionExpenseList.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        JsonBudgetListStorage budgetListStorage \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            new JsonBudgetListIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionBudgetList.json\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        JsonExchangeDataStorage exchangeDataStorage \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            new JsonExchangeDataStorage(temporaryFolder.resolve(\"ioExceptionExchangeData.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        StorageManager storage \u003d new StorageManager(expenseListStorage, budgetListStorage, exchangeDataStorage,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            userPrefsStorage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        String addExpenseCommand \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            AddExpenseCommand.COMMAND_WORD + NAME_DESC_VODKA + AMOUNT_DESC_VODKA + DATE_DESC_VODKA"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                + TAG_DESC_ALCOHOL;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Expense expectedExpense \u003d new ExpenseBuilder(VODKA).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        expectedModel.addExpense(expectedExpense);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertCommandFailure(addExpenseCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void getFilteredExpenseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredExpenseList().remove(0));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getExpenseList(), new BudgetList(), model.getExchangeData(),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static class JsonExpenseListIoExceptionThrowingStub extends JsonExpenseListStorage {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        private JsonExpenseListIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public void saveExpenseList(ReadOnlyExpenseList expenseList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static class JsonBudgetListIoExceptionThrowingStub extends JsonBudgetListStorage {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        private JsonBudgetListIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public void saveBudgetList(ReadOnlyBudgetList budgetList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 8,
      "choonx99": 29,
      "muhammadaljunied": 28,
      "-": 135
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddBudgetCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ViewState;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.budget.UniqueBudgetList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.BudgetBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class AddBudgetCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void constructor_nullBudget_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddBudgetCommand(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void execute_budgetAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ModelStubAcceptingBudgetAdded modelStub \u003d new ModelStubAcceptingBudgetAdded();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Budget validBudget \u003d new BudgetBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        CommandResult commandResult \u003d new AddBudgetCommand(validBudget).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(String.format(AddBudgetCommand.MESSAGE_SUCCESS, validBudget), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(Arrays.asList(validBudget), modelStub.budgetsAdded);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void execute_duplicateBudget_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Budget validBudget \u003d new BudgetBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        AddBudgetCommand addBudgetCommand \u003d new AddBudgetCommand(validBudget);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithBudget(validBudget);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertThrows(CommandException.class, AddBudgetCommand.MESSAGE_DUPLICATE_BUDGET, ()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            -\u003e addBudgetCommand.execute(modelStub, commandHistory));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void execute_budgetClash_throwsCommandException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Budget validBudget \u003d new BudgetBuilder().build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithBudget(validBudget);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // same end date but different start date"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Budget otherValidBudget \u003d new BudgetBuilder().withStartDate(BudgetBuilder.VALID_DATE_BEFORE_DEFAULT_START_DATE)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        AddBudgetCommand addBudgetCommand1 \u003d new AddBudgetCommand(otherValidBudget);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertThrows(CommandException.class, AddBudgetCommand.MESSAGE_BUDGET_CLASH, ()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            -\u003e addBudgetCommand1.execute(modelStub, commandHistory));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // same start date but different end date"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        otherValidBudget \u003d new BudgetBuilder().withEndDate(BudgetBuilder.VALID_DATE_AFTER_DEFAULT_END_DATE)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        AddBudgetCommand addBudgetCommand2 \u003d new AddBudgetCommand(otherValidBudget);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertThrows(CommandException.class, AddBudgetCommand.MESSAGE_BUDGET_CLASH, ()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            -\u003e addBudgetCommand2.execute(modelStub, commandHistory));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // both start date and end date are within the period of another budget"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        otherValidBudget \u003d new BudgetBuilder()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            .withStartDate(BudgetBuilder.VALID_DATE_BETWEEN_DEFAULT_START_AND_END_DATES)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            .withEndDate(BudgetBuilder.VALID_DATE_BETWEEN_DEFAULT_START_AND_END_DATES)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        AddBudgetCommand addBudgetCommand3 \u003d new AddBudgetCommand(otherValidBudget);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertThrows(CommandException.class, AddBudgetCommand.MESSAGE_BUDGET_CLASH, ()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            -\u003e addBudgetCommand3.execute(modelStub, commandHistory));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // start date before period of another budget and end date after period of that same budget, overlapping"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        otherValidBudget \u003d new BudgetBuilder()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            .withStartDate(BudgetBuilder.VALID_DATE_BEFORE_DEFAULT_START_DATE)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            .withEndDate(BudgetBuilder.VALID_DATE_AFTER_DEFAULT_END_DATE)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        AddBudgetCommand addBudgetCommand4 \u003d new AddBudgetCommand(otherValidBudget);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertThrows(CommandException.class, AddBudgetCommand.MESSAGE_BUDGET_CLASH, ()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            -\u003e addBudgetCommand4.execute(modelStub, commandHistory));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // start date fall within period of another budget"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        otherValidBudget \u003d new BudgetBuilder()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            .withStartDate(BudgetBuilder.VALID_DATE_BETWEEN_DEFAULT_START_AND_END_DATES)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            .withEndDate(BudgetBuilder.VALID_DATE_AFTER_DEFAULT_END_DATE)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        AddBudgetCommand addBudgetCommand5 \u003d new AddBudgetCommand(otherValidBudget);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertThrows(CommandException.class, AddBudgetCommand.MESSAGE_BUDGET_CLASH, ()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            -\u003e addBudgetCommand5.execute(modelStub, commandHistory));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // end date fall within period of another budget"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        otherValidBudget \u003d new BudgetBuilder()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            .withStartDate(BudgetBuilder.VALID_DATE_BEFORE_DEFAULT_START_DATE)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            .withEndDate(BudgetBuilder.VALID_DATE_BETWEEN_DEFAULT_START_AND_END_DATES)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        AddBudgetCommand addBudgetCommand6 \u003d new AddBudgetCommand(otherValidBudget);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertThrows(CommandException.class, AddBudgetCommand.MESSAGE_BUDGET_CLASH, ()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            -\u003e addBudgetCommand6.execute(modelStub, commandHistory));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Budget shopping \u003d new BudgetBuilder().withName(\"Shopping\").build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Budget food \u003d new BudgetBuilder().withName(\"Food\").build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        AddBudgetCommand addShoppingCommand \u003d new AddBudgetCommand(shopping);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        AddBudgetCommand addFoodCommand \u003d new AddBudgetCommand(food);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(addShoppingCommand.equals(addShoppingCommand));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        AddBudgetCommand addShoppingCommandCopy \u003d new AddBudgetCommand(shopping);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(addShoppingCommand.equals(addShoppingCommandCopy));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(addShoppingCommand.equals(1));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(addShoppingCommand.equals(null));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different budget -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(addShoppingCommand.equals(addFoodCommand));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * A Model stub that contains a single budget."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private class ModelStubWithBudget extends ModelStub {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        private final Budget budget;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ModelStubWithBudget(Budget budget) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            requireNonNull(budget);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            this.budget \u003d budget;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public boolean hasBudgetPeriodClash(Budget b) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return budget.isDateWithinBudgetPeriod(b.getStartDate())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                || budget.isDateWithinBudgetPeriod(b.getEndDate())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                || budget.doesOtherBudgetOverlap(b);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public boolean hasBudget(Budget budget) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            requireNonNull(budget);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return this.budget.isSameBudget(budget);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * A Model stub that always accept the budget being added."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private class ModelStubAcceptingBudgetAdded extends ModelStub {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        final ArrayList\u003cBudget\u003e budgetsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        private ViewState viewState \u003d ViewState.BUDGETLIST;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public boolean hasBudget(Budget budget) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            requireNonNull(budget);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return budgetsAdded.stream().anyMatch(budget::isSameBudget);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public void addBudget(Budget budget) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            requireNonNull(budget);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            budgetsAdded.add(budget);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public boolean hasBudgetPeriodClash(Budget budget) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            for (Budget b : budgetsAdded) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                if (b.isDateWithinBudgetPeriod(budget.getStartDate())"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    || b.isDateWithinBudgetPeriod(budget.getEndDate())"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    || b.doesOtherBudgetOverlap(budget)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public void setViewState(ViewState state) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            viewState \u003d state;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return new FilteredList\u003cBudget\u003e(new UniqueBudgetList().asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 22,
      "choonx99": 179
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalBudgets.getTypicalBudgetList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static seedu.address.testutil.TypicalExchangeData.getTypicalExchangeData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenseList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.exchangedata.ExchangeDataSingleton;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.BudgetBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddExpenseCommand} and {@code AddBudgetCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        ExchangeDataSingleton.updateInstance(getTypicalExchangeData());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        model \u003d new ModelManager(getTypicalExpenseList(), getTypicalBudgetList(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            getTypicalExchangeData(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void execute_newExpense_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getExpenseList(), getTypicalBudgetList(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            model.getExchangeData(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        expectedModel.addExpense(validExpense);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertCommandSuccess(new AddExpenseCommand(validExpense), model,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            String.format(AddExpenseCommand.MESSAGE_SUCCESS, validExpense), expectedModel, commandHistory);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void execute_duplicateExpense_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense expenseInList \u003d model.getExpenseList().getExpenseList().get(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertCommandFailure(new AddExpenseCommand(expenseInList), model,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            AddExpenseCommand.MESSAGE_DUPLICATE_EXPENSE, commandHistory);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void execute_newBudget_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Budget validBudget \u003d new BudgetBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalExpenseList(), model.getBudgetList(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            model.getExchangeData(), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expectedModel.addBudget(validBudget);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertCommandSuccess(new AddBudgetCommand(validBudget), model,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            String.format(AddBudgetCommand.MESSAGE_SUCCESS, validBudget), expectedModel, commandHistory);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void execute_duplicateBudget_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Budget budgetInList \u003d model.getBudgetList().getBudgetList().get(0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertCommandFailure(new AddBudgetCommand(budgetInList), model, AddBudgetCommand.MESSAGE_DUPLICATE_BUDGET,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            commandHistory);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 7,
      "choonx99": 24,
      "muhammadaljunied": 11,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddExpenseCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ExpenseList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ViewState;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.UniqueExpenseList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class AddExpenseCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void constructor_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddExpenseCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void execute_expenseAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ModelStubAcceptingExpenseAdded modelStub \u003d new ModelStubAcceptingExpenseAdded();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        CommandResult commandResult \u003d new AddExpenseCommand(validExpense).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(String.format(AddExpenseCommand.MESSAGE_SUCCESS, validExpense), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(Arrays.asList(validExpense), modelStub.expensesAdded);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void execute_duplicateExpense_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        AddExpenseCommand addExpenseCommand \u003d new AddExpenseCommand(validExpense);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithExpense(validExpense);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertThrows(CommandException.class, AddExpenseCommand.MESSAGE_DUPLICATE_EXPENSE, ()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            -\u003e addExpenseCommand.execute(modelStub, commandHistory));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense shopping \u003d new ExpenseBuilder().withName(\"Adidas shoe\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense food \u003d new ExpenseBuilder().withName(\"Lunch\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        AddExpenseCommand addShoppingCommand \u003d new AddExpenseCommand(shopping);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        AddExpenseCommand addFoodCommand \u003d new AddExpenseCommand(food);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(addShoppingCommand.equals(addShoppingCommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        AddExpenseCommand addShoppingCommandCopy \u003d new AddExpenseCommand(shopping);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(addShoppingCommand.equals(addShoppingCommandCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(addShoppingCommand.equals(1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(addShoppingCommand.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(addShoppingCommand.equals(addFoodCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * A Model stub that contains a single expense."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private class ModelStubWithExpense extends ModelStub {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        private final Expense expense;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ModelStubWithExpense(Expense expense) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            this.expense \u003d expense;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public ViewState getViewState() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return ViewState.DEFAULT_EXPENSELIST;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return this.expense.isSameExpense(expense);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * A Model stub that always accept the expense being added."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private class ModelStubAcceptingExpenseAdded extends ModelStub {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        final ArrayList\u003cExpense\u003e expensesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return expensesAdded.stream().anyMatch(expense::isSameExpense);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            expensesAdded.add(expense);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public ViewState getViewState() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return ViewState.DEFAULT_EXPENSELIST;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return new FilteredList\u003cExpense\u003e(new UniqueExpenseList().asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public ReadOnlyExpenseList getExpenseList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return new ExpenseList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 6,
      "choonx99": 131
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalBudgets.getTypicalBudgetList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static seedu.address.testutil.TypicalExchangeData.getTypicalExchangeData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenseList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.BudgetList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ExpenseList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ViewState;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void execute_emptyExpenseList_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_CLEAR_EXPENSES_SUCCESS, expectedModel,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            commandHistory);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void execute_nonEmptyExpenseList_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalExpenseList(), new BudgetList(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            getTypicalExchangeData(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalExpenseList(), new BudgetList(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            getTypicalExchangeData(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        expectedModel.setExpenseList(new ExpenseList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_CLEAR_EXPENSES_SUCCESS, expectedModel,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            commandHistory);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void execute_emptyBudgetList_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        model.setViewState(ViewState.BUDGETLIST);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_CLEAR_BUDGETS_SUCCESS, expectedModel,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            commandHistory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        model.setViewState(ViewState.DEFAULT_EXPENSELIST);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void execute_nonEmptyBudgetList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Model model \u003d new ModelManager(new ExpenseList(), getTypicalBudgetList(), getTypicalExchangeData(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ExpenseList(), getTypicalBudgetList(), getTypicalExchangeData(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expectedModel.setBudgetList(new BudgetList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        model.setViewState(ViewState.BUDGETLIST);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_CLEAR_BUDGETS_SUCCESS, expectedModel,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            commandHistory);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        model.setViewState(ViewState.DEFAULT_EXPENSELIST);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 8,
      "choonx99": 24,
      "muhammadaljunied": 10,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CURRENCY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ExpenseList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String VALID_NAME_VODKA \u003d \"Belvedere Vodka\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String VALID_AMOUNT_VODKA \u003d \"30\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String VALID_CURRENCY_VODKA \u003d \"SGD\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String VALID_DATE_VODKA \u003d \"13/10/2019\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String VALID_NAME_RUM \u003d \"Ron Zacapa\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String VALID_AMOUNT_RUM \u003d \"200\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String VALID_CURRENCY_RUM \u003d \"USD\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String VALID_DATE_RUM \u003d \"09/05/2019\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String VALID_TAG_ALCOHOL \u003d \"alcohol\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String VALID_TAG_DRINKS \u003d \"drinks\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String VALID_BUDGET_NAME_EGYPT \u003d \"Egypt\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String VALID_BUDGET_AMOUNT_EGYPT \u003d \"9999\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String VALID_BUDGET_CURRENCY_EGYPT \u003d \"EUR\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String VALID_BUDGET_START_DATE_EGYPT \u003d \"01/01/2019\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String VALID_BUDGET_END_DATE_EGYPT \u003d \"31/12/2019\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String NAME_DESC_VODKA \u003d \" \" + PREFIX_NAME + VALID_NAME_VODKA;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String NAME_DESC_RUM \u003d \" \" + PREFIX_NAME + VALID_NAME_RUM;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String AMOUNT_DESC_VODKA \u003d \" \" + PREFIX_AMOUNT + VALID_AMOUNT_VODKA;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String AMOUNT_DESC_RUM \u003d \" \" + PREFIX_AMOUNT + VALID_AMOUNT_RUM;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String CURRENCY_DESC_VODKA \u003d \" \" + PREFIX_CURRENCY + VALID_CURRENCY_VODKA;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String CURRENCY_DESC_RUM \u003d \" \" + PREFIX_CURRENCY + VALID_CURRENCY_RUM;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String DATE_DESC_VODKA \u003d \" \" + PREFIX_DATE + VALID_DATE_VODKA;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String DATE_DESC_RUM \u003d \" \" + PREFIX_DATE + VALID_DATE_RUM;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String TAG_DESC_DRINKS \u003d \" \" + PREFIX_TAG + VALID_TAG_DRINKS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String TAG_DESC_ALCOHOL \u003d \" \" + PREFIX_TAG + VALID_TAG_ALCOHOL;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \" \"; // empty string not allowed in name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String INVALID_AMOUNT_DESC \u003d \" \" + PREFIX_AMOUNT + \"911a\"; // character not allowed in amounts"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String INVALID_CURRENCY_DESC \u003d \" \" + PREFIX_CURRENCY + \"X12\"; // number not allowed in amounts"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"13/12/19\"; // year must be of format yyyy"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"alcohol*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final EditExpenseCommand.EditExpenseDescriptor DESC_VODKA;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final EditExpenseCommand.EditExpenseDescriptor DESC_RUM;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        DESC_VODKA \u003d new EditExpenseDescriptorBuilder().withName(VALID_NAME_VODKA)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .withCurrency(VALID_CURRENCY_VODKA).withAmount(VALID_AMOUNT_VODKA).withDate(VALID_DATE_VODKA)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .withTag(VALID_TAG_DRINKS).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        DESC_RUM \u003d new EditExpenseDescriptorBuilder().withName(VALID_NAME_RUM)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .withCurrency(VALID_CURRENCY_RUM).withAmount(VALID_AMOUNT_RUM).withDate(VALID_DATE_RUM)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .withTag(VALID_TAG_ALCOHOL).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                                            Model expectedModel, CommandHistory actualCommandHistory) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model, CommandHistory)}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                                            Model expectedModel, CommandHistory actualCommandHistory) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel, actualCommandHistory);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * - the expenselist, filtered expense list and selected expense in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "                                            CommandHistory actualCommandHistory) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ExpenseList expectedExpenseList \u003d new ExpenseList(actualModel.getExpenseList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        List\u003cExpense\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredExpenseList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel, actualCommandHistory));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(expectedExpenseList, actualModel.getExpenseList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredExpenseList());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the expense at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * {@code model}\u0027s expenselist."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static void showExpenseAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense expense \u003d model.getFilteredExpenseList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        final String[] splitName \u003d expense.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        model.updateFilteredExpenseList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(1, model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 20,
      "choonx99": 46,
      "muhammadaljunied": 10,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showExpenseAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.testutil.TypicalBudgets.getTypicalBudgetList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static seedu.address.testutil.TypicalExchangeData.getTypicalExchangeData;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenseList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ViewState;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalExpenseList(), getTypicalBudgetList(), getTypicalExchangeData(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void execute_validIndexUnfilteredExpenseList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense expenseToDelete \u003d model.getFilteredExpenseList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_EXPENSE_SUCCESS, expenseToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getExpenseList(), getTypicalBudgetList(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            model.getExchangeData(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        expectedModel.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel, commandHistory);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //    public void execute_invalidIndexUnfilteredExpenseList_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenseList().size() + 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void execute_validIndexFilteredExpenseList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense expenseToDelete \u003d model.getFilteredExpenseList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_EXPENSE_SUCCESS, expenseToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getExpenseList(), getTypicalBudgetList(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            model.getExchangeData(), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        expectedModel.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        showNoExpense(expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel, commandHistory);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //    public void execute_invalidIndexFilteredExpenseList_throwsCommandException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //        showExpenseAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //        Index outOfBoundIndex \u003d INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //        // ensures that outOfBoundIndex is still in bounds of expense list list"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getExpenseList().getExpenseList().size());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    //TODO this test has unsolved issues."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void execute_validIndexUnfilteredBudgetList_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        model.setViewState(ViewState.BUDGETLIST);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Budget budgetToDelete \u003d model.getFilteredBudgetList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_BUDGET_SUCCESS, budgetToDelete);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalExpenseList(), model.getBudgetList(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            model.getExchangeData(), new UserPrefs());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expectedModel.deleteBudget(budgetToDelete);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel, commandHistory);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        model.setViewState(ViewState.DEFAULT_EXPENSELIST);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void execute_invalidIndexUnfilteredBudgetList_throwsCommandException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        model.setViewState(ViewState.BUDGETLIST);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBudgetList().size() + 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_BUDGET_DISPLAYED_INDEX, commandHistory);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        model.setViewState(ViewState.DEFAULT_EXPENSELIST);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private void showNoExpense(Model model) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        model.updateFilteredExpenseList(p -\u003e false);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(model.getFilteredExpenseList().isEmpty());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 30,
      "choonx99": 38,
      "muhammadaljunied": 9,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditExpenseCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_RUM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_VODKA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_RUM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_RUM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_ALCOHOL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showExpenseAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static seedu.address.testutil.TypicalExchangeData.getTypicalExchangeData;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenseList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.EditExpenseCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.BudgetList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ExpenseList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.exchangedata.ExchangeData;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * EditExpenseCommand."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class EditExpenseCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalExpenseList(), new BudgetList(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        getTypicalExchangeData(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder(editedExpense).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditExpenseCommand editExpenseCommand \u003d new EditExpenseCommand(INDEX_FIRST_ITEM, descriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String expectedMessage \u003d String.format(EditExpenseCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ExpenseList(model.getExpenseList()),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            new BudgetList(model.getBudgetList()),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            new ExchangeData(model.getExchangeData()), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        expectedModel.setExpense(model.getFilteredExpenseList().get(0), editedExpense);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertCommandSuccess(editExpenseCommand, model, expectedMessage, expectedModel, commandHistory);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Index indexLastExpense \u003d Index.fromOneBased(model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Expense lastExpense \u003d model.getFilteredExpenseList().get(indexLastExpense.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        ExpenseBuilder expenseInList \u003d new ExpenseBuilder(lastExpense);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Expense editedExpense \u003d expenseInList.withName(VALID_NAME_RUM).withAmount(VALID_AMOUNT_RUM)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .withTag(VALID_TAG_ALCOHOL).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder().withName(VALID_NAME_RUM)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .withAmount(VALID_AMOUNT_RUM).withTag(VALID_TAG_ALCOHOL).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditExpenseCommand editExpenseCommand \u003d new EditExpenseCommand(indexLastExpense, descriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String expectedMessage \u003d String.format(EditExpenseCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ExpenseList(model.getExpenseList()),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            new BudgetList(model.getBudgetList()),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            new ExchangeData(model.getExchangeData()),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        expectedModel.setExpense(lastExpense, editedExpense);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertCommandSuccess(editExpenseCommand, model, expectedMessage, expectedModel, commandHistory);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditExpenseCommand editExpenseCommand \u003d new EditExpenseCommand(INDEX_FIRST_ITEM, new EditExpenseDescriptor());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense editedExpense \u003d model.getFilteredExpenseList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String expectedMessage \u003d String.format(EditExpenseCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ExpenseList(model.getExpenseList()),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            new BudgetList(model.getBudgetList()), new ExchangeData(model.getExchangeData()), new UserPrefs());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertCommandSuccess(editExpenseCommand, model, expectedMessage, expectedModel, commandHistory);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void execute_duplicateExpenseUnfilteredList_failure() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense firstExpense \u003d model.getFilteredExpenseList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder(firstExpense).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditExpenseCommand editExpenseCommand \u003d new EditExpenseCommand(INDEX_SECOND_ITEM, descriptor);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertCommandFailure(editExpenseCommand, model, EditExpenseCommand.MESSAGE_DUPLICATE_EXPENSE, commandHistory);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void execute_duplicateExpenseFilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // edit expense in filtered list into a duplicate in expense list"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense expenseInList \u003d model.getExpenseList().getExpenseList().get(INDEX_SECOND_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditExpenseCommand editExpenseCommand \u003d new EditExpenseCommand(INDEX_FIRST_ITEM,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new EditExpenseDescriptorBuilder(expenseInList).build());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertCommandFailure(editExpenseCommand, model, EditExpenseCommand.MESSAGE_DUPLICATE_EXPENSE, commandHistory);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void execute_invalidExpenseIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenseList().size() + 1);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder().withName(VALID_NAME_RUM).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditExpenseCommand editExpenseCommand \u003d new EditExpenseCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertCommandFailure(editExpenseCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            commandHistory);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * but smaller than size of expense list"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void execute_invalidExpenseIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of expense list list"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getExpenseList().getExpenseList().size());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditExpenseCommand editExpenseCommand \u003d new EditExpenseCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new EditExpenseDescriptorBuilder().withName(VALID_NAME_RUM).build());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertCommandFailure(editExpenseCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            commandHistory);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        final EditExpenseCommand standardCommand \u003d new EditExpenseCommand(INDEX_FIRST_ITEM, DESC_VODKA);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditExpenseDescriptor copyDescriptor \u003d new EditExpenseDescriptor(DESC_VODKA);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditExpenseCommand commandWithSameValues \u003d new EditExpenseCommand(INDEX_FIRST_ITEM, copyDescriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(standardCommand.equals(new EditExpenseCommand(INDEX_SECOND_ITEM, DESC_VODKA)));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(standardCommand.equals(new EditExpenseCommand(INDEX_FIRST_ITEM, DESC_RUM)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 1,
      "choonx99": 62,
      "muhammadaljunied": 47,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditExpenseDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_RUM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_VODKA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_RUM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_RUM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_RUM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_ALCOHOL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.EditExpenseCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class EditExpenseDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditExpenseDescriptor descriptorWithSameValues \u003d new EditExpenseDescriptor(DESC_VODKA);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(DESC_VODKA.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(DESC_VODKA.equals(DESC_VODKA));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(DESC_VODKA.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(DESC_VODKA.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(DESC_VODKA.equals(DESC_RUM));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditExpenseDescriptor editedVodka \u003d new EditExpenseDescriptorBuilder(DESC_VODKA)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                .withName(VALID_NAME_RUM).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(DESC_VODKA.equals(editedVodka));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different amount -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        editedVodka \u003d new EditExpenseDescriptorBuilder(DESC_VODKA).withAmount(VALID_AMOUNT_RUM).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(DESC_VODKA.equals(editedVodka));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        editedVodka \u003d new EditExpenseDescriptorBuilder(DESC_VODKA).withDate(VALID_DATE_RUM).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(DESC_VODKA.equals(editedVodka));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        editedVodka \u003d new EditExpenseDescriptorBuilder(DESC_VODKA).withTag(VALID_TAG_ALCOHOL).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(DESC_VODKA.equals(editedVodka));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 53,
      "muhammadaljunied": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel, commandHistory);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 3,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EXPENSES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EXPENSE_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static seedu.address.testutil.TypicalExchangeData.getTypicalExchangeData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.CHRISTMAS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.SHOPPING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.VALENTINES;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenseList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.BudgetList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalExpenseList(), new BudgetList(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        getTypicalExchangeData(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalExpenseList(), new BudgetList(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        getTypicalExchangeData(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void execute_zeroKeywords_noExpenseFound() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENSE_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        expectedModel.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel, commandHistory);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void execute_multipleKeywords_multipleExpensesFound() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENSES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"shoe Chocolates Socks\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        expectedModel.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel, commandHistory);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertEquals(Arrays.asList(SHOPPING, VALENTINES, CHRISTMAS), model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 5,
      "choonx99": 6,
      "muhammadaljunied": 15,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel, commandHistory);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 3,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HistoryCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, HistoryCommand.MESSAGE_NO_HISTORY, expectedModel, history);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        String command1 \u003d \"view 1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        history.add(command1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            String.format(HistoryCommand.MESSAGE_SUCCESS, command1), expectedModel, history);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        String command2 \u003d \"dummy\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        String command3 \u003d \"clear\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        history.add(command2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        history.add(command3);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            String.join(\"\\n\", command3, command2, command1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, expectedMessage, expectedModel, history);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListDefaultExpensesCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showExpenseAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static seedu.address.testutil.TypicalExchangeData.getTypicalExchangeData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenseList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.BudgetList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListDefaultExpensesCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class ListDefaultExpensesCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        model \u003d new ModelManager(getTypicalExpenseList(), new BudgetList(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            getTypicalExchangeData(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getExpenseList(), new BudgetList(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            model.getExchangeData(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertCommandSuccess(new ListDefaultExpensesCommand(), model, ListDefaultExpensesCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            expectedModel, commandHistory);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertCommandSuccess(new ListDefaultExpensesCommand(), model, ListDefaultExpensesCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            expectedModel, commandHistory);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 46,
      "muhammadaljunied": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ModelStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ReadOnlyBudgetList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ViewState;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.exchangedata.ExchangeData;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public Path getExpenseListFilePath() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setExpenseListFilePath(Path expenseListFilePath) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ObservableList\u003cExpense\u003e getExpenses() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void updateFilteredExpenses(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ReadOnlyExpenseList getExpenseList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setExpenseList(ReadOnlyExpenseList newData) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Path getExchangeDataFilePath() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void setExchangeDataFilePath(Path exchangeDataFilePath) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ExchangeData getExchangeData() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void setExchangeData(ExchangeData exchangeData) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void deleteExpense(Expense target) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public Path getBudgetListFilePath() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setBudgetListFilePath(Path budgetListFilePath) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void addBudget(Budget budget) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ReadOnlyBudgetList getBudgetList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setBudgetList(ReadOnlyBudgetList newData) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public boolean hasBudget(Budget budget) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void deleteBudget(Budget target) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setBudget(Budget target, Budget editedBudget) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ObservableList\u003cBudget\u003e getFilteredBudgetList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void updateFilteredBudgetList(Predicate\u003cBudget\u003e predicate) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public Optional\u003cBudget\u003e getBudgetExpenseFallsInto(Expense expense) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public boolean hasBudgetPeriodClash(Budget budget) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public boolean expenseFallsIntoABudget(Expense expense) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ObservableList\u003cExpense\u003e getExpenseListFromBudget(Budget budgetToView) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ObservableList\u003cExpense\u003e initExpenses() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ViewState getViewState() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void setViewState(ViewState viewState) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public Budget getLastViewedBudget() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setLastViewedBudget(Budget budget) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 25,
      "choonx99": 192
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddExpenseCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_RUM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_VODKA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CURRENCY_DESC_RUM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CURRENCY_DESC_VODKA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_RUM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_VODKA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CURRENCY_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_RUM;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_VODKA;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_ALCOHOL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_DRINKS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_RUM;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_RUM;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_RUM;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DRINKS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.RUM;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.VODKA;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Amount;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Currency;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class AddExpenseCommandParserTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private AddExpenseCommandParser parser \u003d new AddExpenseCommandParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Expense expectedExpense \u003d new ExpenseBuilder(RUM).withTag(VALID_TAG_DRINKS).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            PREAMBLE_WHITESPACE + NAME_DESC_RUM + AMOUNT_DESC_RUM + CURRENCY_DESC_RUM + DATE_DESC_RUM"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                + TAG_DESC_DRINKS, new AddExpenseCommand(expectedExpense));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_VODKA + NAME_DESC_RUM + AMOUNT_DESC_RUM + CURRENCY_DESC_RUM + DATE_DESC_RUM"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            + TAG_DESC_DRINKS, new AddExpenseCommand(expectedExpense));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // multiple amounts - last amount accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            NAME_DESC_RUM + AMOUNT_DESC_VODKA + AMOUNT_DESC_RUM + CURRENCY_DESC_RUM + DATE_DESC_RUM"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                + TAG_DESC_DRINKS, new AddExpenseCommand(expectedExpense));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        // multiple currencies - last currency accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            NAME_DESC_RUM + AMOUNT_DESC_RUM + CURRENCY_DESC_VODKA + CURRENCY_DESC_RUM + DATE_DESC_RUM"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                + TAG_DESC_DRINKS, new AddExpenseCommand(expectedExpense));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // multiple dates - last date accepted"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            NAME_DESC_RUM + AMOUNT_DESC_RUM + CURRENCY_DESC_RUM + DATE_DESC_VODKA + DATE_DESC_RUM"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                + TAG_DESC_DRINKS, new AddExpenseCommand(expectedExpense));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        // tags - accepted"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Expense expectedExpenseMultipleTags \u003d new ExpenseBuilder(RUM).withTag(VALID_TAG_DRINKS)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            NAME_DESC_RUM + AMOUNT_DESC_RUM + CURRENCY_DESC_RUM + DATE_DESC_RUM + TAG_DESC_DRINKS,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            new AddExpenseCommand(expectedExpenseMultipleTags));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Expense expectedExpense \u003d new ExpenseBuilder(VODKA).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_VODKA + AMOUNT_DESC_VODKA + DATE_DESC_VODKA + TAG_DESC_ALCOHOL,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new AddExpenseCommand(expectedExpense));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddExpenseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_RUM + AMOUNT_DESC_RUM + DATE_DESC_RUM,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // missing amount prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_RUM + VALID_AMOUNT_RUM + DATE_DESC_RUM,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_RUM + VALID_AMOUNT_RUM + VALID_DATE_RUM,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + AMOUNT_DESC_RUM + CURRENCY_DESC_RUM + DATE_DESC_RUM"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            + TAG_DESC_ALCOHOL + TAG_DESC_DRINKS, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // invalid amount"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_RUM + INVALID_AMOUNT_DESC + CURRENCY_DESC_RUM + DATE_DESC_RUM"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            + TAG_DESC_ALCOHOL + TAG_DESC_DRINKS, Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        // invalid currency"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_RUM + AMOUNT_DESC_RUM + DATE_DESC_RUM + INVALID_CURRENCY_DESC"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            + TAG_DESC_ALCOHOL + TAG_DESC_DRINKS, Currency.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_RUM + AMOUNT_DESC_RUM + CURRENCY_DESC_RUM + INVALID_DATE_DESC"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            + TAG_DESC_ALCOHOL + TAG_DESC_DRINKS, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_RUM + AMOUNT_DESC_RUM + CURRENCY_DESC_RUM + DATE_DESC_RUM"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            + INVALID_TAG_DESC + VALID_TAG_DRINKS, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + AMOUNT_DESC_RUM + CURRENCY_DESC_RUM + INVALID_DATE_DESC,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            PREAMBLE_NON_EMPTY + NAME_DESC_RUM + AMOUNT_DESC_RUM + CURRENCY_DESC_RUM + DATE_DESC_RUM"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                + TAG_DESC_ALCOHOL + TAG_DESC_DRINKS,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 27,
      "choonx99": 42,
      "muhammadaljunied": 12,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_ITEM));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditExpenseCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_RUM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_VODKA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CURRENCY_DESC_RUM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CURRENCY_DESC_VODKA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_RUM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_VODKA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CURRENCY_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_VODKA;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_ALCOHOL;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_DRINKS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_RUM;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_VODKA;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CURRENCY_RUM;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CURRENCY_VODKA;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_RUM;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_VODKA;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_VODKA;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_ALCOHOL;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DRINKS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.EditExpenseCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.EditExpenseCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Amount;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Currency;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Date;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class EditExpenseCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditExpenseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private EditExpenseCommandParser parser \u003d new EditExpenseCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_VODKA, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertParseFailure(parser, \"1\", EditExpenseCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_VODKA, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_VODKA, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AMOUNT_DESC, Amount.MESSAGE_CONSTRAINTS); // invalid amount"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CURRENCY_DESC, Currency.MESSAGE_CONSTRAINTS); // invalid currency"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE_DESC, Date.MESSAGE_CONSTRAINTS); // invalid date"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // invalid amount followed by valid date"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AMOUNT_DESC + DATE_DESC_VODKA, Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // valid amount followed by invalid amount. The test case for invalid amount followed by valid amount"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertParseFailure(parser, \"1\" + AMOUNT_DESC_RUM + INVALID_AMOUNT_DESC, Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Expense} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        // NOTE: Above is no longer the case as an expense has only 1 tag and the last tag specified prevails."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        //assertParseFailure(parser, \"1\" + TAG_DESC_DRINKS + TAG_DESC_ALCOHOL + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        //assertParseFailure(parser, \"1\" + TAG_DESC_DRINKS + TAG_EMPTY + TAG_DESC_ALCOHOL, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        //assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_DRINKS + TAG_DESC_ALCOHOL, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_DATE_DESC + VALID_AMOUNT_VODKA,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_RUM + CURRENCY_DESC_VODKA + TAG_DESC_ALCOHOL"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            + DATE_DESC_VODKA + NAME_DESC_VODKA;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder().withName(VALID_NAME_VODKA)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            .withCurrency(VALID_CURRENCY_VODKA).withAmount(VALID_AMOUNT_RUM).withDate(VALID_DATE_VODKA)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .withTag(VALID_TAG_ALCOHOL).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditExpenseCommand expectedCommand \u003d new EditExpenseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_RUM + DATE_DESC_VODKA;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .withAmount(VALID_AMOUNT_RUM).withDate(VALID_DATE_VODKA).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditExpenseCommand expectedCommand \u003d new EditExpenseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_VODKA;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder().withName(VALID_NAME_VODKA).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditExpenseCommand expectedCommand \u003d new EditExpenseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // amount"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_VODKA;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptorBuilder().withAmount(VALID_AMOUNT_VODKA).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expectedCommand \u003d new EditExpenseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        // currency"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CURRENCY_DESC_VODKA;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptorBuilder().withCurrency(VALID_CURRENCY_VODKA).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expectedCommand \u003d new EditExpenseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // date"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DATE_DESC_VODKA;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptorBuilder().withDate(VALID_DATE_VODKA).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expectedCommand \u003d new EditExpenseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_DRINKS;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptorBuilder().withTag(VALID_TAG_DRINKS).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expectedCommand \u003d new EditExpenseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_RUM + DATE_DESC_VODKA"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            + TAG_DESC_ALCOHOL + AMOUNT_DESC_VODKA + DATE_DESC_VODKA + TAG_DESC_DRINKS"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            + AMOUNT_DESC_RUM + DATE_DESC_RUM + CURRENCY_DESC_RUM;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder().withCurrency(VALID_CURRENCY_RUM)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            .withAmount(VALID_AMOUNT_RUM).withDate(VALID_DATE_RUM)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .withTag(VALID_TAG_DRINKS).build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditExpenseCommand expectedCommand \u003d new EditExpenseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_AMOUNT_DESC + AMOUNT_DESC_RUM;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            new EditExpenseDescriptorBuilder().withAmount(VALID_AMOUNT_RUM).build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditExpenseCommand expectedCommand \u003d new EditExpenseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        userInput \u003d"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            targetIndex.getOneBased() + DATE_DESC_RUM + INVALID_AMOUNT_DESC + CURRENCY_DESC_VODKA + AMOUNT_DESC_RUM;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptorBuilder().withCurrency(VALID_CURRENCY_VODKA)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            .withAmount(VALID_AMOUNT_RUM).withDate(VALID_DATE_RUM).build();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expectedCommand \u003d new EditExpenseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder().withTag(\"\").build();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditExpenseCommand expectedCommand \u003d new EditExpenseCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 47,
      "choonx99": 61,
      "muhammadaljunied": 19,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ExpenseListParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.EditExpenseCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.EditExpenseCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.ListDefaultExpensesCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.ExpenseUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.testutil.RawExpenseBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class ExpenseListParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private final MymParser parser \u003d new MymParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Expense rawExpense \u003d new RawExpenseBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense expense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        AddExpenseCommand command \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            (AddExpenseCommand) parser.parseCommand(ExpenseUtil.getAddExpenseCommand(rawExpense));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(new AddExpenseCommand(expense), command);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ITEM.getOneBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_ITEM), command);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Expense rawExpense \u003d new RawExpenseBuilder().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Expense expense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder(expense).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        EditExpenseDescriptor rawDescriptor \u003d new EditExpenseDescriptorBuilder(rawExpense).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        EditExpenseCommand command \u003d (EditExpenseCommand) parser.parseCommand(EditExpenseCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            + INDEX_FIRST_ITEM.getOneBased() + \" \" + ExpenseUtil.getEditExpenseDescriptorDetails(rawDescriptor));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(new EditExpenseCommand(INDEX_FIRST_ITEM, descriptor), command);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(parser.parseCommand(ListDefaultExpensesCommand.COMMAND_WORD) instanceof ListDefaultExpensesCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertTrue(parser.parseCommand(ListDefaultExpensesCommand.COMMAND_WORD + \" 3\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            instanceof ListDefaultExpensesCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 12,
      "choonx99": 17,
      "muhammadaljunied": 1,
      "-": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Lunch\", \"Vodka\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertParseSuccess(parser, \"Lunch Vodka\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertParseSuccess(parser, \" \\n Lunch \\n \\t Vodka  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 3,
      "muhammadaljunied": 1,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Amount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static final String INVALID_NAME \u003d \"  \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final String INVALID_AMOUNT \u003d \"+634\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static final String INVALID_DATE \u003d \"Sat\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static final String WRONG_DATE \u003d \"13/13/2019\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#food\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final String VALID_NAME \u003d \"Coffee\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static final String VALID_AMOUNT \u003d \"6.50\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final String VALID_DATE \u003d \"13/10/2019\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"food\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"drink\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(INDEX_FIRST_ITEM, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(INDEX_FIRST_ITEM, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void parseAmount_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAmount((String) null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void parseAmount_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAmount(INVALID_AMOUNT));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void parseAmount_validValueWithoutWhitespace_returnsAmount() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Amount expectedAmount \u003d new Amount(VALID_AMOUNT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(expectedAmount, ParserUtil.parseAmount(VALID_AMOUNT));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void parseAmount_validValueWithWhitespace_returnsTrimmedAmount() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String amountWithWhitespace \u003d WHITESPACE + VALID_AMOUNT + WHITESPACE;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Amount expectedAmount \u003d new Amount(VALID_AMOUNT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(expectedAmount, ParserUtil.parseAmount(amountWithWhitespace));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void parseDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDate((String) null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void parseDate_invalidValue_throwsDateTimeParseException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(INVALID_DATE));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void parseDate_wrongValue_throwsParseException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(WRONG_DATE));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void parseDate_validValueWithWhitespace_returnsTrimmedDate() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String dateWithWhitespace \u003d WHITESPACE + VALID_DATE + WHITESPACE;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Date expectedDate \u003d new Date(VALID_DATE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(dateWithWhitespace));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void parseDate_validValueWithoutWhitespace_returnsConvertedDate() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        Date expectedDate \u003d new Date(VALID_DATE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(VALID_DATE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        String x \u003d null;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(x));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 12,
      "choonx99": 27,
      "muhammadaljunied": 6,
      "-": 104
    }
  },
  {
    "path": "src/test/java/seedu/address/model/BudgetListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalBudgets.KOREA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalBudgets.getTypicalBudgetList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.budget.exceptions.DuplicateBudgetException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.BudgetBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class BudgetListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private final BudgetList budgetList \u003d new BudgetList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(Collections.emptyList(), budgetList.getBudgetList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e budgetList.resetData(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void resetData_withValidReadOnlyBudgetList_replacesData() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        BudgetList newData \u003d getTypicalBudgetList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        budgetList.resetData(newData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(newData, budgetList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void resetData_withDuplicateBudgets_throwsDuplicateBudgetException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // Two budgets with the same identity fields"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Budget editedKorea \u003d new BudgetBuilder(KOREA).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        List\u003cBudget\u003e newBudgets \u003d Arrays.asList(KOREA, editedKorea);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        BudgetListStub newData \u003d new BudgetListStub(newBudgets);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(DuplicateBudgetException.class, () -\u003e budgetList.resetData(newData));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void hasBudget_nullBudget_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e budgetList.hasBudget(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void hasBudget_budgetNotInBudgetList_returnsFalse() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(budgetList.hasBudget(KOREA));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void hasBudget_budgetInBudgetList_returnsTrue() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        budgetList.addBudget(KOREA);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(budgetList.hasBudget(KOREA));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void getBudgetList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e budgetList.getBudgetList().remove(0));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * A stub ReadOnlyBudgetList whose budgets list can violate interface constraints."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static class BudgetListStub implements ReadOnlyBudgetList {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        private final ObservableList\u003cBudget\u003e budgets \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        BudgetListStub(Collection\u003cBudget\u003e budgets) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            this.budgets.setAll(budgets);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public ObservableList\u003cBudget\u003e getBudgetList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return budgets;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 3,
      "choonx99": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ExpenseListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.FOOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenseList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.exceptions.DuplicateExpenseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class ExpenseListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private final ExpenseList expenseList \u003d new ExpenseList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(Collections.emptyList(), expenseList.getExpenseList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e expenseList.resetData(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void resetData_withValidReadOnlyExpenseList_replacesData() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ExpenseList newData \u003d getTypicalExpenseList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expenseList.resetData(newData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(newData, expenseList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void resetData_withDuplicateExpenses_throwsDuplicateExpenseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // Two expenses with the same identity fields"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Expense editedFood \u003d new ExpenseBuilder(FOOD).withTag(\"RUM\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        List\u003cExpense\u003e newExpenses \u003d Arrays.asList(FOOD, editedFood);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ExpenseListStub newData \u003d new ExpenseListStub(newExpenses);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(DuplicateExpenseException.class, () -\u003e expenseList.resetData(newData));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void hasExpense_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e expenseList.hasExpense(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void hasExpense_expenseNotInExpenseList_returnsFalse() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(expenseList.hasExpense(FOOD));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void hasExpense_expenseInExpenseList_returnsTrue() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expenseList.addExpense(FOOD);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(expenseList.hasExpense(FOOD));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void getExpenseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e expenseList.getExpenseList().remove(0));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * A stub ReadOnlyExpenseList whose expenses list can violate interface constraints."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static class ExpenseListStub implements ReadOnlyExpenseList {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        private final ObservableList\u003cExpense\u003e expenses \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ExpenseListStub(Collection\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            this.expenses.setAll(expenses);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        public ObservableList\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return expenses;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 1,
      "choonx99": 89,
      "muhammadaljunied": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalBudgets.JAPAN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalBudgets.KOREA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.FOOD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.SHOPPING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.exchangedata.ExchangeData;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.BudgetListBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.ExpenseListBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertEquals(new ExpenseList(), new ExpenseList(modelManager.getExpenseList()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(new BudgetList(), new BudgetList(modelManager.getBudgetList()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        userPrefs.setExpenseListFilePath(Paths.get(\"expense/list/file/path\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        userPrefs.setExpenseListFilePath(Paths.get(\"new/expense/list/file/path\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setExpenseListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setExpenseListFilePath(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setExpenseListFilePath_validPath_setsExpenseListFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Path path \u003d Paths.get(\"expense/list/file/path\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        modelManager.setExpenseListFilePath(path);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(path, modelManager.getExpenseListFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void hasExpense_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasExpense(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void hasExpense_expenseNotInExpenseList_returnsFalse() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(modelManager.hasExpense(FOOD));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void hasExpense_expenseInExpenseList_returnsTrue() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        modelManager.addExpense(FOOD);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(modelManager.hasExpense(FOOD));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void getFilteredExpenseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredExpenseList().remove(0));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        ExpenseList expenseList \u003d new ExpenseListBuilder().withExpense(FOOD).withExpense(SHOPPING).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        BudgetList budgetList \u003d new BudgetListBuilder().withBudget(JAPAN).withBudget(KOREA).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        ExpenseList differentExpenseList \u003d new ExpenseList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        BudgetList differentBudgetList \u003d new BudgetList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        ExchangeData exchangeData \u003d new ExchangeData();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        // different expenseList -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentExpenseList, budgetList, exchangeData, userPrefs)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different budgetList -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(expenseList, differentBudgetList, exchangeData, userPrefs)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        String[] keywords \u003d FOOD.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        modelManager.updateFilteredExpenseList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(expenseList, budgetList, exchangeData, userPrefs)));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        modelManager.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        differentUserPrefs.setExpenseListFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(expenseList, budgetList, exchangeData, differentUserPrefs)));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 1,
      "choonx99": 29,
      "muhammadaljunied": 15,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setExpenseListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setExpenseListFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/budget/BudgetTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BUDGET_AMOUNT_EGYPT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BUDGET_CURRENCY_EGYPT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BUDGET_END_DATE_EGYPT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BUDGET_NAME_EGYPT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BUDGET_START_DATE_EGYPT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalBudgets.JAPAN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalBudgets.KOREA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.BudgetBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class BudgetTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void isSameBudget() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(KOREA.isSameBudget(KOREA));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(KOREA.isSameBudget(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different amount and currency -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Budget editedKorea \u003d new BudgetBuilder(KOREA).withAmount(VALID_BUDGET_AMOUNT_EGYPT)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            .withCurrency(VALID_BUDGET_CURRENCY_EGYPT).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(KOREA.isSameBudget(editedKorea));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        editedKorea \u003d new BudgetBuilder(KOREA).withName(VALID_BUDGET_NAME_EGYPT).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(KOREA.isSameBudget(editedKorea));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different currency -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        editedKorea \u003d new BudgetBuilder(KOREA).withCurrency(VALID_BUDGET_CURRENCY_EGYPT).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(KOREA.isSameBudget(editedKorea));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different amount -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        editedKorea \u003d new BudgetBuilder(KOREA).withAmount(VALID_BUDGET_AMOUNT_EGYPT).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(KOREA.isSameBudget(editedKorea));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different start date -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        editedKorea \u003d new BudgetBuilder(KOREA).withStartDate(VALID_BUDGET_START_DATE_EGYPT).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(KOREA.isSameBudget(editedKorea));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different end date -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        editedKorea \u003d new BudgetBuilder(KOREA).withEndDate(VALID_BUDGET_END_DATE_EGYPT).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(KOREA.isSameBudget(editedKorea));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Budget budgetCopy \u003d new BudgetBuilder(KOREA).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(KOREA.equals(budgetCopy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(KOREA.equals(KOREA));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(KOREA.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(KOREA.equals(5));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different Budget -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(KOREA.equals(JAPAN));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Budget editedKorea \u003d new BudgetBuilder(KOREA).withName(VALID_BUDGET_NAME_EGYPT).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(KOREA.equals(editedKorea));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different amount -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        editedKorea \u003d new BudgetBuilder(KOREA).withAmount(VALID_BUDGET_AMOUNT_EGYPT).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(KOREA.equals(editedKorea));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different currency -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        editedKorea \u003d new BudgetBuilder(KOREA).withCurrency(VALID_BUDGET_CURRENCY_EGYPT).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(KOREA.equals(editedKorea));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different start date -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        editedKorea \u003d new BudgetBuilder(KOREA).withStartDate(VALID_BUDGET_START_DATE_EGYPT).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(KOREA.equals(editedKorea));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different end date -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        editedKorea \u003d new BudgetBuilder(KOREA).withEndDate(VALID_BUDGET_END_DATE_EGYPT).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(KOREA.equals(editedKorea));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 3,
      "choonx99": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/model/budget/UniqueBudgetListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BUDGET_AMOUNT_EGYPT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalBudgets.JAPAN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.testutil.TypicalBudgets.KOREA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.budget.exceptions.BudgetNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.budget.exceptions.DuplicateBudgetException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.BudgetBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class UniqueBudgetListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private final UniqueBudgetList uniqueBudgetList \u003d new UniqueBudgetList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void contains_nullBudget_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBudgetList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void contains_budgetNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(uniqueBudgetList.contains(KOREA));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void contains_budgetInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueBudgetList.add(KOREA);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(uniqueBudgetList.contains(KOREA));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void contains_budgetWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueBudgetList.add(KOREA);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Budget newKorea \u003d new BudgetBuilder(KOREA).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(uniqueBudgetList.contains(newKorea));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void add_nullBudget_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBudgetList.add(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void add_duplicateBudget_throwsDuplicateBudgetException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueBudgetList.add(KOREA);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(DuplicateBudgetException.class, () -\u003e uniqueBudgetList.add(KOREA));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setBudget_nullTargetBudget_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBudgetList.setBudget(null, KOREA));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setBudget_nullEditedBudget_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBudgetList.setBudget(KOREA, null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setBudget_targetBudgetNotInList_throwsBudgetNotFoundException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(BudgetNotFoundException.class, () -\u003e uniqueBudgetList.setBudget(KOREA, KOREA));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setBudget_editedBudgetIsSameBudget_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueBudgetList.add(KOREA);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueBudgetList.setBudget(KOREA, KOREA);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        UniqueBudgetList expectedUniqueBudgetList \u003d new UniqueBudgetList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expectedUniqueBudgetList.add(KOREA);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(expectedUniqueBudgetList, uniqueBudgetList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setBudget_editedBudgetHasSameIdentity_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueBudgetList.add(KOREA);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Budget editedKorea \u003d new BudgetBuilder(KOREA).withAmount(VALID_BUDGET_AMOUNT_EGYPT).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueBudgetList.setBudget(KOREA, editedKorea);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        UniqueBudgetList expectedUniqueBudgetList \u003d new UniqueBudgetList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expectedUniqueBudgetList.add(editedKorea);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(expectedUniqueBudgetList, uniqueBudgetList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setBudget_editedBudgetHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueBudgetList.add(KOREA);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueBudgetList.setBudget(KOREA, JAPAN);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        UniqueBudgetList expectedUniqueBudgetList \u003d new UniqueBudgetList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expectedUniqueBudgetList.add(JAPAN);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(expectedUniqueBudgetList, uniqueBudgetList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setBudget_editedBudgetHasNonUniqueIdentity_throwsDuplicateBudgetException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueBudgetList.add(KOREA);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueBudgetList.add(JAPAN);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(DuplicateBudgetException.class, () -\u003e uniqueBudgetList.setBudget(KOREA, JAPAN));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void remove_nullBudget_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBudgetList.remove(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void remove_budgetDoesNotExist_throwsBudgetNotFoundException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(BudgetNotFoundException.class, () -\u003e uniqueBudgetList.remove(KOREA));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void remove_existingBudget_removesBudget() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueBudgetList.add(KOREA);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueBudgetList.remove(KOREA);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        UniqueBudgetList expectedUniqueBudgetList \u003d new UniqueBudgetList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(expectedUniqueBudgetList, uniqueBudgetList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setBudgets_nullUniqueBudgetList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBudgetList.setBudgets((UniqueBudgetList) null));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setBudgets_uniqueBudgetList_replacesOwnListWithProvidedUniqueBudgetList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueBudgetList.add(KOREA);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        UniqueBudgetList expectedUniqueBudgetList \u003d new UniqueBudgetList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expectedUniqueBudgetList.add(JAPAN);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueBudgetList.setBudgets(expectedUniqueBudgetList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(expectedUniqueBudgetList, uniqueBudgetList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setBudgets_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBudgetList.setBudgets((List\u003cBudget\u003e) null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setBudgets_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueBudgetList.add(KOREA);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        List\u003cBudget\u003e budgetList \u003d Collections.singletonList(JAPAN);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueBudgetList.setBudgets(budgetList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        UniqueBudgetList expectedUniqueBudgetList \u003d new UniqueBudgetList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expectedUniqueBudgetList.add(JAPAN);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(expectedUniqueBudgetList, uniqueBudgetList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setBudgets_listWithDuplicateBudgets_throwsDuplicateBudgetException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        List\u003cBudget\u003e listWithDuplicateBudgets \u003d Arrays.asList(KOREA, KOREA);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(DuplicateBudgetException.class, () -\u003e uniqueBudgetList.setBudgets(listWithDuplicateBudgets));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            -\u003e uniqueBudgetList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 4,
      "choonx99": 163
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/AmountTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Amount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class AmountTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Amount(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void constructor_invalidAmount_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String invalidAmount \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Amount(invalidAmount));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void isValidAmount() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // null amount"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Amount.isValidAmount(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // invalid amounts"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(Amount.isValidAmount(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"912462724523523\")); // more than 14 digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"amount\")); // non-numeric"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"0.00\")); // amount is 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"-1\")); // amount is negative"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // valid amounts"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1\")); // exactly 1 digit"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1.1\")); // exactly 1 decimal"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1.15\")); // exactly 2 decimals"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1472745.15\")); // less than 14 digits and exactly 2 decimals"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"93121534\")); // less than 14 digits"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 1,
      "choonx99": 44,
      "muhammadaljunied": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/CurrencyConversionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.RUM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.VODKA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Amount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Currency;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.exchangedata.ExchangeDataSingleton;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class CurrencyConversionTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void isSameCurrencyConverted() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        //Convert Back to SGD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        String expectedValue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        String computedValue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        // USD -\u003e SGD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        expectedValue \u003d String.format(\"%.2f\", RUM.getAmount().getValue() / RUM.getCurrency().getRate());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        computedValue \u003d String.format(\"%.2f\", RUM.getConvertedAmount());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertTrue(expectedValue.equals(computedValue));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        // SGD -\u003e SGD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        expectedValue \u003d String.format(\"%.2f\", VODKA.getAmount().getValue() / VODKA.getCurrency().getRate());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        computedValue \u003d String.format(\"%.2f\", VODKA.getConvertedAmount());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertTrue(expectedValue.equals(computedValue));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        // USD -\u003e SGD -\u003e MYR"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        expectedValue \u003d String.format(\"%.2f\", ("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            RUM.getAmount().getValue() / RUM.getCurrency().getRate())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            * ExchangeDataSingleton.getInstance().getRates().getRate(\"MYR\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        computedValue \u003d String.format(\"%.2f\", RUM.getConvertedAmount(new Currency(\"MYR\")));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertTrue(expectedValue.equals(computedValue));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        // SGD -\u003e EUR max value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        expectedValue \u003d String.format(\"%.2f\", 999999999999.0"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            / ExchangeDataSingleton.getInstance().getRates().getRate(\"EUR\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        computedValue \u003d String.format(\"%.2f\", new Expense("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            new Name(\"test\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            new Amount(\"999999999999\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            new Currency(\"SGD\", ExchangeDataSingleton.getInstance().getRates().getRate(\"EUR\")),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            new Date(\"10/11/2019\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            new Tag(\"\")).getConvertedAmount()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        );"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertTrue(expectedValue.equals(computedValue));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/CurrencyTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Currency;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.exchangedata.ExchangeDataSingleton;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class CurrencyTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Currency(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void constructor_invalidAmount_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        String invalidCurrency \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Currency(invalidCurrency));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void isValidCurrency() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        // null amount"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Currency.isValidCurrency(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        // invalid currency formats"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertFalse(Currency.isValidCurrency(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertFalse(Currency.isValidCurrency(\" \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertFalse(Currency.isValidCurrency(\"X\")); // Doesn\u0027t meet 3 Letter requirement"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertFalse(Currency.isValidCurrency(\"XX\")); // Doesn\u0027t meet 3 Letter requirement"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertFalse(Currency.isValidCurrency(\"XX X\")); // spaces within Currency"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        // valid currency formats"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertTrue(Currency.isValidCurrency(\"SGD\")); // exactly SGD"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertTrue(Currency.isValidCurrency(\"USD\")); // exactly USD"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertTrue(Currency.isValidCurrency(\"MYR\")); // exactly MYR"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertTrue(Currency.isValidCurrency(\"JPY\")); // exactly MYR"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        //invalid currency (Unsupported Currencies)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertFalse(ExchangeDataSingleton.getInstance().isValidCurrency(\"XCD\")); // exactly SGD"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertFalse(ExchangeDataSingleton.getInstance().isValidCurrency(\"BZD\")); // exactly USD"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertFalse(ExchangeDataSingleton.getInstance().isValidCurrency(\"BOV\")); // exactly MYR"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertFalse(ExchangeDataSingleton.getInstance().isValidCurrency(\"XAF\")); // exactly MYR"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        //Valid currency (Supported Currencies)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertTrue(ExchangeDataSingleton.getInstance().isValidCurrency(\"SGD\")); // exactly SGD"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertTrue(ExchangeDataSingleton.getInstance().isValidCurrency(\"USD\")); // exactly USD"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertTrue(ExchangeDataSingleton.getInstance().isValidCurrency(\"MYR\")); // exactly MYR"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertTrue(ExchangeDataSingleton.getInstance().isValidCurrency(\"JPY\")); // exactly JPY"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/DateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Date(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // blank date"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(Date.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(Date.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(Date.isValidDate(\"12/13\")); // missing year"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(Date.isValidDate(\"12/2019\")); // missing day"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(Date.isValidDate(\"31/2019\")); // missing month"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(Date.isValidDate(\"123/11/2019\")); // invalid day"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertFalse(Date.isValidDate(\"12/123/2019\")); // invalid month"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(Date.isValidDate(\"12/11/20111\")); // invalid year"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(Date.isValidDate(\"1/1/2019 12222\")); // invalid time"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(Date.isValidDate(\"02/02/2019 0\")); // invalid time"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertFalse(Date.isValidDate(\"Sat\")); // invalid time"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertFalse(Date.isValidDate(\"Jun 01\")); // invalid format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertFalse(Date.isValidDate(\"2019/1/1\")); // invalid format"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertFalse(Date.isValidDate(\"2019/1/1 1800\")); // invalid format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // valid date"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Date.isValidDate(\"1/1/2019\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Date.isValidDate(\"01/2/2019\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Date.isValidDate(\"02/02/2019\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Date.isValidDate(\"1/02/2019\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Date.isValidDate(\"1/1/2019 1845\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Date.isValidDate(\"01/2/2019 1213\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Date.isValidDate(\"02/02/2019 1522\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertTrue(Date.isValidDate(\"1/02/2019 1423\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Date.isValidDate(\"1/02/2019 355\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertTrue(Date.isValidDate(\"01/02/2019 845\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertTrue(Date.isValidDate(\"01/2/2019 130\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertTrue(Date.isValidDate(\"1/2/2019 000\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Date.isValidDate(\"1155\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Date.isValidDate(\"155\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Date.isValidDate(\"1455\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 11,
      "choonx99": 53,
      "muhammadaljunied": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/ExpenseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_RUM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CURRENCY_RUM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_RUM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_RUM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_ALCOHOL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.FOOD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.RUM;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class ExpenseTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void isSameExpense() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(FOOD.isSameExpense(FOOD));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(FOOD.isSameExpense(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different amount and date -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Expense editedFood \u003d new ExpenseBuilder(FOOD).withAmount(VALID_AMOUNT_RUM)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .withCurrency(VALID_CURRENCY_RUM).withDate(VALID_DATE_RUM).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertFalse(FOOD.isSameExpense(editedFood));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        editedFood \u003d new ExpenseBuilder(FOOD).withName(VALID_NAME_RUM).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(FOOD.isSameExpense(editedFood));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        // different currency -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        editedFood \u003d new ExpenseBuilder(FOOD).withCurrency(VALID_CURRENCY_RUM).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertFalse(FOOD.isSameExpense(editedFood));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        // same name, same amount, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        editedFood \u003d new ExpenseBuilder(FOOD).withDate(VALID_DATE_RUM)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .withTag(VALID_TAG_ALCOHOL).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertFalse(FOOD.isSameExpense(editedFood));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        // same name, same date, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        editedFood \u003d new ExpenseBuilder(FOOD).withAmount(VALID_AMOUNT_RUM)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .withTag(VALID_TAG_ALCOHOL).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertFalse(FOOD.isSameExpense(editedFood));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // same name, same amount, same date, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        editedFood \u003d new ExpenseBuilder(FOOD).withTag(VALID_TAG_ALCOHOL).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(FOOD.isSameExpense(editedFood));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense foodCopy \u003d new ExpenseBuilder(FOOD).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(FOOD.equals(foodCopy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(FOOD.equals(FOOD));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(FOOD.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(FOOD.equals(5));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(FOOD.equals(RUM));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Expense editedFood \u003d new ExpenseBuilder(FOOD).withName(VALID_NAME_RUM).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(FOOD.equals(editedFood));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different amount -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        editedFood \u003d new ExpenseBuilder(FOOD).withAmount(VALID_AMOUNT_RUM).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(FOOD.equals(editedFood));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        editedFood \u003d new ExpenseBuilder(FOOD).withDate(VALID_DATE_RUM).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(FOOD.equals(editedFood));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        editedFood \u003d new ExpenseBuilder(FOOD).withTag(VALID_TAG_ALCOHOL).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(FOOD.equals(editedFood));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 9,
      "choonx99": 73,
      "muhammadaljunied": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"Coffee\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withName(\"Coffee Tea\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Coffee\", \"Tea\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withName(\"Coffee Tea\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Tea\", \"Sprite\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withName(\"Coffee Sprite\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"cOFfee\", \"tEA\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withName(\"Coffee Tea\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withName(\"Coffee\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Sprite\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withName(\"Coffee Tea\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // Keywords match amount and date, but does not match name"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"$23.50\", \"13/10/2019\", \"Tea\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withName(\"Coffee\").withAmount(\"23.50\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                .withDate(\"13/10/2019\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 1,
      "choonx99": 18,
      "muhammadaljunied": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertFalse(Name.isValidName(\" coffee*\")); // start with space"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Name.isValidName(\"afternoon coffee\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Name.isValidName(\"2nd coffee\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Name.isValidName(\"Starbucks\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(Name.isValidName(\"Starbucks and Coffee Bean\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 2,
      "choonx99": 4,
      "muhammadaljunied": 2,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/UniqueExpenseListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_RUM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_ALCOHOL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.FOOD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.RUM;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.exceptions.DuplicateExpenseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.exceptions.ExpenseNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class UniqueExpenseListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private final UniqueExpenseList uniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void contains_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenseList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void contains_expenseNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(uniqueExpenseList.contains(FOOD));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void contains_expenseInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueExpenseList.add(FOOD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(uniqueExpenseList.contains(FOOD));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void contains_expenseWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueExpenseList.add(FOOD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Expense editedFood \u003d new ExpenseBuilder(FOOD).withTag(VALID_TAG_ALCOHOL)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertTrue(uniqueExpenseList.contains(editedFood));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void add_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenseList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void add_duplicateExpense_throwsDuplicateExpenseException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueExpenseList.add(FOOD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(DuplicateExpenseException.class, () -\u003e uniqueExpenseList.add(FOOD));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setExpense_nullTargetExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenseList.setExpense(null, FOOD));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setExpense_nullEditedExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenseList.setExpense(FOOD, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setExpense_targetExpenseNotInList_throwsExpenseNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(ExpenseNotFoundException.class, () -\u003e uniqueExpenseList.setExpense(FOOD, FOOD));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setExpense_editedExpenseIsSameExpense_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueExpenseList.add(FOOD);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueExpenseList.setExpense(FOOD, FOOD);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        UniqueExpenseList expectedUniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expectedUniqueExpenseList.add(FOOD);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(expectedUniqueExpenseList, uniqueExpenseList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setExpense_editedExpenseHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueExpenseList.add(FOOD);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Expense editedFood \u003d new ExpenseBuilder(FOOD).withAmount(VALID_AMOUNT_RUM).withTag(VALID_TAG_ALCOHOL)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueExpenseList.setExpense(FOOD, editedFood);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        UniqueExpenseList expectedUniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expectedUniqueExpenseList.add(editedFood);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(expectedUniqueExpenseList, uniqueExpenseList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setExpense_editedExpenseHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueExpenseList.add(FOOD);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueExpenseList.setExpense(FOOD, RUM);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        UniqueExpenseList expectedUniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expectedUniqueExpenseList.add(RUM);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(expectedUniqueExpenseList, uniqueExpenseList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setExpense_editedExpenseHasNonUniqueIdentity_throwsDuplicateExpenseException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueExpenseList.add(FOOD);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueExpenseList.add(RUM);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(DuplicateExpenseException.class, () -\u003e uniqueExpenseList.setExpense(FOOD, RUM));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void remove_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenseList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void remove_expenseDoesNotExist_throwsExpenseNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(ExpenseNotFoundException.class, () -\u003e uniqueExpenseList.remove(FOOD));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void remove_existingExpense_removesExpense() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueExpenseList.add(FOOD);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueExpenseList.remove(FOOD);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        UniqueExpenseList expectedUniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(expectedUniqueExpenseList, uniqueExpenseList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setExpenses_nullUniqueExpenseList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenseList.setExpenses((UniqueExpenseList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setExpenses_uniqueExpenseList_replacesOwnListWithProvidedUniqueExpenseList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueExpenseList.add(FOOD);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        UniqueExpenseList expectedUniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expectedUniqueExpenseList.add(RUM);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueExpenseList.setExpenses(expectedUniqueExpenseList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(expectedUniqueExpenseList, uniqueExpenseList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setExpenses_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenseList.setExpenses((List\u003cExpense\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setExpenses_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueExpenseList.add(FOOD);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        List\u003cExpense\u003e expenseList \u003d Collections.singletonList(RUM);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        uniqueExpenseList.setExpenses(expenseList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        UniqueExpenseList expectedUniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expectedUniqueExpenseList.add(RUM);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(expectedUniqueExpenseList, uniqueExpenseList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setExpenses_listWithDuplicateExpenses_throwsDuplicateExpenseException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        List\u003cExpense\u003e listWithDuplicateExpenses \u003d Arrays.asList(FOOD, FOOD);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(DuplicateExpenseException.class, () -\u003e uniqueExpenseList.setExpenses(listWithDuplicateExpenses));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            -\u003e uniqueExpenseList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 168,
      "muhammadaljunied": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/TagTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        String invalidTagName \u003d \"-\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 3,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedBudgetTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.storage.JsonAdaptedBudget.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalBudgets.KOREA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ExpenseList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Amount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Currency;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class JsonAdaptedBudgetTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final String INVALID_NAME \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final String INVALID_AMOUNT \u003d \"+$@654\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final String INVALID_CURRENCY \u003d \"X12\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final String INVALID_START_DATE \u003d \"Sat\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final String INVALID_END_DATE \u003d \"Thursday 1/1/2019\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final String VALID_NAME \u003d KOREA.getName().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final String VALID_AMOUNT \u003d KOREA.getAmount().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static final String VALID_CURRENCY \u003d KOREA.getCurrency().name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final String VALID_START_DATE \u003d KOREA.getStartDate().rawValue;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final String VALID_END_DATE \u003d KOREA.getEndDate().rawValue;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final JsonSerializableExpenseList VALID_EXPENSELIST \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        new JsonSerializableExpenseList(new ExpenseList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void toModelType_validBudgetDetails_returnsBudget() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonAdaptedBudget budget \u003d new JsonAdaptedBudget(KOREA);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(KOREA, budget.toModelType());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonAdaptedBudget budget \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new JsonAdaptedBudget(INVALID_NAME, VALID_AMOUNT, VALID_AMOUNT, VALID_CURRENCY, VALID_START_DATE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                VALID_END_DATE, VALID_EXPENSELIST);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, budget::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonAdaptedBudget budget \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new JsonAdaptedBudget(null, VALID_AMOUNT, VALID_AMOUNT, VALID_CURRENCY, VALID_START_DATE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                VALID_END_DATE, VALID_EXPENSELIST);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, budget::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void toModelType_invalidAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonAdaptedBudget budget \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new JsonAdaptedBudget(VALID_NAME, INVALID_AMOUNT, VALID_AMOUNT, VALID_CURRENCY, VALID_START_DATE,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                VALID_END_DATE, VALID_EXPENSELIST);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String expectedMessage \u003d Amount.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, budget::toModelType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void toModelType_nullAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonAdaptedBudget budget \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new JsonAdaptedBudget(VALID_NAME, null, VALID_AMOUNT, VALID_CURRENCY, VALID_START_DATE,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                VALID_END_DATE, VALID_EXPENSELIST);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, budget::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void toModelType_invalidCurrency_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonAdaptedBudget budget \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new JsonAdaptedBudget(VALID_NAME, VALID_AMOUNT, VALID_AMOUNT, INVALID_CURRENCY, VALID_START_DATE,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                VALID_END_DATE, VALID_EXPENSELIST);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String expectedMessage \u003d Currency.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, budget::toModelType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void toModelType_nullCurrency_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonAdaptedBudget budget \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new JsonAdaptedBudget(VALID_NAME, VALID_AMOUNT, VALID_AMOUNT, null, VALID_START_DATE,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                VALID_END_DATE, VALID_EXPENSELIST);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Currency.class.getSimpleName());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, budget::toModelType);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void toModelType_invalidStartDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonAdaptedBudget budget \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new JsonAdaptedBudget(VALID_NAME, VALID_AMOUNT, VALID_AMOUNT, VALID_CURRENCY, INVALID_START_DATE,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                VALID_END_DATE, VALID_EXPENSELIST);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, budget::toModelType);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void toModelType_nullStartDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonAdaptedBudget budget \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new JsonAdaptedBudget(VALID_NAME, VALID_AMOUNT, VALID_AMOUNT, VALID_CURRENCY, null,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                VALID_END_DATE, VALID_EXPENSELIST);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, budget::toModelType);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void toModelType_invalidEndDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonAdaptedBudget budget \u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new JsonAdaptedBudget(VALID_NAME, VALID_AMOUNT, VALID_AMOUNT, VALID_CURRENCY, VALID_START_DATE,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                INVALID_END_DATE, VALID_EXPENSELIST);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, budget::toModelType);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void toModelType_nullEndDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonAdaptedBudget budget \u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new JsonAdaptedBudget(VALID_NAME, VALID_AMOUNT, VALID_AMOUNT, VALID_CURRENCY, VALID_START_DATE,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                null, VALID_EXPENSELIST);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, budget::toModelType);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 4,
      "choonx99": 120,
      "muhammadaljunied": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedExpenseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.storage.JsonAdaptedExpense.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.FOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Amount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Currency;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class JsonAdaptedExpenseTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static final String INVALID_NAME \u003d \"  \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final String INVALID_AMOUNT \u003d \"+$@654\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static final JsonAdaptedCurrency INVALID_CURRENCY \u003d new JsonAdaptedCurrency(\"X12\", 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static final String INVALID_DATE \u003d \"Sat\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final String VALID_NAME \u003d FOOD.getName().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final String VALID_AMOUNT \u003d FOOD.getAmount().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static final JsonAdaptedCurrency VALID_CURRENCY \u003d new JsonAdaptedCurrency(FOOD.getCurrency().name, 1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final String VALID_DATE \u003d FOOD.getDate().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static final String VALID_TAG \u003d FOOD.getTag().tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void toModelType_validExpenseDetails_returnsExpense() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonAdaptedExpense expense \u003d new JsonAdaptedExpense(FOOD);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(FOOD, expense.toModelType());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            new JsonAdaptedExpense(INVALID_NAME, VALID_AMOUNT, VALID_CURRENCY, VALID_DATE, VALID_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        JsonAdaptedExpense expense \u003d new JsonAdaptedExpense(null, VALID_AMOUNT, VALID_CURRENCY, VALID_DATE, VALID_TAG);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void toModelType_invalidAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            new JsonAdaptedExpense(VALID_NAME, INVALID_AMOUNT, VALID_CURRENCY, VALID_DATE, VALID_TAG);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String expectedMessage \u003d Amount.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void toModelType_nullAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        JsonAdaptedExpense expense \u003d new JsonAdaptedExpense(VALID_NAME, null, VALID_CURRENCY, VALID_DATE, VALID_TAG);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void toModelType_invalidCurrency_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            new JsonAdaptedExpense(VALID_NAME, VALID_AMOUNT, INVALID_CURRENCY, VALID_DATE, VALID_TAG);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        String expectedMessage \u003d Currency.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void toModelType_nullCurrency_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        JsonAdaptedExpense expense \u003d new JsonAdaptedExpense(VALID_NAME, VALID_AMOUNT, null, VALID_DATE, VALID_TAG);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Currency.class.getSimpleName());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            new JsonAdaptedExpense(VALID_NAME, VALID_AMOUNT, VALID_CURRENCY, INVALID_DATE, VALID_TAG);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        JsonAdaptedExpense expense \u003d new JsonAdaptedExpense(VALID_NAME, VALID_AMOUNT, VALID_CURRENCY, null, VALID_TAG);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        String invalidTag \u003d \"-\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            new JsonAdaptedExpense(VALID_NAME, VALID_AMOUNT, VALID_CURRENCY, VALID_DATE, invalidTag);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(IllegalValueException.class, expense::toModelType);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 3,
      "choonx99": 71,
      "muhammadaljunied": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonExpenseListStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.FURNITURE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.SNACKS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.TRANSPORT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenseList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ExpenseList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class JsonExpenseListStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonExpenseListStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void readExpenseList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readExpenseList(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private java.util.Optional\u003cReadOnlyExpenseList\u003e readExpenseList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return new JsonExpenseListStorage(Paths.get(filePath)).readExpenseList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertFalse(readExpenseList(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readExpenseList(\"notJsonFormatExpense.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void readExpenseList_invalidExpenseExpenseList_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readExpenseList(\"invalidExpense.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void readExpenseList_invalidAndValidExpenseExpenseList_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readExpenseList(\"invalidAndValidExpense.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void readAndSaveExpenseList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempExpenseList.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ExpenseList original \u003d getTypicalExpenseList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonExpenseListStorage jsonExpenseListStorage \u003d new JsonExpenseListStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        jsonExpenseListStorage.saveExpenseList(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ReadOnlyExpenseList readBack \u003d jsonExpenseListStorage.readExpenseList(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(original, new ExpenseList(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        original.addExpense(FURNITURE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        original.removeExpense(TRANSPORT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        jsonExpenseListStorage.saveExpenseList(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        readBack \u003d jsonExpenseListStorage.readExpenseList(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(original, new ExpenseList(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        original.addExpense(SNACKS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        jsonExpenseListStorage.saveExpenseList(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        readBack \u003d jsonExpenseListStorage.readExpenseList().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(original, new ExpenseList(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void saveExpenseList_nullExpenseList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveExpenseList(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Saves {@code expenseList} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private void saveExpenseList(ReadOnlyExpenseList expenseList, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            new JsonExpenseListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    .saveExpenseList(expenseList, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void saveExpenseList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveExpenseList(new ExpenseList(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 3,
      "choonx99": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableExpenseListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ExpenseList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.testutil.TypicalExpenses;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class JsonSerializableExpenseListTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableExpenseListTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static final Path TYPICAL_EXPENSES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalExpenses.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static final Path INVALID_EXPENSE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidExpense.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static final Path DUPLICATE_EXPENSE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateExpense.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void toModelType_typicalExpensesFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonSerializableExpenseList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_EXPENSES_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            JsonSerializableExpenseList.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        ExpenseList expenseListFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ExpenseList typicalExpensesExpenseList \u003d TypicalExpenses.getTypicalExpenseList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(expenseListFromFile, typicalExpensesExpenseList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void toModelType_invalidExpenseFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonSerializableExpenseList dataFromFile \u003d JsonUtil.readJsonFile(INVALID_EXPENSE_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            JsonSerializableExpenseList.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void toModelType_duplicateExpenses_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonSerializableExpenseList dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_EXPENSE_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            JsonSerializableExpenseList.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableExpenseList.MESSAGE_DUPLICATE_EXPENSE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 9,
      "choonx99": 11,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        userPrefs.setExpenseListFilePath(Paths.get(\"expenselist.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        userPrefs.setBudgetListFilePath(Paths.get(\"budgetlist.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Path prefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(prefsFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 4,
      "-": 120
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalBudgets.getTypicalBudgetList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenseList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.BudgetList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ExpenseList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ReadOnlyBudgetList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonExpenseListStorage expenseListStorage \u003d new JsonExpenseListStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        JsonBudgetListStorage budgetListStorage \u003d new JsonBudgetListStorage(getTempFilePath(\"bl\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        JsonExchangeDataStorage exchangeDataStorage \u003d new JsonExchangeDataStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        storageManager \u003d new StorageManager(expenseListStorage, budgetListStorage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            exchangeDataStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void expenseListReadSave() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "         * {@link JsonExpenseListStorage} class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonExpenseListStorageTest} class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ExpenseList original \u003d getTypicalExpenseList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        storageManager.saveExpenseList(original);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ReadOnlyExpenseList retrieved \u003d storageManager.readExpenseList().get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertEquals(original, new ExpenseList(retrieved));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void getExpenseListFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertNotNull(storageManager.getExpenseListFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void getExchangeDataFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertNotNull(storageManager.getExchangeDataFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void budgetListReadSave() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": "         * {@link JsonBudgetListStorage} class."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choonx99"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonBudgetListStorageTest} class."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choonx99"
        },
        "content": "         */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        BudgetList original \u003d getTypicalBudgetList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        storageManager.saveBudgetList(original);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ReadOnlyBudgetList retrieved \u003d storageManager.readBudgetList().get();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertEquals(original, new BudgetList(retrieved));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void getBudgetListFilePath() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assertNotNull(storageManager.getBudgetListFilePath());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 6,
      "choonx99": 29,
      "muhammadaljunied": 7,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BudgetBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenseList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ExpenseList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Currency;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * A utility class to help with building Budget objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class BudgetBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Korea holiday\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String DEFAULT_AMOUNT \u003d \"2500\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String DEFAULT_AMOUNT_LEFT \u003d \"2500\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String DEFAULT_CURRENCY \u003d \"USD\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String DEFAULT_START_DATE \u003d \"13/10/2019\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String DEFAULT_END_DATE \u003d \"25/10/2019\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final ExpenseList DEFAULT_EXPENSE_LIST \u003d getTypicalExpenseList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String VALID_DATE_BETWEEN_DEFAULT_START_AND_END_DATES \u003d \"17/10/2019\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String VALID_DATE_BEFORE_DEFAULT_START_DATE \u003d \"10/10/2019\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String VALID_DATE_AFTER_DEFAULT_END_DATE \u003d \"1/11/2019\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Amount amountLeft;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Currency currency;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Date startDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Date endDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private ExpenseList expenseList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public BudgetBuilder() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        amount \u003d new Amount(DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        amountLeft \u003d new Amount(DEFAULT_AMOUNT_LEFT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        currency \u003d new Currency(DEFAULT_CURRENCY);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        startDate \u003d new Date(DEFAULT_START_DATE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        endDate \u003d new Date(DEFAULT_END_DATE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expenseList \u003d new ExpenseList(DEFAULT_EXPENSE_LIST);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Initializes the BudgetBuilder with the data of {@code budgetToCopy}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public BudgetBuilder(Budget budgetToCopy) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        name \u003d budgetToCopy.getName();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        amount \u003d budgetToCopy.getAmount();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        amountLeft \u003d budgetToCopy.getAmountLeft();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        currency \u003d budgetToCopy.getCurrency();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        startDate \u003d budgetToCopy.getStartDate();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        endDate \u003d budgetToCopy.getEndDate();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expenseList \u003d budgetToCopy.getExpenseList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Sets the {@code Name} of the {@code Budget} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public BudgetBuilder withName(String name) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Sets the {@code Amount} of the {@code Budget} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public BudgetBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.amount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Sets the {@code Currency} of the {@code Budget} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public BudgetBuilder withCurrency(String currency) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.currency \u003d new Currency(currency);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Sets the {@code startDate} of the {@code Budget} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public BudgetBuilder withStartDate(String date) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.startDate \u003d new Date(date);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Sets the {@code endDate} of the {@code Budget} that we are building."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public BudgetBuilder withEndDate(String date) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.endDate \u003d new Date(date);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public Budget build() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return new Budget(name, amount, amountLeft, currency, startDate, endDate, expenseList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 2,
      "choonx99": 97,
      "muhammadaljunied": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BudgetListBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.BudgetList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * A utility class to help with building BudgetList objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": " *     {@code BudgetList ab \u003d new BudgetListBuilder().withBudget(\"Coffee\", \"Tea\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class BudgetListBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private BudgetList budgetList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public BudgetListBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        budgetList \u003d new BudgetList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public BudgetListBuilder(BudgetList budgetList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.budgetList \u003d budgetList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Adds a new {@code Budget} to the {@code BudgetList} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public BudgetListBuilder withBudget(Budget budget) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        budgetList.addBudget(budget);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public BudgetList build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return budgetList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditExpenseDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.EditExpenseCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Amount;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Currency;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * A utility class to help with building EditExpenseDescriptor objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class EditExpenseDescriptorBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private EditExpenseDescriptor descriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public EditExpenseDescriptorBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptor();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public EditExpenseDescriptorBuilder(EditExpenseDescriptor descriptor) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.descriptor \u003d new EditExpenseDescriptor(descriptor);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns an {@code EditExpenseDescriptor} with fields containing {@code expense}\u0027s details"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public EditExpenseDescriptorBuilder(Expense expense) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptor();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        descriptor.setName(expense.getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        descriptor.setAmount(expense.getAmount());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        descriptor.setCurrency(expense.getCurrency());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        descriptor.setDate(expense.getDate());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        descriptor.setTag(expense.getTag());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Sets the {@code Name} of the {@code EditExpenseDescriptor} that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public EditExpenseDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Sets the {@code Amount} of the {@code EditExpenseDescriptor} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public EditExpenseDescriptorBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        descriptor.setAmount(new Amount(amount));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Sets the {@code Currency} of the {@code EditExpenseDescriptor} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public EditExpenseDescriptorBuilder withCurrency(String currency) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        descriptor.setCurrency(new Currency(currency));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Sets the {@code Date} of the {@code EditExpenseDescriptor} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public EditExpenseDescriptorBuilder withDate(String date) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        descriptor.setDate(new Date(date));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditExpenseDescriptor}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public EditExpenseDescriptorBuilder withTag(String tag) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        descriptor.setTag(new Tag(tag));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public EditExpenseDescriptor build() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 1,
      "choonx99": 64,
      "muhammadaljunied": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExpenseBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Amount;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Currency;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.exchangedata.ExchangeDataSingleton;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * A utility class to help with building Expense objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class ExpenseBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"textbook\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String DEFAULT_AMOUNT \u003d \"23.50\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String DEFAULT_CURRENCY \u003d \"SGD\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"13/10/2019\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String DEFAULT_TAG \u003d \"education\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private Currency currency;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private Tag tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ExpenseBuilder() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        amount \u003d new Amount(DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        currency \u003d new Currency(DEFAULT_CURRENCY);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        tag \u003d new Tag(DEFAULT_TAG);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Initializes the ExpenseBuilder with the data of {@code expenseToCopy}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ExpenseBuilder(Expense expenseToCopy) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        name \u003d expenseToCopy.getName();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        amount \u003d expenseToCopy.getAmount();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        currency \u003d expenseToCopy.getCurrency();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        date \u003d expenseToCopy.getDate();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        tag \u003d expenseToCopy.getTag();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Sets the {@code Name} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ExpenseBuilder withName(String name) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Parses the {@code tag} into a {@code Tag} and set it to the {@code Expense} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public ExpenseBuilder withTag(String tag) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.tag \u003d new Tag(tag);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Sets the {@code Amount} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ExpenseBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.amount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Sets the {@code Currency} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public ExpenseBuilder withCurrency(String currency) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.currency \u003d new Currency(currency, ExchangeDataSingleton.getInstance().getRates().getRate(currency));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Sets empty {@code Date} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public ExpenseBuilder withDate() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.date \u003d new Date();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Sets the {@code Date} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ExpenseBuilder withDate(String date) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public Expense build() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return new Expense(name, amount, currency, date, tag);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 12,
      "choonx99": 60,
      "muhammadaljunied": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExpenseListBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ExpenseList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * A utility class to help with building ExpenseList objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": " *     {@code ExpenseList ab \u003d new ExpenseListBuilder().withExpense(\"Coffee\", \"Tea\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class ExpenseListBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private ExpenseList expenseList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ExpenseListBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expenseList \u003d new ExpenseList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ExpenseListBuilder(ExpenseList expenseList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.expenseList \u003d expenseList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Adds a new {@code Expense} to the {@code ExpenseList} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ExpenseListBuilder withExpense(Expense expense) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        expenseList.addExpense(expense);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ExpenseList build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return expenseList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExpenseUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CURRENCY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.logic.commands.EditExpenseCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * A utility class for Expense."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class ExpenseUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns an add command string for adding the {@code expense}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static String getAddExpenseCommand(Expense expense) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return AddExpenseCommand.COMMAND_WORD + \" \" + getExpenseDetails(expense);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns the part of command string for the given {@code expense}\u0027s details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static String getExpenseDetails(Expense expense) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        sb.append(PREFIX_NAME + expense.getName().fullName + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        sb.append(PREFIX_AMOUNT + expense.getAmount().value + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        sb.append(PREFIX_CURRENCY + expense.getCurrency().name + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        sb.append(PREFIX_DATE + expense.getDate().value + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        sb.append(PREFIX_TAG + expense.getTag().tagName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns the part of command string for the given {@code EditExpenseDescriptor}\u0027s details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static String getEditExpenseDescriptorDetails(EditExpenseDescriptor descriptor) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        descriptor.getAmount().ifPresent(amount -\u003e sb.append(PREFIX_AMOUNT).append(amount.value).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        descriptor.getCurrency().ifPresent(amount -\u003e sb.append(PREFIX_CURRENCY).append(amount.name).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        descriptor.getDate().ifPresent(date -\u003e sb.append(PREFIX_DATE).append(date.value).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        descriptor.getTag().ifPresent(tag -\u003e sb.append(PREFIX_TAG).append(tag.tagName));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 1,
      "choonx99": 45,
      "muhammadaljunied": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RawExpenseBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Amount;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Currency;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " * A utility class to help with building Expense objects with raw date."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public class RawExpenseBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"textbook\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String DEFAULT_AMOUNT \u003d \"23.50\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String DEFAULT_CURRENCY \u003d \"SGD\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"13/10/2019\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final String DEFAULT_TAG \u003d \"education\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private Currency currency;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private Tag tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public RawExpenseBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        amount \u003d new Amount(DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        currency \u003d new Currency(DEFAULT_CURRENCY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE, false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        tag \u003d new Tag(DEFAULT_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Initializes the RawExpenseBuilder with the data of {@code expenseToCopy}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public RawExpenseBuilder(Expense expenseToCopy) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        name \u003d expenseToCopy.getName();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        amount \u003d expenseToCopy.getAmount();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        currency \u003d expenseToCopy.getCurrency();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        date \u003d expenseToCopy.getDate();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        tag \u003d expenseToCopy.getTag();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Sets the {@code Name} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public RawExpenseBuilder withName(String name) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Parses the {@code tag} into a {@code Set\u003cTag\u003e} and set it to the {@code Expense} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public RawExpenseBuilder withTag(String tag) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.tag \u003d new Tag(tag);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Sets the {@code Amount} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public RawExpenseBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.amount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Sets the {@code Currency} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public RawExpenseBuilder withCurrency(String currency) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.currency \u003d new Currency(currency);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Sets the {@code Date} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public RawExpenseBuilder withDate(String date) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public Expense build() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return new Expense(name, amount, currency, date, tag);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 65,
      "muhammadaljunied": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns the middle index of the expense in the {@code model}\u0027s expense list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return Index.fromOneBased(model.getFilteredExpenseList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns the last index of the expense in the {@code model}\u0027s expense list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return Index.fromOneBased(model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns the expense in the {@code model}\u0027s expense list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static Expense getExpense(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return model.getFilteredExpenseList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalBudgets.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.BudgetList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * A utility class containing a list of {@code Budget} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class TypicalBudgets {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final Budget KOREA \u003d new BudgetBuilder().withName(\"Korea Trip\").withAmount(\"3000\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            .withStartDate(\"5/1/2019\").withCurrency(\"KRW\").withEndDate(\"9/1/2019\").build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final Budget JAPAN \u003d new BudgetBuilder().withName(\"Japan Travel\").withAmount(\"5000\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "            .withStartDate(\"14/6/2019\").withCurrency(\"JPY\").withEndDate(\"23/6/2019\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final Budget FRANCE \u003d new BudgetBuilder().withName(\"France Fun\").withAmount(\"8000\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            .withStartDate(\"23/4/2019\").withCurrency(\"EUR\").withEndDate(\"11/5/2019\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns an {@code BudgetList} with all the typical budgets."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static BudgetList getTypicalBudgetList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        BudgetList ab \u003d new BudgetList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        for (Budget budget : getTypicalBudgets()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            ab.addBudget(budget);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static List\u003cBudget\u003e getTypicalBudgets() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(KOREA, JAPAN, FRANCE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 1,
      "choonx99": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalExchangeData.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Currency;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.commons.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.exchangedata.ExchangeData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.address.model.exchangedata.Rates;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * Returns the typical rates for currency exchange."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class TypicalExchangeData {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static ExchangeData getTypicalExchangeData() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Rates rates \u003d new Rates();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"CAD\", 0.9631651648);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"HKD\", 5.764322831);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"ISK\", 91.6266526343);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"PHP\", 37.5228573308);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"DKK\", 4.9140301256);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"HUF\", 217.0492665921);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"CZK\", 16.8585147668);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"GBP\", 0.5652173913);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"RON\", 3.1299085707);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"SEK\", 7.0585410774);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"IDR\", 10335.5193054003);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"INR\", 52.0745905413);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"BRL\", 3.0295994212);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"RUB\", 46.791620075);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"HRK\", 4.8923238834);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"JPY\", 79.7803065185);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"THB\", 22.2350851806);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"CHF\", 0.7236729593);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"EUR\", 0.6577649148);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"MYR\", 3.0723541406);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"BGN\", 1.2864566204);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"TRY\", 4.2785634414);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"CNY\", 5.1979872394);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"NOK\", 6.6853910412);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"NZD\", 1.1466157995);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"ZAR\", 10.8420048675);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"USD\", 0.7349207393);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"MXN\", 14.0761691771);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"SGD\", 1.0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"AUD\", 1.0682102217);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"ILS\", 2.5971189897);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"KRW\", 861.0405840952);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        rates.addRate(\"PLN\", 2.8144445175);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        ExchangeData exchangeData \u003d new ExchangeData("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            new Date("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            ), new Currency(\"SGD\"), rates);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return exchangeData;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalExpenses.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_RUM;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_VODKA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CURRENCY_RUM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CURRENCY_VODKA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_RUM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_VODKA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_RUM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_VODKA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_ALCOHOL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DRINKS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.ExpenseList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * A utility class containing a list of {@code Expense} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class TypicalExpenses {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final Expense TRANSPORT \u003d new ExpenseBuilder().withName(\"Bus\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        .withCurrency(\"SGD\").withAmount(\"3.20\").withDate(\"13/10/2019\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        .withTag(\"school\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final Expense FOOD \u003d new ExpenseBuilder().withName(\"Lunch\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        .withCurrency(\"SGD\").withAmount(\"4.50\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        .withDate(\"14/12/2019\").withTag(\"school\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final Expense SHOPPING \u003d new ExpenseBuilder().withName(\"Adidas shoe\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        .withCurrency(\"SGD\").withAmount(\"120.00\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        .withDate(\"24/12/2019\").withTag(\"\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final Expense GROCERIES \u003d new ExpenseBuilder().withName(\"Groceries\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        .withCurrency(\"SGD\").withAmount(\"17.80\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        .withDate(\"1/2/2019\").withTag(\"groceries\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final Expense VALENTINES \u003d new ExpenseBuilder().withName(\"Chocolates\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        .withCurrency(\"SGD\").withAmount(\"12.30\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        .withDate(\"13/2/2019\").withTag(\"\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final Expense CHRISTMAS \u003d new ExpenseBuilder().withName(\"Socks\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        .withCurrency(\"SGD\").withAmount(\"5.00\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        .withDate(\"24/12/2019\").withTag(\"\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final Expense NEWYEAR \u003d new ExpenseBuilder().withName(\"Cheese\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        .withCurrency(\"SGD\").withAmount(\"10.00\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        .withDate(\"31/12/2019\").withTag(\"\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final Expense FURNITURE \u003d new ExpenseBuilder().withName(\"Sofa\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        .withCurrency(\"SGD\").withAmount(\"700.00\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        .withDate(\"6/9/2019\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final Expense SNACKS \u003d new ExpenseBuilder().withName(\"Chips\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        .withCurrency(\"SGD\").withAmount(\"1.20\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        .withDate(\"2/3/2019\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    // Manually added - Expense\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final Expense VODKA \u003d new ExpenseBuilder().withName(VALID_NAME_VODKA)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        .withCurrency(VALID_CURRENCY_VODKA).withAmount(VALID_AMOUNT_VODKA)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        .withDate(VALID_DATE_VODKA).withTag(VALID_TAG_ALCOHOL).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static final Expense RUM \u003d new ExpenseBuilder().withName(VALID_NAME_RUM)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        .withCurrency(VALID_CURRENCY_RUM).withAmount(VALID_AMOUNT_RUM)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        .withDate(VALID_DATE_RUM).withTag(VALID_TAG_DRINKS)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final String KEYWORD_MATCHING_SOFA \u003d \"Sofa\"; // A keyword that matches SOFA"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private TypicalExpenses() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns an {@code ExpenseList} with all the typical expenses."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static ExpenseList getTypicalExpenseList() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ExpenseList ab \u003d new ExpenseList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        for (Expense expense : getTypicalExpenses()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            ab.addExpense(expense);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static List\u003cExpense\u003e getTypicalExpenses() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(TRANSPORT, FOOD, SHOPPING, GROCERIES, VALENTINES, CHRISTMAS, NEWYEAR));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 2,
      "choonx99": 60,
      "muhammadaljunied": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final Index INDEX_FIRST_ITEM \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final Index INDEX_SECOND_ITEM \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static final Index INDEX_THIRD_ITEM \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/HistoryPointerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "public class HistoryPointerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static final String CLEAR_COMMAND \u003d \"clear\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static final String EXPENSE_COMMAND \u003d \"expense\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private static final String DUMMY_COMMAND \u003d \"dummy\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private List\u003cString\u003e pointerElements;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private HistoryPointer pointer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        pointerElements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        pointerElements.add(CLEAR_COMMAND);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        pointerElements.add(EXPENSE_COMMAND);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void historyPointer_defensiveCopy_unmodifiedList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        pointer \u003d new HistoryPointer(list);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        list.add(CLEAR_COMMAND);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        HistoryPointer historyPointer \u003d new HistoryPointer(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertEquals(historyPointer, pointer);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void emptyList() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        pointer \u003d new HistoryPointer(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        hasNoCurrentHistory_failure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        hasNoPrevHistory_failure();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        hasNoNextHistory_failure();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        pointer.add(CLEAR_COMMAND);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        hasNextHistory_success(CLEAR_COMMAND);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void singleElementList() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        list.add(CLEAR_COMMAND);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        pointer \u003d new HistoryPointer(list);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        hasNoPrevHistory_failure();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        hasNoNextHistory_failure();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        hasCurrentHistory_success(CLEAR_COMMAND);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        hasCurrentHistory_success(CLEAR_COMMAND);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        hasCurrentHistory_success(CLEAR_COMMAND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        pointer.add(EXPENSE_COMMAND);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        hasNextHistory_success(EXPENSE_COMMAND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void multipleElementsList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        pointer \u003d new HistoryPointer(pointerElements);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        pointer.add(DUMMY_COMMAND);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        hasCurrentHistory_success(EXPENSE_COMMAND);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        hasNextHistory_success(DUMMY_COMMAND);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        hasNoNextHistory_failure();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        hasPrevHistory_success(EXPENSE_COMMAND);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        hasPrevHistory_success(CLEAR_COMMAND);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        hasNoPrevHistory_failure();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        HistoryPointer firstHistoryPointer \u003d new HistoryPointer(pointerElements);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertEquals(firstHistoryPointer, firstHistoryPointer);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        HistoryPointer firstPointerCopy \u003d new HistoryPointer(pointerElements);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertEquals(firstHistoryPointer, firstPointerCopy);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertNotEquals(1, firstHistoryPointer);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertNotEquals(null, firstHistoryPointer);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        // different elements -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        HistoryPointer differentElementPointer \u003d new HistoryPointer(Collections.singletonList(EXPENSE_COMMAND));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertNotEquals(firstHistoryPointer, differentElementPointer);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        firstPointerCopy.previous();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertNotEquals(firstHistoryPointer, firstPointerCopy);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns true and the return value"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * of {@code pointer#next()} equals to {@code element}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private void hasNextHistory_success(String element) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertTrue(pointer.hasNext());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertEquals(element, pointer.next());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns true and the return value"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * of {@code pointer#previous()} equals to {@code element}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private void hasPrevHistory_success(String element) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertTrue(pointer.hasPrevious());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertEquals(element, pointer.previous());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns true and the return value"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * of {@code pointer#current()} equals to {@code element}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private void hasCurrentHistory_success(String element) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertTrue(pointer.hasCurrent());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertEquals(element, pointer.current());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns false."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private void hasNoNextHistory_failure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertFalse(pointer.hasNext());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns false."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private void hasNoPrevHistory_failure() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertFalse(pointer.hasPrevious());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns false."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    private void hasNoCurrentHistory_failure() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "        assertFalse(pointer.hasCurrent());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Cary-Xx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Cary-Xx": 155
    }
  }
]
